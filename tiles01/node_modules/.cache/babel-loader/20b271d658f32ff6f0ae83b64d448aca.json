{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst CommandOperationV2 = require('./command_v2');\n\nconst decorateWithCollation = require('../utils').decorateWithCollation;\n\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst MongoError = require('../error').MongoError;\n/**\n * Return a list of distinct values for the given key across a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {string} key Field of the document to find distinct values for.\n * @property {object} query The query for filtering the set of documents to which we apply the distinct filter.\n * @property {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n */\n\n\nclass DistinctOperation extends CommandOperationV2 {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {string} key Field of the document to find distinct values for.\n   * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.\n   * @param {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  execute(server, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options; // Distinct command\n\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    }; // Add maxTimeMS if defined\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    } // Do we have a readConcern specified\n\n\n    decorateWithReadConcern(cmd, coll, options); // Have we specified collation\n\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    if (this.explain && maxWireVersion(server) < 4) {\n      callback(new MongoError(`server does not support explain on distinct`));\n      return;\n    }\n\n    super.executeCommand(server, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.options.full || this.explain ? result : result.values);\n    });\n  }\n\n}\n\ndefineAspects(DistinctOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION, Aspect.EXPLAINABLE]);\nmodule.exports = DistinctOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/distinct.js"],"names":["Aspect","require","defineAspects","CommandOperationV2","decorateWithCollation","decorateWithReadConcern","maxWireVersion","MongoError","DistinctOperation","constructor","collection","key","query","options","execute","server","callback","coll","cmd","distinct","collectionName","maxTimeMS","err","explain","executeCommand","result","full","values","READ_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","EXPLAINABLE","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst CommandOperationV2 = require('./command_v2');\nconst decorateWithCollation = require('../utils').decorateWithCollation;\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst MongoError = require('../error').MongoError;\n\n/**\n * Return a list of distinct values for the given key across a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {string} key Field of the document to find distinct values for.\n * @property {object} query The query for filtering the set of documents to which we apply the distinct filter.\n * @property {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n */\nclass DistinctOperation extends CommandOperationV2 {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {string} key Field of the document to find distinct values for.\n   * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.\n   * @param {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(server, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n\n    // Distinct command\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(cmd, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    if (this.explain && maxWireVersion(server) < 4) {\n      callback(new MongoError(`server does not support explain on distinct`));\n      return;\n    }\n\n    super.executeCommand(server, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.options.full || this.explain ? result : result.values);\n    });\n  }\n}\n\ndefineAspects(DistinctOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION,\n  Aspect.EXPLAINABLE\n]);\n\nmodule.exports = DistinctOperation;\n"]},"metadata":{},"sourceType":"script"}