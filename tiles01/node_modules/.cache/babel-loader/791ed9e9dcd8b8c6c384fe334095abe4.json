{"ast":null,"code":"'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\n\nconst MongoError = require('../core').MongoError;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n\nclass AggregateOperation extends CommandOperationV2 {\n  constructor(parent, pipeline, options) {\n    super(parent, options, {\n      fullResponse: true\n    });\n    this.target = parent.s.namespace && parent.s.namespace.collection ? parent.s.namespace.collection : DB_AGGREGATE_COLLECTION;\n    this.pipeline = pipeline; // determine if we have a write stage, override read preference if so\n\n    this.hasWriteStage = false;\n\n    if (typeof options.out === 'string') {\n      this.pipeline = this.pipeline.concat({\n        $out: options.out\n      });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.readPreference = ReadPreference.primary;\n    }\n\n    if (this.explain && this.writeConcern) {\n      throw new MongoError('\"explain\" cannot be used on an aggregate call with writeConcern');\n    }\n\n    if (options.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoError('cursor options must be an object');\n    }\n  }\n\n  get canRetryRead() {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage) {\n    this.pipeline.push(stage);\n  }\n\n  execute(server, callback) {\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command = {\n      aggregate: this.target,\n      pipeline: this.pipeline\n    };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = null;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, {\n          writeConcern: this.writeConcern\n        });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (this.explain) {\n      options.full = false;\n    }\n\n    command.cursor = options.cursor || {};\n\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, command, callback);\n  }\n\n}\n\ndefineAspects(AggregateOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION, Aspect.EXPLAINABLE]);\nmodule.exports = AggregateOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/aggregate.js"],"names":["CommandOperationV2","require","MongoError","maxWireVersion","ReadPreference","Aspect","defineAspects","DB_AGGREGATE_COLLECTION","MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT","AggregateOperation","constructor","parent","pipeline","options","fullResponse","target","s","namespace","collection","hasWriteStage","out","concat","$out","length","finalStage","$merge","readPreference","primary","explain","writeConcern","cursor","canRetryRead","addToPipeline","stage","push","execute","server","callback","serverWireVersion","command","aggregate","readConcern","Object","assign","bypassDocumentValidation","allowDiskUse","hint","full","batchSize","executeCommand","READ_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","EXPLAINABLE","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\nconst MongoError = require('../core').MongoError;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst ReadPreference = require('../core').ReadPreference;\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\n\nconst DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n\nclass AggregateOperation extends CommandOperationV2 {\n  constructor(parent, pipeline, options) {\n    super(parent, options, { fullResponse: true });\n\n    this.target =\n      parent.s.namespace && parent.s.namespace.collection\n        ? parent.s.namespace.collection\n        : DB_AGGREGATE_COLLECTION;\n\n    this.pipeline = pipeline;\n\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof options.out === 'string') {\n      this.pipeline = this.pipeline.concat({ $out: options.out });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.readPreference = ReadPreference.primary;\n    }\n\n    if (this.explain && this.writeConcern) {\n      throw new MongoError('\"explain\" cannot be used on an aggregate call with writeConcern');\n    }\n\n    if (options.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoError('cursor options must be an object');\n    }\n  }\n\n  get canRetryRead() {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage) {\n    this.pipeline.push(stage);\n  }\n\n  execute(server, callback) {\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command = { aggregate: this.target, pipeline: this.pipeline };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = null;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, { writeConcern: this.writeConcern });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (this.explain) {\n      options.full = false;\n    }\n\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, command, callback);\n  }\n}\n\ndefineAspects(AggregateOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION,\n  Aspect.EXPLAINABLE\n]);\n\nmodule.exports = AggregateOperation;\n"]},"metadata":{},"sourceType":"script"}