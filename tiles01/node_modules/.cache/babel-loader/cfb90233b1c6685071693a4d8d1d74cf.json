{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst CommandOperation = require('./command');\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst crypto = require('crypto');\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst toError = require('../utils').toError;\n\nclass AddUserOperation extends CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.username = username;\n    this.password = password;\n  }\n\n  _buildCommand() {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options; // Get additional values\n\n    let roles = [];\n    if (Array.isArray(options.roles)) roles = options.roles;\n    if (typeof options.roles === 'string') roles = [options.roles]; // If not roles defined print deprecated message\n    // TODO: handle deprecation properly\n\n    if (roles.length === 0) {\n      console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n    } // Check the db name and add roles if needed\n\n\n    if ((db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') && !Array.isArray(options.roles)) {\n      roles = ['root'];\n    } else if (!Array.isArray(options.roles)) {\n      roles = ['dbOwner'];\n    }\n\n    const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    } // Build the command to execute\n\n\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    }; // No password\n\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    return command;\n  }\n\n  execute(callback) {\n    const options = this.options; // Error out if digestPassword set\n\n    if (options.digestPassword != null) {\n      return callback(toError(\"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"));\n    } // Attempt to execute auth command\n\n\n    super.execute((err, r) => {\n      if (!err) {\n        return handleCallback(callback, err, r);\n      }\n\n      return handleCallback(callback, err, null);\n    });\n  }\n\n}\n\ndefineAspects(AddUserOperation, Aspect.WRITE_OPERATION);\nmodule.exports = AddUserOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/add_user.js"],"names":["Aspect","require","CommandOperation","defineAspects","crypto","handleCallback","toError","AddUserOperation","constructor","db","username","password","options","_buildCommand","roles","Array","isArray","length","console","log","databaseName","toLowerCase","dbName","digestPassword","s","topology","lastIsMaster","maxWireVersion","userPassword","md5","createHash","update","digest","command","createUser","customData","pwd","execute","callback","err","r","WRITE_OPERATION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst CommandOperation = require('./command');\nconst defineAspects = require('./operation').defineAspects;\nconst crypto = require('crypto');\nconst handleCallback = require('../utils').handleCallback;\nconst toError = require('../utils').toError;\n\nclass AddUserOperation extends CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n\n    this.username = username;\n    this.password = password;\n  }\n\n  _buildCommand() {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Get additional values\n    let roles = [];\n    if (Array.isArray(options.roles)) roles = options.roles;\n    if (typeof options.roles === 'string') roles = [options.roles];\n\n    // If not roles defined print deprecated message\n    // TODO: handle deprecation properly\n    if (roles.length === 0) {\n      console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n    }\n\n    // Check the db name and add roles if needed\n    if (\n      (db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') &&\n      !Array.isArray(options.roles)\n    ) {\n      roles = ['root'];\n    } else if (!Array.isArray(options.roles)) {\n      roles = ['dbOwner'];\n    }\n\n    const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    return command;\n  }\n\n  execute(callback) {\n    const options = this.options;\n\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(\n        toError(\n          \"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"\n        )\n      );\n    }\n\n    // Attempt to execute auth command\n    super.execute((err, r) => {\n      if (!err) {\n        return handleCallback(callback, err, r);\n      }\n\n      return handleCallback(callback, err, null);\n    });\n  }\n}\n\ndefineAspects(AddUserOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = AddUserOperation;\n"]},"metadata":{},"sourceType":"script"}