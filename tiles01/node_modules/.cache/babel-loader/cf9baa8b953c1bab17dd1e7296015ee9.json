{"ast":null,"code":"'use strict';\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34; // Nan value bits as 32 bit values (due to lack of longs)\n\nvar NAN_BUFFER = [0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse(); // Infinity value bits 32 bit values (due to lack of longs)\n\nvar INF_NEGATIVE_BUFFER = [0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar INF_POSITIVE_BUFFER = [0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\nvar utils = require('./parser/utils'); // Detect if the value is a digit\n\n\nvar isDigit = function (value) {\n  return !isNaN(parseInt(value, 10));\n}; // Divide two uint128 values\n\n\nvar divideu128 = function (value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n\n  var _rem = Long.fromNumber(0);\n\n  var i = 0;\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return {\n      quotient: value,\n      rem: _rem\n    };\n  }\n\n  for (i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32); // Add the divided to _rem\n\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return {\n    quotient: value,\n    rem: _rem\n  };\n}; // Multiply two Long values and return the 128 bit value\n\n\nvar multiply64x2 = function (left, right) {\n  if (!left && !right) {\n    return {\n      high: Long.fromNumber(0),\n      low: Long.fromNumber(0)\n    };\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0)); // Return the 128 bit result\n\n  return {\n    high: productHigh,\n    low: productLow\n  };\n};\n\nvar lessThan = function (left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0; // Compare high bits first\n\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n}; // var longtoHex = function(value) {\n//   var buffer = utils.allocBuffer(8);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value.low_ & 0xff;\n//   buffer[index++] = (value.low_ >> 8) & 0xff;\n//   buffer[index++] = (value.low_ >> 16) & 0xff;\n//   buffer[index++] = (value.low_ >> 24) & 0xff;\n//   // Encode high bits\n//   buffer[index++] = value.high_ & 0xff;\n//   buffer[index++] = (value.high_ >> 8) & 0xff;\n//   buffer[index++] = (value.high_ >> 16) & 0xff;\n//   buffer[index++] = (value.high_ >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n// var int32toHex = function(value) {\n//   var buffer = utils.allocBuffer(4);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value & 0xff;\n//   buffer[index++] = (value >> 8) & 0xff;\n//   buffer[index++] = (value >> 16) & 0xff;\n//   buffer[index++] = (value >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\n\n\nvar Decimal128 = function (bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\n\n\nDecimal128.fromString = function (string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false; // Total number of significant digits (no leading or trailing zero)\n\n  var significantDigits = 0; // Total number of significand digits read\n\n  var nDigitsRead = 0; // Total number of digits (no leading zeros)\n\n  var nDigits = 0; // The number of the digits after radix\n\n  var radixPosition = 0; // The index of the first non-zero in *str*\n\n  var firstNonZero = 0; // Digits Array\n\n  var digits = [0]; // The number of digits in digits\n\n  var nDigitsStored = 0; // Insertion pointer for digits\n\n  var digitsInsert = 0; // The index of the first non-zero digit\n\n  var firstDigit = 0; // The index of the last digit\n\n  var lastDigit = 0; // Exponent\n\n  var exponent = 0; // loop index over array\n\n  var i = 0; // The high 17 digits of the significand\n\n  var significandHigh = [0, 0]; // The low 17 digits of the significand\n\n  var significandLow = [0, 0]; // The biased exponent\n\n  var biasedExponent = 0; // Read index\n\n  var index = 0; // Trim the string\n\n  string = string.trim(); // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n\n  if (string.length >= 7000) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  } // Results\n\n\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP); // Validate the string\n\n  if (!stringMatch && !infMatch && !nanMatch || string.length === 0) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  } // Check if we have an illegal exponent format\n\n\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  } // Get the negative or positive sign\n\n\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  } // Check if user passed Infinity or NaN\n\n\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n  } // Read all the digits\n\n\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) {\n        return new Decimal128(utils.toBuffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true; // Only store 34 digits\n\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  } // Read exponent if exists\n\n\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX); // No digits read\n\n    if (!match || !match[2]) {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    } // Get exponent\n\n\n    exponent = parseInt(match[0], 10); // Adjust the index\n\n    index = index + match[0].length;\n  } // Return not a number\n\n\n  if (string[index]) {\n    return new Decimal128(utils.toBuffer(NAN_BUFFER));\n  } // Done reading input\n  // Find first non-zero digit in digits\n\n\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if (exponent !== 0 && significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  } // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n  // Overflow prevention\n\n\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  } // Attempt to normalize the exponent\n\n\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit === 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      digitsString = digits.join('');\n\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  } // Round\n  // We've normalized the exponent, but might still need to round.\n\n\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {\n    var endOfString = nDigitsRead; // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n\n    if (sawRadix && exponent === EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      var dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0; // overflowed most significant digit\n\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  } // Encode significand\n  // The high 17 digits of the significand\n\n\n  significandHigh = Long.fromNumber(0); // The low 17 digits of the significand\n\n  significandLow = Long.fromNumber(0); // read a zero\n\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  } // Biased exponent\n\n\n  biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = {\n    low: Long.fromNumber(0),\n    high: Long.fromNumber(0)\n  }; // Encode combination, exponent, and significand.\n\n  if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber)) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low; // Encode sign\n\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  } // Encode into a buffer\n\n\n  var buffer = utils.allocBuffer(16);\n  index = 0; // Encode the low 64 bits of the decimal\n  // Encode low bits\n\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = dec.low.low_ >> 8 & 0xff;\n  buffer[index++] = dec.low.low_ >> 16 & 0xff;\n  buffer[index++] = dec.low.low_ >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = dec.low.high_ >> 8 & 0xff;\n  buffer[index++] = dec.low.high_ >> 16 & 0xff;\n  buffer[index++] = dec.low.high_ >> 24 & 0xff; // Encode the high 64 bits of the decimal\n  // Encode low bits\n\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = dec.high.low_ >> 8 & 0xff;\n  buffer[index++] = dec.high.low_ >> 16 & 0xff;\n  buffer[index++] = dec.high.low_ >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = dec.high.high_ >> 8 & 0xff;\n  buffer[index++] = dec.high.high_ >> 16 & 0xff;\n  buffer[index++] = dec.high.high_ >> 24 & 0xff; // Return the new Decimal128\n\n  return new Decimal128(buffer);\n}; // Extract least significant 5 bits\n\n\nvar COMBINATION_MASK = 0x1f; // Extract least significant 14 bits\n\nvar EXPONENT_MASK = 0x3fff; // Value of combination field for Inf\n\nvar COMBINATION_INFINITY = 30; // Value of combination field for NaN\n\nvar COMBINATION_NAN = 31; // Value of combination field for NaN\n// var COMBINATION_SNAN = 32;\n// decimal128 exponent bias\n\nEXPONENT_BIAS = 6176;\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\n\nDecimal128.prototype.toString = function () {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n  // bits 0 - 31\n  var high; // bits 32 - 63\n\n  var midh; // bits 64 - 95\n\n  var midl; // bits 96 - 127\n\n  var low; // bits 1 - 5\n\n  var combination; // decoded biased exponent (14 bits)\n\n  var biased_exponent; // the number of significand digits\n\n  var significand_digits = 0; // the base-10 digits in the significand\n\n  var significand = new Array(36);\n\n  for (var i = 0; i < significand.length; i++) significand[i] = 0; // read pointer into significand\n\n\n  var index = 0; // unbiased exponent\n\n  var exponent; // the exponent if scientific notation is used\n\n  var scientific_exponent; // true if the number is zero\n\n  var is_zero = false; // the most signifcant significand bits (50-46)\n\n  var significand_msb; // temporary storage for significand decoding\n\n  var significand128 = {\n    parts: new Array(4)\n  }; // indexing variables\n\n  i;\n  var j, k; // Output string\n\n  var string = []; // Unpack index\n\n  index = 0; // Buffer reference\n\n  var buffer = this.bytes; // Unpack the low 64bits into a long\n\n  low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24; // Unpack the high 64bits into a long\n\n  midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24; // Unpack index\n\n  index = 0; // Create the state of the decimal\n\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  } // Decode combination field and exponent\n\n\n  combination = high >> 26 & COMBINATION_MASK;\n\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = high >> 15 & EXPONENT_MASK;\n      significand_msb = 0x08 + (high >> 14 & 0x01);\n    }\n  } else {\n    significand_msb = high >> 14 & 0x07;\n    biased_exponent = high >> 17 & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS; // Create string of significand digits\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      var least_digits = 0; // Peform the divide\n\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_; // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n\n      if (!least_digits) continue;\n\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10; // least_digits = Math.round(least_digits / 10);\n\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  } // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    i = 0;\n\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent; // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    } // Exponent\n\n\n    string.push('E');\n\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent; // non-zero digits before radix\n\n      if (radix_position > 0) {\n        for (i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.'); // add leading zeros after radix\n\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function () {\n  return {\n    $numberDecimal: this.toString()\n  };\n};\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/bson/lib/bson/decimal128.js"],"names":["Long","require","PARSE_STRING_REGEXP","PARSE_INF_REGEXP","PARSE_NAN_REGEXP","EXPONENT_MAX","EXPONENT_MIN","EXPONENT_BIAS","MAX_DIGITS","NAN_BUFFER","reverse","INF_NEGATIVE_BUFFER","INF_POSITIVE_BUFFER","EXPONENT_REGEX","utils","isDigit","value","isNaN","parseInt","divideu128","DIVISOR","fromNumber","_rem","i","parts","quotient","rem","shiftLeft","add","div","low_","modulo","multiply64x2","left","right","high","low","leftHigh","shiftRightUnsigned","leftLow","getLowBits","rightHigh","rightLow","productHigh","multiply","productMid","productMid2","productLow","lessThan","uhleft","high_","uhright","ulleft","ulright","Decimal128","bytes","_bsontype","fromString","string","isNegative","sawRadix","foundNonZero","significantDigits","nDigitsRead","nDigits","radixPosition","firstNonZero","digits","nDigitsStored","digitsInsert","firstDigit","lastDigit","exponent","significandHigh","significandLow","biasedExponent","index","trim","length","Error","stringMatch","match","infMatch","nanMatch","undefined","toBuffer","substr","digitsString","join","endOfString","roundDigit","roundBit","dIdx","significand","dec","and","equals","or","buffer","allocBuffer","COMBINATION_MASK","EXPONENT_MASK","COMBINATION_INFINITY","COMBINATION_NAN","prototype","toString","midh","midl","combination","biased_exponent","significand_digits","Array","scientific_exponent","is_zero","significand_msb","significand128","j","k","ZERO","push","least_digits","result","Math","floor","radix_position","max","toJSON","$numberDecimal","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\n\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [\n  0x7c,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [\n  0xf8,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\nvar INF_POSITIVE_BUFFER = [\n  0x78,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n\nvar EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\nvar utils = require('./parser/utils');\n\n// Detect if the value is a digit\nvar isDigit = function(value) {\n  return !isNaN(parseInt(value, 10));\n};\n\n// Divide two uint128 values\nvar divideu128 = function(value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for (i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n};\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function(left, right) {\n  if (!left && !right) {\n    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n    .add(productMid2)\n    .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return { high: productHigh, low: productLow };\n};\n\nvar lessThan = function(left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n};\n\n// var longtoHex = function(value) {\n//   var buffer = utils.allocBuffer(8);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value.low_ & 0xff;\n//   buffer[index++] = (value.low_ >> 8) & 0xff;\n//   buffer[index++] = (value.low_ >> 16) & 0xff;\n//   buffer[index++] = (value.low_ >> 24) & 0xff;\n//   // Encode high bits\n//   buffer[index++] = value.high_ & 0xff;\n//   buffer[index++] = (value.high_ >> 8) & 0xff;\n//   buffer[index++] = (value.high_ >> 16) & 0xff;\n//   buffer[index++] = (value.high_ >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n// var int32toHex = function(value) {\n//   var buffer = utils.allocBuffer(4);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value & 0xff;\n//   buffer[index++] = (value >> 8) & 0xff;\n//   buffer[index++] = (value >> 16) & 0xff;\n//   buffer[index++] = (value >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\nvar Decimal128 = function(bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n  if (string.length >= 7000) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if ((!stringMatch && !infMatch && !nanMatch) || string.length === 0) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Check if we have an illegal exponent format\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Get the negative or positive sign\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) {\n        return new Decimal128(utils.toBuffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Read exponent if exists\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if (!match || !match[2]) {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if (string[index]) {\n    return new Decimal128(utils.toBuffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if (exponent !== 0 && significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit === 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  }\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if (sawRadix && exponent === EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      var dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(\n                utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER)\n              );\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if (\n    significand.high\n      .shiftRightUnsigned(49)\n      .and(Long.fromNumber(1))\n      .equals(Long.fromNumber)\n  ) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(\n      Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47))\n    );\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = utils.allocBuffer(16);\n  index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = (dec.low.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = (dec.low.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = (dec.high.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = (dec.high.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n};\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\n// var COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nEXPONENT_BIAS = 6176;\n\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for (var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = { parts: new Array(4) };\n  // indexing variables\n  i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  midl =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack the high 64bits into a long\n  midh =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  high =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack index\n  index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (\n    significand128.parts[0] === 0 &&\n    significand128.parts[1] === 0 &&\n    significand128.parts[2] === 0 &&\n    significand128.parts[3] === 0\n  ) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if (!least_digits) continue;\n\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    i = 0;\n\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if (radix_position > 0) {\n        for (i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function() {\n  return { $numberDecimal: this.toString() };\n};\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;\n"]},"metadata":{},"sourceType":"script"}