{"ast":null,"code":"'use strict';\n\nconst ReadPreference = require('./core').ReadPreference;\n\nconst parser = require('url');\n\nconst f = require('util').format;\n\nconst Logger = require('./core').Logger;\n\nconst dns = require('dns');\n\nconst ReadConcern = require('./read_concern');\n\nconst qs = require('querystring');\n\nconst MongoParseError = require('./core/error').MongoParseError;\n\nmodule.exports = function (url, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  let result;\n\n  try {\n    result = parser.parse(url, true);\n  } catch (e) {\n    return callback(new Error('URL malformed, cannot be parsed'));\n  }\n\n  if (result.protocol !== 'mongodb:' && result.protocol !== 'mongodb+srv:') {\n    return callback(new Error('Invalid schema, expected `mongodb` or `mongodb+srv`'));\n  }\n\n  if (result.protocol === 'mongodb:') {\n    return parseHandler(url, options, callback);\n  } // Otherwise parse this as an SRV record\n\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new Error('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new Error('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new Error('Ports not accepted with `mongodb+srv` URIs'));\n  }\n\n  let srvAddress = `_mongodb._tcp.${result.host}`;\n  dns.resolveSrv(srvAddress, function (err, addresses) {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new Error('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new Error('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    let base = result.auth ? `mongodb://${result.auth}@` : `mongodb://`;\n    let connectionStrings = addresses.map(function (address, i) {\n      if (i === 0) return `${base}${address.name}:${address.port}`;else return `${address.name}:${address.port}`;\n    });\n    let connectionString = connectionStrings.join(',') + '/';\n    let connectionStringOptions = []; // Add the default database if needed\n\n    if (result.path) {\n      let defaultDb = result.path.slice(1);\n\n      if (defaultDb.indexOf('?') !== -1) {\n        defaultDb = defaultDb.slice(0, defaultDb.indexOf('?'));\n      }\n\n      connectionString += defaultDb;\n    } // Default to SSL true\n\n\n    if (!options.ssl && !result.search) {\n      connectionStringOptions.push('ssl=true');\n    } else if (!options.ssl && result.search && !result.search.match('ssl')) {\n      connectionStringOptions.push('ssl=true');\n    } // Keep original uri options\n\n\n    if (result.search) {\n      connectionStringOptions.push(result.search.replace('?', ''));\n    }\n\n    dns.resolveTxt(result.host, function (err, record) {\n      if (err && err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') return callback(err);\n      if (err && err.code === 'ENODATA') record = null;\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = record[0].join('');\n        const parsedRecord = qs.parse(record);\n        const items = Object.keys(parsedRecord);\n\n        if (items.some(item => item !== 'authSource' && item !== 'replicaSet')) {\n          return callback(new MongoParseError('Text record must only set `authSource` or `replicaSet`'));\n        }\n\n        if (items.length > 0) {\n          connectionStringOptions.push(record);\n        }\n      } // Add any options to the connection string\n\n\n      if (connectionStringOptions.length) {\n        connectionString += `?${connectionStringOptions.join('&')}`;\n      }\n\n      parseHandler(connectionString, options, callback);\n    });\n  });\n};\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  let regex = /^.*?\\./;\n  let srv = `.${srvAddress.replace(regex, '')}`;\n  let parent = `.${parentDomain.replace(regex, '')}`;\n  if (srv.endsWith(parent)) return true;else return false;\n}\n\nfunction parseHandler(address, options, callback) {\n  let result, err;\n\n  try {\n    result = parseConnectionString(address, options);\n  } catch (e) {\n    err = e;\n  }\n\n  return err ? callback(err, null) : callback(null, result);\n}\n\nfunction parseConnectionString(url, options) {\n  // Variables\n  let connection_part = '';\n  let auth_part = '';\n  let query_string_part = '';\n  let dbName = 'admin'; // Url parser result\n\n  let result = parser.parse(url, true);\n\n  if ((result.hostname == null || result.hostname === '') && url.indexOf('.sock') === -1) {\n    throw new Error('No hostname or hostnames provided in connection string');\n  }\n\n  if (result.port === '0') {\n    throw new Error('Invalid port (zero) with hostname');\n  }\n\n  if (!isNaN(parseInt(result.port, 10)) && parseInt(result.port, 10) > 65535) {\n    throw new Error('Invalid port (larger than 65535) with hostname');\n  }\n\n  if (result.path && result.path.length > 0 && result.path[0] !== '/' && url.indexOf('.sock') === -1) {\n    throw new Error('Missing delimiting slash between hosts and options');\n  }\n\n  if (result.query) {\n    for (let name in result.query) {\n      if (name.indexOf('::') !== -1) {\n        throw new Error('Double colon in host identifier');\n      }\n\n      if (result.query[name] === '') {\n        throw new Error('Query parameter ' + name + ' is an incomplete value pair');\n      }\n    }\n  }\n\n  if (result.auth) {\n    let parts = result.auth.split(':');\n\n    if (url.indexOf(result.auth) !== -1 && parts.length > 2) {\n      throw new Error('Username with password containing an unescaped colon');\n    }\n\n    if (url.indexOf(result.auth) !== -1 && result.auth.indexOf('@') !== -1) {\n      throw new Error('Username containing an unescaped at-sign');\n    }\n  } // Remove query\n\n\n  let clean = url.split('?').shift(); // Extract the list of hosts\n\n  let strings = clean.split(',');\n  let hosts = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    let hostString = strings[i];\n\n    if (hostString.indexOf('mongodb') !== -1) {\n      if (hostString.indexOf('@') !== -1) {\n        hosts.push(hostString.split('@').pop());\n      } else {\n        hosts.push(hostString.substr('mongodb://'.length));\n      }\n    } else if (hostString.indexOf('/') !== -1) {\n      hosts.push(hostString.split('/').shift());\n    } else if (hostString.indexOf('/') === -1) {\n      hosts.push(hostString.trim());\n    }\n  }\n\n  for (let i = 0; i < hosts.length; i++) {\n    let r = parser.parse(f('mongodb://%s', hosts[i].trim()));\n    if (r.path && r.path.indexOf('.sock') !== -1) continue;\n\n    if (r.path && r.path.indexOf(':') !== -1) {\n      // Not connecting to a socket so check for an extra slash in the hostname.\n      // Using String#split as perf is better than match.\n      if (r.path.split('/').length > 1 && r.path.indexOf('::') === -1) {\n        throw new Error('Slash in host identifier');\n      } else {\n        throw new Error('Double colon in host identifier');\n      }\n    }\n  } // If we have a ? mark cut the query elements off\n\n\n  if (url.indexOf('?') !== -1) {\n    query_string_part = url.substr(url.indexOf('?') + 1);\n    connection_part = url.substring('mongodb://'.length, url.indexOf('?'));\n  } else {\n    connection_part = url.substring('mongodb://'.length);\n  } // Check if we have auth params\n\n\n  if (connection_part.indexOf('@') !== -1) {\n    auth_part = connection_part.split('@')[0];\n    connection_part = connection_part.split('@')[1];\n  } // Check there is not more than one unescaped slash\n\n\n  if (connection_part.split('/').length > 2) {\n    throw new Error(\"Unsupported host '\" + connection_part.split('?')[0] + \"', hosts must be URL encoded and contain at most one unencoded slash\");\n  } // Check if the connection string has a db\n\n\n  if (connection_part.indexOf('.sock') !== -1) {\n    if (connection_part.indexOf('.sock/') !== -1) {\n      dbName = connection_part.split('.sock/')[1]; // Check if multiple database names provided, or just an illegal trailing backslash\n\n      if (dbName.indexOf('/') !== -1) {\n        if (dbName.split('/').length === 2 && dbName.split('/')[1].length === 0) {\n          throw new Error('Illegal trailing backslash after database name');\n        }\n\n        throw new Error('More than 1 database name in URL');\n      }\n\n      connection_part = connection_part.split('/', connection_part.indexOf('.sock') + '.sock'.length);\n    }\n  } else if (connection_part.indexOf('/') !== -1) {\n    // Check if multiple database names provided, or just an illegal trailing backslash\n    if (connection_part.split('/').length > 2) {\n      if (connection_part.split('/')[2].length === 0) {\n        throw new Error('Illegal trailing backslash after database name');\n      }\n\n      throw new Error('More than 1 database name in URL');\n    }\n\n    dbName = connection_part.split('/')[1];\n    connection_part = connection_part.split('/')[0];\n  } // URI decode the host information\n\n\n  connection_part = decodeURIComponent(connection_part); // Result object\n\n  let object = {}; // Pick apart the authentication part of the string\n\n  let authPart = auth_part || '';\n  let auth = authPart.split(':', 2); // Decode the authentication URI components and verify integrity\n\n  let user = decodeURIComponent(auth[0]);\n\n  if (auth[0] !== encodeURIComponent(user)) {\n    throw new Error('Username contains an illegal unescaped character');\n  }\n\n  auth[0] = user;\n\n  if (auth[1]) {\n    let pass = decodeURIComponent(auth[1]);\n\n    if (auth[1] !== encodeURIComponent(pass)) {\n      throw new Error('Password contains an illegal unescaped character');\n    }\n\n    auth[1] = pass;\n  } // Add auth to final object if we have 2 elements\n\n\n  if (auth.length === 2) object.auth = {\n    user: auth[0],\n    password: auth[1]\n  }; // if user provided auth options, use that\n\n  if (options && options.auth != null) object.auth = options.auth; // Variables used for temporary storage\n\n  let hostPart;\n  let urlOptions;\n  let servers;\n  let compression;\n  let serverOptions = {\n    socketOptions: {}\n  };\n  let dbOptions = {\n    read_preference_tags: []\n  };\n  let replSetServersOptions = {\n    socketOptions: {}\n  };\n  let mongosOptions = {\n    socketOptions: {}\n  }; // Add server options to final object\n\n  object.server_options = serverOptions;\n  object.db_options = dbOptions;\n  object.rs_options = replSetServersOptions;\n  object.mongos_options = mongosOptions; // Let's check if we are using a domain socket\n\n  if (url.match(/\\.sock/)) {\n    // Split out the socket part\n    let domainSocket = url.substring(url.indexOf('mongodb://') + 'mongodb://'.length, url.lastIndexOf('.sock') + '.sock'.length); // Clean out any auth stuff if any\n\n    if (domainSocket.indexOf('@') !== -1) domainSocket = domainSocket.split('@')[1];\n    domainSocket = decodeURIComponent(domainSocket);\n    servers = [{\n      domain_socket: domainSocket\n    }];\n  } else {\n    // Split up the db\n    hostPart = connection_part; // Deduplicate servers\n\n    let deduplicatedServers = {}; // Parse all server results\n\n    servers = hostPart.split(',').map(function (h) {\n      let _host, _port, ipv6match; //check if it matches [IPv6]:port, where the port number is optional\n\n\n      if (ipv6match = /\\[([^\\]]+)\\](?::(.+))?/.exec(h)) {\n        _host = ipv6match[1];\n        _port = parseInt(ipv6match[2], 10) || 27017;\n      } else {\n        //otherwise assume it's IPv4, or plain hostname\n        let hostPort = h.split(':', 2);\n        _host = hostPort[0] || 'localhost';\n        _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017; // Check for localhost?safe=true style case\n\n        if (_host.indexOf('?') !== -1) _host = _host.split(/\\?/)[0];\n      } // No entry returned for duplicate server\n\n\n      if (deduplicatedServers[_host + '_' + _port]) return null;\n      deduplicatedServers[_host + '_' + _port] = 1; // Return the mapped object\n\n      return {\n        host: _host,\n        port: _port\n      };\n    }).filter(function (x) {\n      return x != null;\n    });\n  } // Get the db name\n\n\n  object.dbName = dbName || 'admin'; // Split up all the options\n\n  urlOptions = (query_string_part || '').split(/[&;]/); // Ugh, we have to figure out which options go to which constructor manually.\n\n  urlOptions.forEach(function (opt) {\n    if (!opt) return;\n    var splitOpt = opt.split('='),\n        name = splitOpt[0],\n        value = splitOpt[1]; // Options implementations\n\n    switch (name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = value === 'true';\n        dbOptions.slaveOk = value === 'true';\n        break;\n\n      case 'maxPoolSize':\n      case 'poolSize':\n        serverOptions.poolSize = parseInt(value, 10);\n        replSetServersOptions.poolSize = parseInt(value, 10);\n        break;\n\n      case 'appname':\n        object.appname = decodeURIComponent(value);\n        break;\n\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = value === 'true';\n        break;\n\n      case 'ssl':\n        if (value === 'prefer') {\n          serverOptions.ssl = value;\n          replSetServersOptions.ssl = value;\n          mongosOptions.ssl = value;\n          break;\n        }\n\n        serverOptions.ssl = value === 'true';\n        replSetServersOptions.ssl = value === 'true';\n        mongosOptions.ssl = value === 'true';\n        break;\n\n      case 'sslValidate':\n        serverOptions.sslValidate = value === 'true';\n        replSetServersOptions.sslValidate = value === 'true';\n        mongosOptions.sslValidate = value === 'true';\n        break;\n\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = parseInt(value, 10);\n        break;\n\n      case 'retries':\n        replSetServersOptions.retries = parseInt(value, 10);\n        break;\n\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.read_secondary = value === 'true';\n        break;\n\n      case 'fsync':\n        dbOptions.fsync = value === 'true';\n        break;\n\n      case 'journal':\n        dbOptions.j = value === 'true';\n        break;\n\n      case 'safe':\n        dbOptions.safe = value === 'true';\n        break;\n\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = value === 'true';\n        break;\n\n      case 'readConcernLevel':\n        dbOptions.readConcern = new ReadConcern(value);\n        break;\n\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        break;\n\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        break;\n\n      case 'w':\n        dbOptions.w = parseInt(value, 10);\n        if (isNaN(dbOptions.w)) dbOptions.w = value;\n        break;\n\n      case 'authSource':\n        dbOptions.authSource = value;\n        break;\n\n      case 'gssapiServiceName':\n        dbOptions.gssapiServiceName = value;\n        break;\n\n      case 'authMechanism':\n        if (value === 'GSSAPI') {\n          // If no password provided decode only the principal\n          if (object.auth == null) {\n            let urlDecodeAuthPart = decodeURIComponent(authPart);\n            if (urlDecodeAuthPart.indexOf('@') === -1) throw new Error('GSSAPI requires a provided principal');\n            object.auth = {\n              user: urlDecodeAuthPart,\n              password: null\n            };\n          } else {\n            object.auth.user = decodeURIComponent(object.auth.user);\n          }\n        } else if (value === 'MONGODB-X509') {\n          object.auth = {\n            user: decodeURIComponent(authPart)\n          };\n        } // Only support GSSAPI or MONGODB-CR for now\n\n\n        if (value !== 'GSSAPI' && value !== 'MONGODB-X509' && value !== 'MONGODB-CR' && value !== 'DEFAULT' && value !== 'SCRAM-SHA-1' && value !== 'SCRAM-SHA-256' && value !== 'PLAIN') throw new Error('Only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1 is supported by authMechanism'); // Authentication mechanism\n\n        dbOptions.authMechanism = value;\n        break;\n\n      case 'authMechanismProperties':\n        {\n          // Split up into key, value pairs\n          let values = value.split(',');\n          let o = {}; // For each value split into key, value\n\n          values.forEach(function (x) {\n            let v = x.split(':');\n            o[v[0]] = v[1];\n          }); // Set all authMechanismProperties\n\n          dbOptions.authMechanismProperties = o; // Set the service name value\n\n          if (typeof o.SERVICE_NAME === 'string') dbOptions.gssapiServiceName = o.SERVICE_NAME;\n          if (typeof o.SERVICE_REALM === 'string') dbOptions.gssapiServiceRealm = o.SERVICE_REALM;\n          if (typeof o.CANONICALIZE_HOST_NAME === 'string') dbOptions.gssapiCanonicalizeHostName = o.CANONICALIZE_HOST_NAME === 'true' ? true : false;\n        }\n        break;\n\n      case 'wtimeoutMS':\n        dbOptions.wtimeout = parseInt(value, 10);\n        break;\n\n      case 'readPreference':\n        if (!ReadPreference.isValid(value)) throw new Error('readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest');\n        dbOptions.readPreference = value;\n        break;\n\n      case 'maxStalenessSeconds':\n        dbOptions.maxStalenessSeconds = parseInt(value, 10);\n        break;\n\n      case 'readPreferenceTags':\n        {\n          // Decode the value\n          value = decodeURIComponent(value); // Contains the tag object\n\n          let tagObject = {};\n\n          if (value == null || value === '') {\n            dbOptions.read_preference_tags.push(tagObject);\n            break;\n          } // Split up the tags\n\n\n          let tags = value.split(/,/);\n\n          for (let i = 0; i < tags.length; i++) {\n            let parts = tags[i].trim().split(/:/);\n            tagObject[parts[0]] = parts[1];\n          } // Set the preferences tags\n\n\n          dbOptions.read_preference_tags.push(tagObject);\n        }\n        break;\n\n      case 'compressors':\n        {\n          compression = serverOptions.compression || {};\n          let compressors = value.split(',');\n\n          if (!compressors.every(function (compressor) {\n            return compressor === 'snappy' || compressor === 'zlib';\n          })) {\n            throw new Error('Compressors must be at least one of snappy or zlib');\n          }\n\n          compression.compressors = compressors;\n          serverOptions.compression = compression;\n        }\n        break;\n\n      case 'zlibCompressionLevel':\n        {\n          compression = serverOptions.compression || {};\n          let zlibCompressionLevel = parseInt(value, 10);\n\n          if (zlibCompressionLevel < -1 || zlibCompressionLevel > 9) {\n            throw new Error('zlibCompressionLevel must be an integer between -1 and 9');\n          }\n\n          compression.zlibCompressionLevel = zlibCompressionLevel;\n          serverOptions.compression = compression;\n        }\n        break;\n\n      case 'retryWrites':\n        dbOptions.retryWrites = value === 'true';\n        break;\n\n      case 'minSize':\n        dbOptions.minSize = parseInt(value, 10);\n        break;\n\n      default:\n        {\n          let logger = Logger('URL Parser');\n          logger.warn(`${name} is not supported as a connection string option`);\n        }\n        break;\n    }\n  }); // No tags: should be null (not [])\n\n  if (dbOptions.read_preference_tags.length === 0) {\n    dbOptions.read_preference_tags = null;\n  } // Validate if there are an invalid write concern combinations\n\n\n  if ((dbOptions.w === -1 || dbOptions.w === 0) && (dbOptions.journal === true || dbOptions.fsync === true || dbOptions.safe === true)) throw new Error('w set to -1 or 0 cannot be combined with safe/w/journal/fsync'); // If no read preference set it to primary\n\n  if (!dbOptions.readPreference) {\n    dbOptions.readPreference = 'primary';\n  } // make sure that user-provided options are applied with priority\n\n\n  dbOptions = Object.assign(dbOptions, options); // Add servers to result\n\n  object.servers = servers; // Returned parsed object\n\n  return object;\n}","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/url_parser.js"],"names":["ReadPreference","require","parser","f","format","Logger","dns","ReadConcern","qs","MongoParseError","module","exports","url","options","callback","result","parse","e","Error","protocol","parseHandler","hostname","split","length","domainLength","pathname","match","port","srvAddress","host","resolveSrv","err","addresses","i","matchesParentDomain","name","base","auth","connectionStrings","map","address","connectionString","join","connectionStringOptions","path","defaultDb","slice","indexOf","ssl","search","push","replace","resolveTxt","record","code","parsedRecord","items","Object","keys","some","item","parentDomain","regex","srv","parent","endsWith","parseConnectionString","connection_part","auth_part","query_string_part","dbName","isNaN","parseInt","query","parts","clean","shift","strings","hosts","hostString","pop","substr","trim","r","substring","decodeURIComponent","object","authPart","user","encodeURIComponent","pass","password","hostPart","urlOptions","servers","compression","serverOptions","socketOptions","dbOptions","read_preference_tags","replSetServersOptions","mongosOptions","server_options","db_options","rs_options","mongos_options","domainSocket","lastIndexOf","domain_socket","deduplicatedServers","h","_host","_port","ipv6match","exec","hostPort","filter","x","forEach","opt","splitOpt","value","slave_ok","slaveOk","poolSize","appname","auto_reconnect","sslValidate","rs_name","reconnectWait","retries","read_secondary","fsync","j","safe","native_parser","readConcern","connectTimeoutMS","socketTimeoutMS","w","authSource","gssapiServiceName","urlDecodeAuthPart","authMechanism","values","o","v","authMechanismProperties","SERVICE_NAME","SERVICE_REALM","gssapiServiceRealm","CANONICALIZE_HOST_NAME","gssapiCanonicalizeHostName","wtimeout","isValid","readPreference","maxStalenessSeconds","tagObject","tags","compressors","every","compressor","zlibCompressionLevel","retryWrites","minSize","logger","warn","journal","assign"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ReadPreference = require('./core').ReadPreference;\nconst parser = require('url');\nconst f = require('util').format;\nconst Logger = require('./core').Logger;\nconst dns = require('dns');\nconst ReadConcern = require('./read_concern');\nconst qs = require('querystring');\nconst MongoParseError = require('./core/error').MongoParseError;\n\nmodule.exports = function(url, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  let result;\n  try {\n    result = parser.parse(url, true);\n  } catch (e) {\n    return callback(new Error('URL malformed, cannot be parsed'));\n  }\n\n  if (result.protocol !== 'mongodb:' && result.protocol !== 'mongodb+srv:') {\n    return callback(new Error('Invalid schema, expected `mongodb` or `mongodb+srv`'));\n  }\n\n  if (result.protocol === 'mongodb:') {\n    return parseHandler(url, options, callback);\n  }\n\n  // Otherwise parse this as an SRV record\n  if (result.hostname.split('.').length < 3) {\n    return callback(new Error('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new Error('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new Error('Ports not accepted with `mongodb+srv` URIs'));\n  }\n\n  let srvAddress = `_mongodb._tcp.${result.host}`;\n  dns.resolveSrv(srvAddress, function(err, addresses) {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new Error('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new Error('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    let base = result.auth ? `mongodb://${result.auth}@` : `mongodb://`;\n    let connectionStrings = addresses.map(function(address, i) {\n      if (i === 0) return `${base}${address.name}:${address.port}`;\n      else return `${address.name}:${address.port}`;\n    });\n\n    let connectionString = connectionStrings.join(',') + '/';\n    let connectionStringOptions = [];\n\n    // Add the default database if needed\n    if (result.path) {\n      let defaultDb = result.path.slice(1);\n      if (defaultDb.indexOf('?') !== -1) {\n        defaultDb = defaultDb.slice(0, defaultDb.indexOf('?'));\n      }\n\n      connectionString += defaultDb;\n    }\n\n    // Default to SSL true\n    if (!options.ssl && !result.search) {\n      connectionStringOptions.push('ssl=true');\n    } else if (!options.ssl && result.search && !result.search.match('ssl')) {\n      connectionStringOptions.push('ssl=true');\n    }\n\n    // Keep original uri options\n    if (result.search) {\n      connectionStringOptions.push(result.search.replace('?', ''));\n    }\n\n    dns.resolveTxt(result.host, function(err, record) {\n      if (err && err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') return callback(err);\n      if (err && err.code === 'ENODATA') record = null;\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = record[0].join('');\n        const parsedRecord = qs.parse(record);\n        const items = Object.keys(parsedRecord);\n        if (items.some(item => item !== 'authSource' && item !== 'replicaSet')) {\n          return callback(\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\n          );\n        }\n\n        if (items.length > 0) {\n          connectionStringOptions.push(record);\n        }\n      }\n\n      // Add any options to the connection string\n      if (connectionStringOptions.length) {\n        connectionString += `?${connectionStringOptions.join('&')}`;\n      }\n\n      parseHandler(connectionString, options, callback);\n    });\n  });\n};\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  let regex = /^.*?\\./;\n  let srv = `.${srvAddress.replace(regex, '')}`;\n  let parent = `.${parentDomain.replace(regex, '')}`;\n  if (srv.endsWith(parent)) return true;\n  else return false;\n}\n\nfunction parseHandler(address, options, callback) {\n  let result, err;\n  try {\n    result = parseConnectionString(address, options);\n  } catch (e) {\n    err = e;\n  }\n\n  return err ? callback(err, null) : callback(null, result);\n}\n\nfunction parseConnectionString(url, options) {\n  // Variables\n  let connection_part = '';\n  let auth_part = '';\n  let query_string_part = '';\n  let dbName = 'admin';\n\n  // Url parser result\n  let result = parser.parse(url, true);\n  if ((result.hostname == null || result.hostname === '') && url.indexOf('.sock') === -1) {\n    throw new Error('No hostname or hostnames provided in connection string');\n  }\n\n  if (result.port === '0') {\n    throw new Error('Invalid port (zero) with hostname');\n  }\n\n  if (!isNaN(parseInt(result.port, 10)) && parseInt(result.port, 10) > 65535) {\n    throw new Error('Invalid port (larger than 65535) with hostname');\n  }\n\n  if (\n    result.path &&\n    result.path.length > 0 &&\n    result.path[0] !== '/' &&\n    url.indexOf('.sock') === -1\n  ) {\n    throw new Error('Missing delimiting slash between hosts and options');\n  }\n\n  if (result.query) {\n    for (let name in result.query) {\n      if (name.indexOf('::') !== -1) {\n        throw new Error('Double colon in host identifier');\n      }\n\n      if (result.query[name] === '') {\n        throw new Error('Query parameter ' + name + ' is an incomplete value pair');\n      }\n    }\n  }\n\n  if (result.auth) {\n    let parts = result.auth.split(':');\n    if (url.indexOf(result.auth) !== -1 && parts.length > 2) {\n      throw new Error('Username with password containing an unescaped colon');\n    }\n\n    if (url.indexOf(result.auth) !== -1 && result.auth.indexOf('@') !== -1) {\n      throw new Error('Username containing an unescaped at-sign');\n    }\n  }\n\n  // Remove query\n  let clean = url.split('?').shift();\n\n  // Extract the list of hosts\n  let strings = clean.split(',');\n  let hosts = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    let hostString = strings[i];\n\n    if (hostString.indexOf('mongodb') !== -1) {\n      if (hostString.indexOf('@') !== -1) {\n        hosts.push(hostString.split('@').pop());\n      } else {\n        hosts.push(hostString.substr('mongodb://'.length));\n      }\n    } else if (hostString.indexOf('/') !== -1) {\n      hosts.push(hostString.split('/').shift());\n    } else if (hostString.indexOf('/') === -1) {\n      hosts.push(hostString.trim());\n    }\n  }\n\n  for (let i = 0; i < hosts.length; i++) {\n    let r = parser.parse(f('mongodb://%s', hosts[i].trim()));\n    if (r.path && r.path.indexOf('.sock') !== -1) continue;\n    if (r.path && r.path.indexOf(':') !== -1) {\n      // Not connecting to a socket so check for an extra slash in the hostname.\n      // Using String#split as perf is better than match.\n      if (r.path.split('/').length > 1 && r.path.indexOf('::') === -1) {\n        throw new Error('Slash in host identifier');\n      } else {\n        throw new Error('Double colon in host identifier');\n      }\n    }\n  }\n\n  // If we have a ? mark cut the query elements off\n  if (url.indexOf('?') !== -1) {\n    query_string_part = url.substr(url.indexOf('?') + 1);\n    connection_part = url.substring('mongodb://'.length, url.indexOf('?'));\n  } else {\n    connection_part = url.substring('mongodb://'.length);\n  }\n\n  // Check if we have auth params\n  if (connection_part.indexOf('@') !== -1) {\n    auth_part = connection_part.split('@')[0];\n    connection_part = connection_part.split('@')[1];\n  }\n\n  // Check there is not more than one unescaped slash\n  if (connection_part.split('/').length > 2) {\n    throw new Error(\n      \"Unsupported host '\" +\n        connection_part.split('?')[0] +\n        \"', hosts must be URL encoded and contain at most one unencoded slash\"\n    );\n  }\n\n  // Check if the connection string has a db\n  if (connection_part.indexOf('.sock') !== -1) {\n    if (connection_part.indexOf('.sock/') !== -1) {\n      dbName = connection_part.split('.sock/')[1];\n      // Check if multiple database names provided, or just an illegal trailing backslash\n      if (dbName.indexOf('/') !== -1) {\n        if (dbName.split('/').length === 2 && dbName.split('/')[1].length === 0) {\n          throw new Error('Illegal trailing backslash after database name');\n        }\n        throw new Error('More than 1 database name in URL');\n      }\n      connection_part = connection_part.split(\n        '/',\n        connection_part.indexOf('.sock') + '.sock'.length\n      );\n    }\n  } else if (connection_part.indexOf('/') !== -1) {\n    // Check if multiple database names provided, or just an illegal trailing backslash\n    if (connection_part.split('/').length > 2) {\n      if (connection_part.split('/')[2].length === 0) {\n        throw new Error('Illegal trailing backslash after database name');\n      }\n      throw new Error('More than 1 database name in URL');\n    }\n    dbName = connection_part.split('/')[1];\n    connection_part = connection_part.split('/')[0];\n  }\n\n  // URI decode the host information\n  connection_part = decodeURIComponent(connection_part);\n\n  // Result object\n  let object = {};\n\n  // Pick apart the authentication part of the string\n  let authPart = auth_part || '';\n  let auth = authPart.split(':', 2);\n\n  // Decode the authentication URI components and verify integrity\n  let user = decodeURIComponent(auth[0]);\n  if (auth[0] !== encodeURIComponent(user)) {\n    throw new Error('Username contains an illegal unescaped character');\n  }\n  auth[0] = user;\n\n  if (auth[1]) {\n    let pass = decodeURIComponent(auth[1]);\n    if (auth[1] !== encodeURIComponent(pass)) {\n      throw new Error('Password contains an illegal unescaped character');\n    }\n    auth[1] = pass;\n  }\n\n  // Add auth to final object if we have 2 elements\n  if (auth.length === 2) object.auth = { user: auth[0], password: auth[1] };\n  // if user provided auth options, use that\n  if (options && options.auth != null) object.auth = options.auth;\n\n  // Variables used for temporary storage\n  let hostPart;\n  let urlOptions;\n  let servers;\n  let compression;\n  let serverOptions = { socketOptions: {} };\n  let dbOptions = { read_preference_tags: [] };\n  let replSetServersOptions = { socketOptions: {} };\n  let mongosOptions = { socketOptions: {} };\n  // Add server options to final object\n  object.server_options = serverOptions;\n  object.db_options = dbOptions;\n  object.rs_options = replSetServersOptions;\n  object.mongos_options = mongosOptions;\n\n  // Let's check if we are using a domain socket\n  if (url.match(/\\.sock/)) {\n    // Split out the socket part\n    let domainSocket = url.substring(\n      url.indexOf('mongodb://') + 'mongodb://'.length,\n      url.lastIndexOf('.sock') + '.sock'.length\n    );\n    // Clean out any auth stuff if any\n    if (domainSocket.indexOf('@') !== -1) domainSocket = domainSocket.split('@')[1];\n    domainSocket = decodeURIComponent(domainSocket);\n    servers = [{ domain_socket: domainSocket }];\n  } else {\n    // Split up the db\n    hostPart = connection_part;\n    // Deduplicate servers\n    let deduplicatedServers = {};\n\n    // Parse all server results\n    servers = hostPart\n      .split(',')\n      .map(function(h) {\n        let _host, _port, ipv6match;\n        //check if it matches [IPv6]:port, where the port number is optional\n        if ((ipv6match = /\\[([^\\]]+)\\](?::(.+))?/.exec(h))) {\n          _host = ipv6match[1];\n          _port = parseInt(ipv6match[2], 10) || 27017;\n        } else {\n          //otherwise assume it's IPv4, or plain hostname\n          let hostPort = h.split(':', 2);\n          _host = hostPort[0] || 'localhost';\n          _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;\n          // Check for localhost?safe=true style case\n          if (_host.indexOf('?') !== -1) _host = _host.split(/\\?/)[0];\n        }\n\n        // No entry returned for duplicate server\n        if (deduplicatedServers[_host + '_' + _port]) return null;\n        deduplicatedServers[_host + '_' + _port] = 1;\n\n        // Return the mapped object\n        return { host: _host, port: _port };\n      })\n      .filter(function(x) {\n        return x != null;\n      });\n  }\n\n  // Get the db name\n  object.dbName = dbName || 'admin';\n  // Split up all the options\n  urlOptions = (query_string_part || '').split(/[&;]/);\n  // Ugh, we have to figure out which options go to which constructor manually.\n  urlOptions.forEach(function(opt) {\n    if (!opt) return;\n    var splitOpt = opt.split('='),\n      name = splitOpt[0],\n      value = splitOpt[1];\n\n    // Options implementations\n    switch (name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = value === 'true';\n        dbOptions.slaveOk = value === 'true';\n        break;\n      case 'maxPoolSize':\n      case 'poolSize':\n        serverOptions.poolSize = parseInt(value, 10);\n        replSetServersOptions.poolSize = parseInt(value, 10);\n        break;\n      case 'appname':\n        object.appname = decodeURIComponent(value);\n        break;\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = value === 'true';\n        break;\n      case 'ssl':\n        if (value === 'prefer') {\n          serverOptions.ssl = value;\n          replSetServersOptions.ssl = value;\n          mongosOptions.ssl = value;\n          break;\n        }\n        serverOptions.ssl = value === 'true';\n        replSetServersOptions.ssl = value === 'true';\n        mongosOptions.ssl = value === 'true';\n        break;\n      case 'sslValidate':\n        serverOptions.sslValidate = value === 'true';\n        replSetServersOptions.sslValidate = value === 'true';\n        mongosOptions.sslValidate = value === 'true';\n        break;\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = parseInt(value, 10);\n        break;\n      case 'retries':\n        replSetServersOptions.retries = parseInt(value, 10);\n        break;\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.read_secondary = value === 'true';\n        break;\n      case 'fsync':\n        dbOptions.fsync = value === 'true';\n        break;\n      case 'journal':\n        dbOptions.j = value === 'true';\n        break;\n      case 'safe':\n        dbOptions.safe = value === 'true';\n        break;\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = value === 'true';\n        break;\n      case 'readConcernLevel':\n        dbOptions.readConcern = new ReadConcern(value);\n        break;\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        break;\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        break;\n      case 'w':\n        dbOptions.w = parseInt(value, 10);\n        if (isNaN(dbOptions.w)) dbOptions.w = value;\n        break;\n      case 'authSource':\n        dbOptions.authSource = value;\n        break;\n      case 'gssapiServiceName':\n        dbOptions.gssapiServiceName = value;\n        break;\n      case 'authMechanism':\n        if (value === 'GSSAPI') {\n          // If no password provided decode only the principal\n          if (object.auth == null) {\n            let urlDecodeAuthPart = decodeURIComponent(authPart);\n            if (urlDecodeAuthPart.indexOf('@') === -1)\n              throw new Error('GSSAPI requires a provided principal');\n            object.auth = { user: urlDecodeAuthPart, password: null };\n          } else {\n            object.auth.user = decodeURIComponent(object.auth.user);\n          }\n        } else if (value === 'MONGODB-X509') {\n          object.auth = { user: decodeURIComponent(authPart) };\n        }\n\n        // Only support GSSAPI or MONGODB-CR for now\n        if (\n          value !== 'GSSAPI' &&\n          value !== 'MONGODB-X509' &&\n          value !== 'MONGODB-CR' &&\n          value !== 'DEFAULT' &&\n          value !== 'SCRAM-SHA-1' &&\n          value !== 'SCRAM-SHA-256' &&\n          value !== 'PLAIN'\n        )\n          throw new Error(\n            'Only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1 is supported by authMechanism'\n          );\n\n        // Authentication mechanism\n        dbOptions.authMechanism = value;\n        break;\n      case 'authMechanismProperties':\n        {\n          // Split up into key, value pairs\n          let values = value.split(',');\n          let o = {};\n          // For each value split into key, value\n          values.forEach(function(x) {\n            let v = x.split(':');\n            o[v[0]] = v[1];\n          });\n\n          // Set all authMechanismProperties\n          dbOptions.authMechanismProperties = o;\n          // Set the service name value\n          if (typeof o.SERVICE_NAME === 'string') dbOptions.gssapiServiceName = o.SERVICE_NAME;\n          if (typeof o.SERVICE_REALM === 'string') dbOptions.gssapiServiceRealm = o.SERVICE_REALM;\n          if (typeof o.CANONICALIZE_HOST_NAME === 'string')\n            dbOptions.gssapiCanonicalizeHostName =\n              o.CANONICALIZE_HOST_NAME === 'true' ? true : false;\n        }\n        break;\n      case 'wtimeoutMS':\n        dbOptions.wtimeout = parseInt(value, 10);\n        break;\n      case 'readPreference':\n        if (!ReadPreference.isValid(value))\n          throw new Error(\n            'readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest'\n          );\n        dbOptions.readPreference = value;\n        break;\n      case 'maxStalenessSeconds':\n        dbOptions.maxStalenessSeconds = parseInt(value, 10);\n        break;\n      case 'readPreferenceTags':\n        {\n          // Decode the value\n          value = decodeURIComponent(value);\n          // Contains the tag object\n          let tagObject = {};\n          if (value == null || value === '') {\n            dbOptions.read_preference_tags.push(tagObject);\n            break;\n          }\n\n          // Split up the tags\n          let tags = value.split(/,/);\n          for (let i = 0; i < tags.length; i++) {\n            let parts = tags[i].trim().split(/:/);\n            tagObject[parts[0]] = parts[1];\n          }\n\n          // Set the preferences tags\n          dbOptions.read_preference_tags.push(tagObject);\n        }\n        break;\n      case 'compressors':\n        {\n          compression = serverOptions.compression || {};\n          let compressors = value.split(',');\n          if (\n            !compressors.every(function(compressor) {\n              return compressor === 'snappy' || compressor === 'zlib';\n            })\n          ) {\n            throw new Error('Compressors must be at least one of snappy or zlib');\n          }\n\n          compression.compressors = compressors;\n          serverOptions.compression = compression;\n        }\n        break;\n      case 'zlibCompressionLevel':\n        {\n          compression = serverOptions.compression || {};\n          let zlibCompressionLevel = parseInt(value, 10);\n          if (zlibCompressionLevel < -1 || zlibCompressionLevel > 9) {\n            throw new Error('zlibCompressionLevel must be an integer between -1 and 9');\n          }\n\n          compression.zlibCompressionLevel = zlibCompressionLevel;\n          serverOptions.compression = compression;\n        }\n        break;\n      case 'retryWrites':\n        dbOptions.retryWrites = value === 'true';\n        break;\n      case 'minSize':\n        dbOptions.minSize = parseInt(value, 10);\n        break;\n      default:\n        {\n          let logger = Logger('URL Parser');\n          logger.warn(`${name} is not supported as a connection string option`);\n        }\n        break;\n    }\n  });\n\n  // No tags: should be null (not [])\n  if (dbOptions.read_preference_tags.length === 0) {\n    dbOptions.read_preference_tags = null;\n  }\n\n  // Validate if there are an invalid write concern combinations\n  if (\n    (dbOptions.w === -1 || dbOptions.w === 0) &&\n    (dbOptions.journal === true || dbOptions.fsync === true || dbOptions.safe === true)\n  )\n    throw new Error('w set to -1 or 0 cannot be combined with safe/w/journal/fsync');\n\n  // If no read preference set it to primary\n  if (!dbOptions.readPreference) {\n    dbOptions.readPreference = 'primary';\n  }\n\n  // make sure that user-provided options are applied with priority\n  dbOptions = Object.assign(dbOptions, options);\n\n  // Add servers to result\n  object.servers = servers;\n\n  // Returned parsed object\n  return object;\n}\n"]},"metadata":{},"sourceType":"script"}