{"ast":null,"code":"'use strict';\n\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nconst MongoError = require('../error').MongoError;\n\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, response) => {\n          if (err) return callback(err);\n          const result = response.result;\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n              if (err) return callback(err);\n              const result = response.result;\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  const host = authContext.options.host;\n  const port = authContext.options.port;\n  const credentials = authContext.credentials;\n\n  if (!host || !port || !credentials) {\n    return callback(new MongoError(`Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${credentials ? 'host' : 'credentials'}.`));\n  }\n\n  if (kerberos == null) {\n    try {\n      kerberos = retrieveKerberos();\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  const username = credentials.username;\n  const password = credentials.password;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n  performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n\n    kerberos.initializeClient(`${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`, initOptions, (err, client) => {\n      if (err) return callback(new MongoError(err));\n      callback(null, client);\n    });\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName = typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean' ? mechanismProperties.gssapiCanonicalizeHostName : false;\n  if (!canonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/auth/gssapi.js"],"names":["dns","require","AuthProvider","retrieveKerberos","MongoError","kerberos","GSSAPI","auth","authContext","callback","connection","credentials","username","externalCommand","command","cb","makeKerberosClient","err","client","step","payload","saslStart","response","result","negotiate","saslContinue","conversationId","finalize","undefined","module","exports","host","options","port","e","password","mechanismProperties","serviceName","performGssapiCanonicalizeHostName","initOptions","Object","assign","user","initializeClient","process","platform","mechanism","autoAuthorize","retries","unwrap","wrap","wrapped","canonicalizeHostName","gssapiCanonicalizeHostName","resolveCname","r","Array","isArray","length"],"mappings":"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","sourcesContent":["'use strict';\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nconst MongoError = require('../error').MongoError;\n\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, response) => {\n          if (err) return callback(err);\n          const result = response.result;\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n              if (err) return callback(err);\n              const result = response.result;\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand(\n                  {\n                    saslContinue: 1,\n                    conversationId: result.conversationId,\n                    payload\n                  },\n                  (err, result) => {\n                    if (err) return callback(err);\n                    callback(undefined, result);\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nmodule.exports = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  const host = authContext.options.host;\n  const port = authContext.options.port;\n  const credentials = authContext.credentials;\n  if (!host || !port || !credentials) {\n    return callback(\n      new MongoError(\n        `Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${\n          credentials ? 'host' : 'credentials'\n        }.`\n      )\n    );\n  }\n  if (kerberos == null) {\n    try {\n      kerberos = retrieveKerberos();\n    } catch (e) {\n      return callback(e);\n    }\n  }\n  const username = credentials.username;\n  const password = credentials.password;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName =\n    mechanismProperties['gssapiservicename'] ||\n    mechanismProperties['gssapiServiceName'] ||\n    'mongodb';\n  performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, { user: username, password: password });\n    }\n    kerberos.initializeClient(\n      `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`,\n      initOptions,\n      (err, client) => {\n        if (err) return callback(new MongoError(err));\n        callback(null, client);\n      }\n    );\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', { user }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName =\n    typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean'\n      ? mechanismProperties.gssapiCanonicalizeHostName\n      : false;\n  if (!canonicalizeHostName) return callback(undefined, host);\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}