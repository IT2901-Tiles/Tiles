{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nclass MongoCR extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(`${source}.$cmd`, {\n      getnonce: 1\n    }, (err, result) => {\n      let nonce = null;\n      let key = null; // Get nonce\n\n      if (err == null) {\n        const r = result.result;\n        nonce = r.nonce; // Use node md5 generator\n\n        let md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex'); // Final key\n\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command(`${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n\n}\n\nmodule.exports = MongoCR;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/auth/mongocr.js"],"names":["crypto","require","AuthProvider","MongoCR","auth","authContext","callback","connection","credentials","username","password","source","command","getnonce","err","result","nonce","key","r","md5","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,YAAhD;;AAEA,MAAMC,OAAN,SAAsBD,YAAtB,CAAmC;AACjCE,EAAAA,IAAI,CAACC,WAAD,EAAcC,QAAd,EAAwB;AAC1B,UAAMC,UAAU,GAAGF,WAAW,CAACE,UAA/B;AACA,UAAMC,WAAW,GAAGH,WAAW,CAACG,WAAhC;AACA,UAAMC,QAAQ,GAAGD,WAAW,CAACC,QAA7B;AACA,UAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;AACA,UAAMC,MAAM,GAAGH,WAAW,CAACG,MAA3B;AAEAJ,IAAAA,UAAU,CAACK,OAAX,CAAoB,GAAED,MAAO,OAA7B,EAAqC;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAArC,EAAsD,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACrE,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,GAAG,GAAG,IAAV,CAFqE,CAIrE;;AACA,UAAIH,GAAG,IAAI,IAAX,EAAiB;AACf,cAAMI,CAAC,GAAGH,MAAM,CAACA,MAAjB;AACAC,QAAAA,KAAK,GAAGE,CAAC,CAACF,KAAV,CAFe,CAGf;;AACA,YAAIG,GAAG,GAAGnB,MAAM,CAACoB,UAAP,CAAkB,KAAlB,CAAV,CAJe,CAKf;;AACAD,QAAAA,GAAG,CAACE,MAAJ,CAAWZ,QAAQ,GAAG,SAAX,GAAuBC,QAAlC,EAA4C,MAA5C;AACA,cAAMY,aAAa,GAAGH,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAtB,CAPe,CAQf;;AACAJ,QAAAA,GAAG,GAAGnB,MAAM,CAACoB,UAAP,CAAkB,KAAlB,CAAN;AACAD,QAAAA,GAAG,CAACE,MAAJ,CAAWL,KAAK,GAAGP,QAAR,GAAmBa,aAA9B,EAA6C,MAA7C;AACAL,QAAAA,GAAG,GAAGE,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAN;AACD;;AAED,YAAMC,mBAAmB,GAAG;AAC1BC,QAAAA,YAAY,EAAE,CADY;AAE1BC,QAAAA,IAAI,EAAEjB,QAFoB;AAG1BO,QAAAA,KAH0B;AAI1BC,QAAAA;AAJ0B,OAA5B;AAOAV,MAAAA,UAAU,CAACK,OAAX,CAAoB,GAAED,MAAO,OAA7B,EAAqCa,mBAArC,EAA0DlB,QAA1D;AACD,KA3BD;AA4BD;;AApCgC;;AAuCnCqB,MAAM,CAACC,OAAP,GAAiBzB,OAAjB","sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nclass MongoCR extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n\n    connection.command(`${source}.$cmd`, { getnonce: 1 }, (err, result) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        const r = result.result;\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      connection.command(`${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n}\n\nmodule.exports = MongoCR;\n"]},"metadata":{},"sourceType":"script"}