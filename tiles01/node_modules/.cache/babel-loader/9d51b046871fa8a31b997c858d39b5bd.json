{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';function FormFieldAnimationPage(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];var _useState3=useState(props.triggerCard),_useState4=_slicedToArray(_useState3,1),triggerCard=_useState4[0];// props to pass to AnimationsPreview.jsx\nvar _useState5=useState(props.thingCard),_useState6=_slicedToArray(_useState5,1),thingCard=_useState6[0];// props to pass to AnimationsPreview.jsx\nvar _useState7=useState(props.feedbackCard),_useState8=_slicedToArray(_useState7,1),feedbackCard=_useState8[0];// props to pass to AnimationsPreview.jsx\nvar outputStandardText=\"Cards chosen:\\n- Trigger: \".concat(triggerCard,\"\\n- Thing: \").concat(thingCard,\"\\n- Feedback: \").concat(feedbackCard,\"\\n\\nYour idea:\\n- \");// passed as first parameter in the downloadFile Blob\n// The following function gathers the content from the textarea and inserts it into a external txt-file\nfunction downloadFile(){sendIdeaRequest();var userInputValue;// will change depending on the user writes something or not \nif(document.getElementById(\"textBoxAnimationPage\").value===\"\"){// if user does not write anything in the textarea\nuserInputValue=\"Oops! Looks like no brilliant ideas were written down...\";}else{// if the user writes something in the textare\nuserInputValue=document.getElementById(\"textBoxAnimationPage\").value;}var htmlElement=document.createElement(\"a\");// creates an \"a\" element in the html page, where we'll \"store\" the value of the user input\nvar valueInput=new Blob([outputStandardText+userInputValue],{type:'text/plain'});// value of txt file must be passed in the first parameter of Blob\nhtmlElement.href=URL.createObjectURL(valueInput);htmlElement.download=\"tiles.txt\";document.body.appendChild(htmlElement);htmlElement.click();}// Will fix the position when the animations are ready\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"textAreaAnimationPage\",children:[/*#__PURE__*/_jsx(\"textarea\",{id:\"textBoxAnimationPage\",placeholder:\"Write your idea here...\",onChange:function onChange(newInput){return setInput(newInput.target.value);}}),/*#__PURE__*/_jsx(\"button\",{onClick:downloadFile,className:\"textButtonAnimationPage\",children:\"Save\"})]});}function sendIdeaRequest(){fetch('localhost:8484/add_idea',{method:'post',headers:{'Content-Type':'application/json'},body:JSON.stringify({\"arrfa\":\"ADSs\"})}).then(function(response){return response.json();}).then(function(data){window.alert(data);//Do anything else like Toast etc.\n});}export default FormFieldAnimationPage;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/src/Components/FormFieldAnimationPage.jsx"],"names":["React","useState","FormFieldAnimationPage","props","input","setInput","triggerCard","thingCard","feedbackCard","outputStandardText","downloadFile","sendIdeaRequest","userInputValue","document","getElementById","value","htmlElement","createElement","valueInput","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","newInput","target","fetch","method","headers","JSON","stringify","then","response","json","data","window","alert"],"mappings":"uQAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAGA,QAASC,CAAAA,sBAAT,CAAgCC,KAAhC,CAAuC,eACTF,QAAQ,CAAC,EAAD,CADC,wCAC5BG,KAD4B,eACrBC,QADqB,8BAEbJ,QAAQ,CAACE,KAAK,CAACG,WAAP,CAFK,yCAE5BA,WAF4B,eAEe;AAFf,eAGfL,QAAQ,CAACE,KAAK,CAACI,SAAP,CAHO,yCAG5BA,SAH4B,eAGW;AAHX,eAIZN,QAAQ,CAACE,KAAK,CAACK,YAAP,CAJI,yCAI5BA,YAJ4B,eAIiB;AACpD,GAAIC,CAAAA,kBAAkB,qCAAgCH,WAAhC,uBAAyDC,SAAzD,0BAAmFC,YAAnF,sBAAtB,CAA0I;AAE1I;AACA,QAASE,CAAAA,YAAT,EAAwB,CACpBC,eAAe,GACf,GAAIC,CAAAA,cAAJ,CAAmB;AACnB,GAAIC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,EAAgDC,KAAhD,GAA0D,EAA9D,CAAkE,CAAE;AAChEH,cAAc,CAAG,0DAAjB,CACH,CAFD,IAEO,CAAE;AACLA,cAAc,CAAGC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,EAAgDC,KAAjE,CACH,CACD,GAAMC,CAAAA,WAAW,CAAGH,QAAQ,CAACI,aAAT,CAAuB,GAAvB,CAApB,CAAgD;AAChD,GAAMC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,IAAJ,CAAS,CAACV,kBAAkB,CAAGG,cAAtB,CAAT,CAAgD,CAACQ,IAAI,CAAE,YAAP,CAAhD,CAAnB,CAAyF;AACzFJ,WAAW,CAACK,IAAZ,CAAmBC,GAAG,CAACC,eAAJ,CAAoBL,UAApB,CAAnB,CACAF,WAAW,CAACQ,QAAZ,CAAuB,WAAvB,CACAX,QAAQ,CAACY,IAAT,CAAcC,WAAd,CAA0BV,WAA1B,EACAA,WAAW,CAACW,KAAZ,GACH,CAED;AACA,mBACI,aAAK,SAAS,CAAC,uBAAf,wBACI,iBAAU,EAAE,CAAC,sBAAb,CAAoC,WAAW,CAAC,yBAAhD,CAA0E,QAAQ,CAAE,kBAAAC,QAAQ,QAAIvB,CAAAA,QAAQ,CAACuB,QAAQ,CAACC,MAAT,CAAgBd,KAAjB,CAAZ,EAA5F,EADJ,cAEQ,eAAQ,OAAO,CAAEL,YAAjB,CAA+B,SAAS,CAAC,yBAAzC,kBAFR,GADJ,CAMH,CAGD,QAASC,CAAAA,eAAT,EAA0B,CACtBmB,KAAK,CAAC,yBAAD,CAA4B,CAC/BC,MAAM,CAAE,MADuB,CAE/BC,OAAO,CAAE,CAAC,eAAgB,kBAAjB,CAFsB,CAG/BP,IAAI,CAAEQ,IAAI,CAACC,SAAL,CAAe,CACnB,QAAQ,MADW,CAAf,CAHyB,CAA5B,CAAL,CAOGC,IAPH,CAOQ,SAAAC,QAAQ,QAAEA,CAAAA,QAAQ,CAACC,IAAT,EAAF,EAPhB,EAOmCF,IAPnC,CAOwC,SAAAG,IAAI,CAAE,CACzCC,MAAM,CAACC,KAAP,CAAaF,IAAb,EACA;AACR,CAVG,EAWH,CAKD,cAAepC,CAAAA,sBAAf","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nfunction FormFieldAnimationPage(props) {\r\n    const [input, setInput] = useState('')\r\n    const [triggerCard] = useState(props.triggerCard) // props to pass to AnimationsPreview.jsx\r\n    const [thingCard] = useState(props.thingCard) // props to pass to AnimationsPreview.jsx\r\n    const [feedbackCard] = useState(props.feedbackCard) // props to pass to AnimationsPreview.jsx\r\n    let outputStandardText = `Cards chosen:\\n- Trigger: ${triggerCard}\\n- Thing: ${thingCard}\\n- Feedback: ${feedbackCard}\\n\\nYour idea:\\n- ` // passed as first parameter in the downloadFile Blob\r\n\r\n    // The following function gathers the content from the textarea and inserts it into a external txt-file\r\n    function downloadFile() {\r\n        sendIdeaRequest()\r\n        let userInputValue // will change depending on the user writes something or not \r\n        if (document.getElementById(\"textBoxAnimationPage\").value === \"\") { // if user does not write anything in the textarea\r\n            userInputValue = \"Oops! Looks like no brilliant ideas were written down...\" \r\n        } else { // if the user writes something in the textare\r\n            userInputValue = document.getElementById(\"textBoxAnimationPage\").value\r\n        }\r\n        const htmlElement = document.createElement(\"a\") // creates an \"a\" element in the html page, where we'll \"store\" the value of the user input\r\n        const valueInput = new Blob([outputStandardText + userInputValue], {type: 'text/plain'}) // value of txt file must be passed in the first parameter of Blob\r\n        htmlElement.href = URL.createObjectURL(valueInput)\r\n        htmlElement.download = \"tiles.txt\"\r\n        document.body.appendChild(htmlElement)\r\n        htmlElement.click()\r\n    }\r\n\r\n    // Will fix the position when the animations are ready\r\n    return (\r\n        <div className=\"textAreaAnimationPage\">\r\n            <textarea id=\"textBoxAnimationPage\" placeholder=\"Write your idea here...\" onChange={newInput => setInput(newInput.target.value)}/>\r\n                <button onClick={downloadFile} className=\"textButtonAnimationPage\">Save</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction sendIdeaRequest(){\r\n    fetch('localhost:8484/add_idea', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        \"arrfa\":\"ADSs\"\r\n\r\n      })\r\n    }).then(response=>response.json()).then(data=>{\r\n         window.alert(data)\r\n         //Do anything else like Toast etc.\r\n})\r\n}\r\n\r\n\r\n\r\n\r\nexport default FormFieldAnimationPage"]},"metadata":{},"sourceType":"module"}