{"ast":null,"code":"'use strict';\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.\n * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.\n * @see https://docs.mongodb.com/manual/core/read-preference/\n * @return {ReadPreference}\n */\n\nconst ReadPreference = function (mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  } // TODO(major): tags MUST be an array of tagsets\n\n\n  if (tags && !Array.isArray(tags)) {\n    console.warn('ReadPreference tags must be an array, this will change in the next major version');\n    const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';\n    const tagsHasHedge = typeof tags.hedge !== 'undefined';\n    const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;\n\n    if (tagsHasOptions) {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n  this.hedge = options && options.hedge;\n  options = options || {};\n\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n\n    if (this.hedge) {\n      throw new TypeError('Primary read preference cannot be combined with hedge');\n    }\n  }\n}; // Support the deprecated `preference` property introduced in the porcelain layer\n\n\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function () {\n    return this.mode;\n  }\n});\n/*\n * Read preference mode constants\n */\n\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\nconst VALID_MODES = [ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null];\n/**\n * Construct a ReadPreference given an options object.\n *\n * @param {object} options The options object from which to extract the read preference.\n * @return {ReadPreference}\n */\n\nReadPreference.fromOptions = function (options) {\n  if (!options) return null;\n  const readPreference = options.readPreference;\n  if (!readPreference) return null;\n  const readPreferenceTags = options.readPreferenceTags;\n  const maxStalenessSeconds = options.maxStalenessSeconds;\n\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,\n        hedge: readPreference.hedge\n      });\n    }\n  }\n\n  return readPreference;\n};\n/**\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\n * determine the read preference (if there is one), but will also ensure the returned value is a\n * properly constructed instance of `ReadPreference`.\n *\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\n * preference, used for determining the inherited read preference.\n * @param {object} options The options passed into the method, potentially containing a read preference\n * @returns {(ReadPreference|null)} The resolved read preference\n */\n\n\nReadPreference.resolve = function (parent, options) {\n  options = options || {};\n  const session = options.session;\n  const inheritedReadPreference = parent && parent.readPreference;\n  let readPreference;\n\n  if (options.readPreference) {\n    readPreference = ReadPreference.fromOptions(options);\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\n    // The transactionâ€™s read preference MUST override all other user configurable read preferences.\n    readPreference = session.transaction.options.readPreference;\n  } else if (inheritedReadPreference != null) {\n    readPreference = inheritedReadPreference;\n  } else {\n    readPreference = ReadPreference.primary;\n  }\n\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n};\n/**\n * Replaces options.readPreference with a ReadPreference instance\n */\n\n\nReadPreference.translate = function (options) {\n  if (options.readPreference == null) return options;\n  const r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\n\n\nReadPreference.isValid = function (mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\n\n\nReadPreference.prototype.isValid = function (mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n/**\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n * @method\n * @return {boolean}\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n */\n\nReadPreference.prototype.slaveOk = function () {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n/**\n * Are the two read preference equal\n * @method\n * @param {ReadPreference} readPreference The read preference with which to check equality\n * @return {boolean} True if the two ReadPreferences are equivalent\n */\n\n\nReadPreference.prototype.equals = function (readPreference) {\n  return readPreference.mode === this.mode;\n};\n/**\n * Return JSON representation\n * @method\n * @return {Object} A JSON representation of the ReadPreference\n */\n\n\nReadPreference.prototype.toJSON = function () {\n  const readPreference = {\n    mode: this.mode\n  };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  if (this.hedge) readPreference.hedge = this.hedge;\n  return readPreference;\n};\n/**\n * Primary read preference\n * @member\n * @type {ReadPreference}\n */\n\n\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @member\n * @type {ReadPreference}\n */\n\nReadPreference.nearest = new ReadPreference('nearest');\nmodule.exports = ReadPreference;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/topologies/read_preference.js"],"names":["ReadPreference","mode","tags","options","isValid","TypeError","Array","isArray","console","warn","tagsHasMaxStalenessSeconds","maxStalenessSeconds","tagsHasHedge","hedge","tagsHasOptions","undefined","minWireVersion","PRIMARY","length","Object","defineProperty","prototype","enumerable","get","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","VALID_MODES","fromOptions","readPreference","readPreferenceTags","preference","resolve","parent","session","inheritedReadPreference","inTransaction","transaction","primary","translate","r","indexOf","needSlaveOk","slaveOk","equals","toJSON","primaryPreferred","secondary","secondaryPreferred","nearest","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.\n * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.\n * @see https://docs.mongodb.com/manual/core/read-preference/\n * @return {ReadPreference}\n */\nconst ReadPreference = function(mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  }\n\n  // TODO(major): tags MUST be an array of tagsets\n  if (tags && !Array.isArray(tags)) {\n    console.warn(\n      'ReadPreference tags must be an array, this will change in the next major version'\n    );\n\n    const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';\n    const tagsHasHedge = typeof tags.hedge !== 'undefined';\n    const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;\n    if (tagsHasOptions) {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n  this.hedge = options && options.hedge;\n\n  options = options || {};\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n    // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n\n    if (this.hedge) {\n      throw new TypeError('Primary read preference cannot be combined with hedge');\n    }\n  }\n};\n\n// Support the deprecated `preference` property introduced in the porcelain layer\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function() {\n    return this.mode;\n  }\n});\n\n/*\n * Read preference mode constants\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\n\nconst VALID_MODES = [\n  ReadPreference.PRIMARY,\n  ReadPreference.PRIMARY_PREFERRED,\n  ReadPreference.SECONDARY,\n  ReadPreference.SECONDARY_PREFERRED,\n  ReadPreference.NEAREST,\n  null\n];\n\n/**\n * Construct a ReadPreference given an options object.\n *\n * @param {object} options The options object from which to extract the read preference.\n * @return {ReadPreference}\n */\nReadPreference.fromOptions = function(options) {\n  if (!options) return null;\n  const readPreference = options.readPreference;\n  if (!readPreference) return null;\n  const readPreferenceTags = options.readPreferenceTags;\n  const maxStalenessSeconds = options.maxStalenessSeconds;\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,\n        hedge: readPreference.hedge\n      });\n    }\n  }\n\n  return readPreference;\n};\n\n/**\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\n * determine the read preference (if there is one), but will also ensure the returned value is a\n * properly constructed instance of `ReadPreference`.\n *\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\n * preference, used for determining the inherited read preference.\n * @param {object} options The options passed into the method, potentially containing a read preference\n * @returns {(ReadPreference|null)} The resolved read preference\n */\nReadPreference.resolve = function(parent, options) {\n  options = options || {};\n  const session = options.session;\n\n  const inheritedReadPreference = parent && parent.readPreference;\n\n  let readPreference;\n  if (options.readPreference) {\n    readPreference = ReadPreference.fromOptions(options);\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\n    // The transactionâ€™s read preference MUST override all other user configurable read preferences.\n    readPreference = session.transaction.options.readPreference;\n  } else if (inheritedReadPreference != null) {\n    readPreference = inheritedReadPreference;\n  } else {\n    readPreference = ReadPreference.primary;\n  }\n\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n};\n\n/**\n * Replaces options.readPreference with a ReadPreference instance\n */\nReadPreference.translate = function(options) {\n  if (options.readPreference == null) return options;\n  const r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.isValid = function(mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.prototype.isValid = function(mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n * @method\n * @return {boolean}\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n */\nReadPreference.prototype.slaveOk = function() {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n\n/**\n * Are the two read preference equal\n * @method\n * @param {ReadPreference} readPreference The read preference with which to check equality\n * @return {boolean} True if the two ReadPreferences are equivalent\n */\nReadPreference.prototype.equals = function(readPreference) {\n  return readPreference.mode === this.mode;\n};\n\n/**\n * Return JSON representation\n * @method\n * @return {Object} A JSON representation of the ReadPreference\n */\nReadPreference.prototype.toJSON = function() {\n  const readPreference = { mode: this.mode };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  if (this.hedge) readPreference.hedge = this.hedge;\n  return readPreference;\n};\n\n/**\n * Primary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\n\nmodule.exports = ReadPreference;\n"]},"metadata":{},"sourceType":"script"}