{"ast":null,"code":"'use strict';\n\nconst TopologyBase = require('./topology_base').TopologyBase;\n\nconst MongoError = require('../core').MongoError;\n\nconst CMongos = require('../core').Mongos;\n\nconst Cursor = require('../cursor');\n\nconst Server = require('./server');\n\nconst Store = require('./topology_base').Store;\n\nconst MAX_JS_INT = require('../utils').MAX_JS_INT;\n\nconst translateOptions = require('../utils').translateOptions;\n\nconst filterOptions = require('../utils').filterOptions;\n\nconst mergeOptions = require('../utils').mergeOptions;\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n */\n// Allowed parameters\n\n\nvar legalOptionNames = ['ha', 'haInterval', 'acceptableLatencyMS', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate', 'sslCA', 'sslCRL', 'sslCert', 'ciphers', 'ecdhCurve', 'sslKey', 'sslPass', 'socketOptions', 'bufferMaxEntries', 'store', 'auto_reconnect', 'autoReconnect', 'emitError', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectTimeoutMS', 'socketTimeoutMS', 'loggerLevel', 'logger', 'reconnectTries', 'appname', 'domainsEnabled', 'servername', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'promiseLibrary', 'monitorCommands'];\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketOptions.socketTimeoutMS=0] How long a send or receive on a socket can take before timing out\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @fires Mongos#commandStarted\n * @fires Mongos#commandSucceeded\n * @fires Mongos#commandFailed\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Mongos} a Mongos instance.\n */\n\nclass Mongos extends TopologyBase {\n  constructor(servers, options) {\n    super();\n    options = options || {};\n    var self = this; // Filter the options\n\n    options = filterOptions(options, legalOptionNames); // Ensure all the instances are Server\n\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    } // Stored options\n\n\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    }; // Shared global store\n\n    var store = options.store || new Store(self, storeOptions); // Build seed list\n\n    var seedlist = servers.map(function (x) {\n      return {\n        host: x.host,\n        port: x.port\n      };\n    }); // Get the reconnect option\n\n    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;\n    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect; // Clone options\n\n    var clonedOptions = mergeOptions({}, {\n      disconnectHandler: store,\n      cursorFactory: Cursor,\n      reconnect: reconnect,\n      emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n      size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n      monitorCommands: typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n    }); // Translate any SSL options and other connectivity options\n\n    clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n    var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the core types\n\n    clonedOptions = translateOptions(clonedOptions, socketOptions); // Internal state\n\n    this.s = {\n      // Create the Mongos\n      coreTopology: new CMongos(seedlist, clonedOptions),\n      // Server capabilities\n      sCapabilities: null,\n      // Debug turned on\n      debug: clonedOptions.debug,\n      // Store option defaults\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Actual store of callbacks\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    };\n  } // Connect\n\n\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) callback = _options, _options = {};\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options; // Update bufferMaxEntries\n\n    self.s.storeOptions.bufferMaxEntries = typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1; // Error handler\n\n    var connectErrorHandler = function () {\n      return function (err) {\n        // Remove all event handlers\n        var events = ['timeout', 'error', 'close'];\n        events.forEach(function (e) {\n          self.removeListener(e, connectErrorHandler);\n        });\n        self.s.coreTopology.removeListener('connect', connectErrorHandler); // Force close the topology\n\n        self.close(true); // Try to callback\n\n        try {\n          callback(err);\n        } catch (err) {\n          process.nextTick(function () {\n            throw err;\n          });\n        }\n      };\n    }; // Actual handler\n\n\n    var errorHandler = function (event) {\n      return function (err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    }; // Error handler\n\n\n    var reconnectHandler = function () {\n      self.emit('reconnect');\n      self.s.store.execute();\n    }; // relay the event\n\n\n    var relay = function (event) {\n      return function (t, server) {\n        self.emit(event, t, server);\n      };\n    }; // Connect handler\n\n\n    var connectHandler = function () {\n      // Clear out all the current handlers left over\n      var events = ['timeout', 'error', 'close', 'fullsetup'];\n      events.forEach(function (e) {\n        self.s.coreTopology.removeAllListeners(e);\n      }); // Set up listeners\n\n      self.s.coreTopology.on('timeout', errorHandler('timeout'));\n      self.s.coreTopology.on('error', errorHandler('error'));\n      self.s.coreTopology.on('close', errorHandler('close')); // Set up serverConfig listeners\n\n      self.s.coreTopology.on('fullsetup', function () {\n        self.emit('fullsetup', self);\n      }); // Emit open event\n\n      self.emit('open', null, self); // Return correctly\n\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      }\n    }; // Clear out all the current handlers left over\n\n\n    var events = ['timeout', 'error', 'close', 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged', 'commandStarted', 'commandSucceeded', 'commandFailed'];\n    events.forEach(function (e) {\n      self.s.coreTopology.removeAllListeners(e);\n    }); // Set up SDAM listeners\n\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('commandStarted', relay('commandStarted'));\n    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));\n    self.s.coreTopology.on('commandFailed', relay('commandFailed')); // Set up listeners\n\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler); // Join and leave events\n\n    self.s.coreTopology.on('joined', relay('joined'));\n    self.s.coreTopology.on('left', relay('left')); // Reconnect server\n\n    self.s.coreTopology.on('reconnect', reconnectHandler); // Start connection\n\n    self.s.coreTopology.connect(_options);\n  }\n\n}\n\nObject.defineProperty(Mongos.prototype, 'haInterval', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/topologies/mongos.js"],"names":["TopologyBase","require","MongoError","CMongos","Mongos","Cursor","Server","Store","MAX_JS_INT","translateOptions","filterOptions","mergeOptions","legalOptionNames","constructor","servers","options","self","i","length","create","message","driver","storeOptions","force","bufferMaxEntries","store","seedlist","map","x","host","port","reconnect","auto_reconnect","autoReconnect","clonedOptions","disconnectHandler","cursorFactory","emitError","size","poolSize","monitorCommands","socketOptions","Object","keys","s","coreTopology","sCapabilities","debug","sessionPool","sessions","Set","promiseLibrary","Promise","connect","_options","callback","assign","connectErrorHandler","err","events","forEach","e","removeListener","close","process","nextTick","errorHandler","event","emit","reconnectHandler","execute","relay","t","server","connectHandler","removeAllListeners","on","once","defineProperty","prototype","enumerable","get","haInterval","module","exports"],"mappings":"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OC,YAAP,CAAoB+B,EAApB,CAAuB,MAAvB,EAA+BL,KAAK,CAAC,MAAD,CAApC,EApI0B,CAsI1B;;AACAvD,IAAAA,IAAI,CAAC4B,CAAL,CAAOC,YAAP,CAAoB+B,EAApB,CAAuB,WAAvB,EAAoCP,gBAApC,EAvI0B,CAyI1B;;AACArD,IAAAA,IAAI,CAAC4B,CAAL,CAAOC,YAAP,CAAoBQ,OAApB,CAA4BC,QAA5B;AACD;;AAtO+B;;AAyOlCZ,MAAM,CAACoC,cAAP,CAAsB1E,MAAM,CAAC2E,SAA7B,EAAwC,YAAxC,EAAsD;AACpDC,EAAAA,UAAU,EAAE,IADwC;AAEpDC,EAAAA,GAAG,EAAE,YAAW;AACd,WAAO,KAAKrC,CAAL,CAAOC,YAAP,CAAoBD,CAApB,CAAsBsC,UAA7B;AACD;AAJmD,CAAtD;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiBhF,MAAjB","sourcesContent":["'use strict';\n\nconst TopologyBase = require('./topology_base').TopologyBase;\nconst MongoError = require('../core').MongoError;\nconst CMongos = require('../core').Mongos;\nconst Cursor = require('../cursor');\nconst Server = require('./server');\nconst Store = require('./topology_base').Store;\nconst MAX_JS_INT = require('../utils').MAX_JS_INT;\nconst translateOptions = require('../utils').translateOptions;\nconst filterOptions = require('../utils').filterOptions;\nconst mergeOptions = require('../utils').mergeOptions;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'acceptableLatencyMS',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCRL',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'promiseLibrary',\n  'monitorCommands'\n];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketOptions.socketTimeoutMS=0] How long a send or receive on a socket can take before timing out\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @fires Mongos#commandStarted\n * @fires Mongos#commandSucceeded\n * @fires Mongos#commandFailed\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Mongos} a Mongos instance.\n */\nclass Mongos extends TopologyBase {\n  constructor(servers, options) {\n    super();\n\n    options = options || {};\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Ensure all the instances are Server\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    }\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Build seed list\n    var seedlist = servers.map(function(x) {\n      return { host: x.host, port: x.port };\n    });\n\n    // Get the reconnect option\n    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;\n    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: reconnect,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n        monitorCommands:\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the core types\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Internal state\n    this.s = {\n      // Create the Mongos\n      coreTopology: new CMongos(seedlist, clonedOptions),\n      // Server capabilities\n      sCapabilities: null,\n      // Debug turned on\n      debug: clonedOptions.debug,\n      // Store option defaults\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Actual store of callbacks\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    };\n  }\n\n  // Connect\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        // Remove all event handlers\n        var events = ['timeout', 'error', 'close'];\n        events.forEach(function(e) {\n          self.removeListener(e, connectErrorHandler);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n        // Force close the topology\n        self.close(true);\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          process.nextTick(function() {\n            throw err;\n          });\n        }\n      };\n    };\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Error handler\n    var reconnectHandler = function() {\n      self.emit('reconnect');\n      self.s.store.execute();\n    };\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Connect handler\n    var connectHandler = function() {\n      // Clear out all the current handlers left over\n      var events = ['timeout', 'error', 'close', 'fullsetup'];\n      events.forEach(function(e) {\n        self.s.coreTopology.removeAllListeners(e);\n      });\n\n      // Set up listeners\n      self.s.coreTopology.on('timeout', errorHandler('timeout'));\n      self.s.coreTopology.on('error', errorHandler('error'));\n      self.s.coreTopology.on('close', errorHandler('close'));\n\n      // Set up serverConfig listeners\n      self.s.coreTopology.on('fullsetup', function() {\n        self.emit('fullsetup', self);\n      });\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Clear out all the current handlers left over\n    var events = [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged',\n      'commandStarted',\n      'commandSucceeded',\n      'commandFailed'\n    ];\n    events.forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('commandStarted', relay('commandStarted'));\n    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));\n    self.s.coreTopology.on('commandFailed', relay('commandFailed'));\n\n    // Set up listeners\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler);\n    // Join and leave events\n    self.s.coreTopology.on('joined', relay('joined'));\n    self.s.coreTopology.on('left', relay('left'));\n\n    // Reconnect server\n    self.s.coreTopology.on('reconnect', reconnectHandler);\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n}\n\nObject.defineProperty(Mongos.prototype, 'haInterval', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"]},"metadata":{},"sourceType":"script"}