{"ast":null,"code":"'use strict';\n\nvar core = require('../core');\n\nvar crypto = require('crypto');\n\nvar stream = require('stream');\n\nvar util = require('util');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar ERROR_NAMESPACE_NOT_FOUND = 26;\nmodule.exports = GridFSBucketWriteStream;\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n *\n * @class\n * @extends external:Writable\n * @param {GridFSBucket} bucket Handle for this stream's corresponding bucket\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options] Optional settings.\n * @param {string|number|object} [options.id] Custom file id for the GridFS file.\n * @param {number} [options.chunkSizeBytes] The chunk size to use, in bytes\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data\n * @fires GridFSBucketWriteStream#error\n * @fires GridFSBucketWriteStream#finish\n */\n\nfunction GridFSBucketWriteStream(bucket, filename, options) {\n  options = options || {};\n  stream.Writable.call(this, options);\n  this.bucket = bucket;\n  this.chunks = bucket.s._chunksCollection;\n  this.filename = filename;\n  this.files = bucket.s._filesCollection;\n  this.options = options; // Signals the write is all done\n\n  this.done = false;\n  this.id = options.id ? options.id : core.BSON.ObjectId();\n  this.chunkSizeBytes = this.options.chunkSizeBytes;\n  this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n  this.length = 0;\n  this.md5 = !options.disableMD5 && crypto.createHash('md5');\n  this.n = 0;\n  this.pos = 0;\n  this.state = {\n    streamEnd: false,\n    outstandingRequests: 0,\n    errored: false,\n    aborted: false,\n    promiseLibrary: this.bucket.s.promiseLibrary\n  };\n\n  if (!this.bucket.s.calledOpenUploadStream) {\n    this.bucket.s.calledOpenUploadStream = true;\n\n    var _this = this;\n\n    checkIndexes(this, function () {\n      _this.bucket.s.checkedIndexes = true;\n\n      _this.bucket.emit('index');\n    });\n  }\n}\n\nutil.inherits(GridFSBucketWriteStream, stream.Writable);\n/**\n * An error occurred\n *\n * @event GridFSBucketWriteStream#error\n * @type {Error}\n */\n\n/**\n * `end()` was called and the write stream successfully wrote the file\n * metadata and all the chunks to MongoDB.\n *\n * @event GridFSBucketWriteStream#finish\n * @type {object}\n */\n\n/**\n * Write a buffer to the stream.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {GridFSBucket~errorCallback} callback Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n * @return {Boolean} False if this write required flushing a chunk to MongoDB. True otherwise.\n */\n\nGridFSBucketWriteStream.prototype.write = function (chunk, encoding, callback) {\n  var _this = this;\n\n  return waitForIndexes(this, function () {\n    return doWrite(_this, chunk, encoding, callback);\n  });\n};\n/**\n * Places this write stream into an aborted state (all future writes fail)\n * and deletes all chunks that have already been written.\n *\n * @method\n * @param {GridFSBucket~errorCallback} callback called when chunks are successfully removed or error occurred\n * @return {Promise} if no callback specified\n */\n\n\nGridFSBucketWriteStream.prototype.abort = function (callback) {\n  if (this.state.streamEnd) {\n    var error = new Error('Cannot abort a stream that has already completed');\n\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n\n    return this.state.promiseLibrary.reject(error);\n  }\n\n  if (this.state.aborted) {\n    error = new Error('Cannot call abort() on a stream twice');\n\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n\n    return this.state.promiseLibrary.reject(error);\n  }\n\n  this.state.aborted = true;\n  this.chunks.deleteMany({\n    files_id: this.id\n  }, function (error) {\n    if (typeof callback === 'function') callback(error);\n  });\n};\n/**\n * Tells the stream that no more data will be coming in. The stream will\n * persist the remaining data to MongoDB, write the files document, and\n * then emit a 'finish' event.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {GridFSBucket~errorCallback} callback Function to call when all files and chunks have been persisted to MongoDB\n */\n\n\nGridFSBucketWriteStream.prototype.end = function (chunk, encoding, callback) {\n  var _this = this;\n\n  if (typeof chunk === 'function') {\n    callback = chunk, chunk = null, encoding = null;\n  } else if (typeof encoding === 'function') {\n    callback = encoding, encoding = null;\n  }\n\n  if (checkAborted(this, callback)) {\n    return;\n  }\n\n  this.state.streamEnd = true;\n\n  if (callback) {\n    this.once('finish', function (result) {\n      callback(null, result);\n    });\n  }\n\n  if (!chunk) {\n    waitForIndexes(this, function () {\n      writeRemnant(_this);\n    });\n    return;\n  }\n\n  this.write(chunk, encoding, function () {\n    writeRemnant(_this);\n  });\n};\n/**\n * @ignore\n */\n\n\nfunction __handleError(_this, error, callback) {\n  if (_this.state.errored) {\n    return;\n  }\n\n  _this.state.errored = true;\n\n  if (callback) {\n    return callback(error);\n  }\n\n  _this.emit('error', error);\n}\n/**\n * @ignore\n */\n\n\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: core.BSON.ObjectId(),\n    files_id: filesId,\n    n: n,\n    data: data\n  };\n}\n/**\n * @ignore\n */\n\n\nfunction checkChunksIndex(_this, callback) {\n  _this.chunks.listIndexes().toArray(function (error, indexes) {\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n        var index = {\n          files_id: 1,\n          n: 1\n        };\n\n        _this.chunks.createIndex(index, {\n          background: false,\n          unique: true\n        }, function (error) {\n          if (error) {\n            return callback(error);\n          }\n\n          callback();\n        });\n\n        return;\n      }\n\n      return callback(error);\n    }\n\n    var hasChunksIndex = false;\n    indexes.forEach(function (index) {\n      if (index.key) {\n        var keys = Object.keys(index.key);\n\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n          hasChunksIndex = true;\n        }\n      }\n    });\n\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = {\n        files_id: 1,\n        n: 1\n      };\n      var indexOptions = getWriteOptions(_this);\n      indexOptions.background = false;\n      indexOptions.unique = true;\n\n      _this.chunks.createIndex(index, indexOptions, function (error) {\n        if (error) {\n          return callback(error);\n        }\n\n        callback();\n      });\n    }\n  });\n}\n/**\n * @ignore\n */\n\n\nfunction checkDone(_this, callback) {\n  if (_this.done) return true;\n\n  if (_this.state.streamEnd && _this.state.outstandingRequests === 0 && !_this.state.errored) {\n    // Set done so we dont' trigger duplicate createFilesDoc\n    _this.done = true; // Create a new files doc\n\n    var filesDoc = createFilesDoc(_this.id, _this.length, _this.chunkSizeBytes, _this.md5 && _this.md5.digest('hex'), _this.filename, _this.options.contentType, _this.options.aliases, _this.options.metadata);\n\n    if (checkAborted(_this, callback)) {\n      return false;\n    }\n\n    _this.files.insertOne(filesDoc, getWriteOptions(_this), function (error) {\n      if (error) {\n        return __handleError(_this, error, callback);\n      }\n\n      _this.emit('finish', filesDoc);\n    });\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * @ignore\n */\n\n\nfunction checkIndexes(_this, callback) {\n  _this.files.findOne({}, {\n    _id: 1\n  }, function (error, doc) {\n    if (error) {\n      return callback(error);\n    }\n\n    if (doc) {\n      return callback();\n    }\n\n    _this.files.listIndexes().toArray(function (error, indexes) {\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n          var index = {\n            filename: 1,\n            uploadDate: 1\n          };\n\n          _this.files.createIndex(index, {\n            background: false\n          }, function (error) {\n            if (error) {\n              return callback(error);\n            }\n\n            checkChunksIndex(_this, callback);\n          });\n\n          return;\n        }\n\n        return callback(error);\n      }\n\n      var hasFileIndex = false;\n      indexes.forEach(function (index) {\n        var keys = Object.keys(index.key);\n\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n          hasFileIndex = true;\n        }\n      });\n\n      if (hasFileIndex) {\n        checkChunksIndex(_this, callback);\n      } else {\n        index = {\n          filename: 1,\n          uploadDate: 1\n        };\n        var indexOptions = getWriteOptions(_this);\n        indexOptions.background = false;\n\n        _this.files.createIndex(index, indexOptions, function (error) {\n          if (error) {\n            return callback(error);\n          }\n\n          checkChunksIndex(_this, callback);\n        });\n      }\n    });\n  });\n}\n/**\n * @ignore\n */\n\n\nfunction createFilesDoc(_id, length, chunkSize, md5, filename, contentType, aliases, metadata) {\n  var ret = {\n    _id: _id,\n    length: length,\n    chunkSize: chunkSize,\n    uploadDate: new Date(),\n    filename: filename\n  };\n\n  if (md5) {\n    ret.md5 = md5;\n  }\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n/**\n * @ignore\n */\n\n\nfunction doWrite(_this, chunk, encoding, callback) {\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  var inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n  _this.length += inputBuf.length; // Input is small enough to fit in our buffer\n\n  if (_this.pos + inputBuf.length < _this.chunkSizeBytes) {\n    inputBuf.copy(_this.bufToStore, _this.pos);\n    _this.pos += inputBuf.length;\n    callback && callback(); // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n\n    return true;\n  } // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n\n\n  var inputBufRemaining = inputBuf.length;\n  var spaceRemaining = _this.chunkSizeBytes - _this.pos;\n  var numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  var outstandingRequests = 0;\n\n  while (inputBufRemaining > 0) {\n    var inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(_this.bufToStore, _this.pos, inputBufPos, inputBufPos + numToCopy);\n    _this.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n\n    if (spaceRemaining === 0) {\n      if (_this.md5) {\n        _this.md5.update(_this.bufToStore);\n      }\n\n      var doc = createChunkDoc(_this.id, _this.n, Buffer.from(_this.bufToStore));\n      ++_this.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(_this, callback)) {\n        return false;\n      }\n\n      _this.chunks.insertOne(doc, getWriteOptions(_this), function (error) {\n        if (error) {\n          return __handleError(_this, error);\n        }\n\n        --_this.state.outstandingRequests;\n        --outstandingRequests;\n\n        if (!outstandingRequests) {\n          _this.emit('drain', doc);\n\n          callback && callback();\n          checkDone(_this);\n        }\n      });\n\n      spaceRemaining = _this.chunkSizeBytes;\n      _this.pos = 0;\n      ++_this.n;\n    }\n\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  } // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n\n\n  return false;\n}\n/**\n * @ignore\n */\n\n\nfunction getWriteOptions(_this) {\n  var obj = {};\n\n  if (_this.options.writeConcern) {\n    obj.w = _this.options.writeConcern.w;\n    obj.wtimeout = _this.options.writeConcern.wtimeout;\n    obj.j = _this.options.writeConcern.j;\n  }\n\n  return obj;\n}\n/**\n * @ignore\n */\n\n\nfunction waitForIndexes(_this, callback) {\n  if (_this.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  _this.bucket.once('index', function () {\n    callback(true);\n  });\n\n  return true;\n}\n/**\n * @ignore\n */\n\n\nfunction writeRemnant(_this, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (_this.pos === 0) {\n    return checkDone(_this, callback);\n  }\n\n  ++_this.state.outstandingRequests; // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n\n  var remnant = Buffer.alloc(_this.pos);\n\n  _this.bufToStore.copy(remnant, 0, 0, _this.pos);\n\n  if (_this.md5) {\n    _this.md5.update(remnant);\n  }\n\n  var doc = createChunkDoc(_this.id, _this.n, remnant); // If the stream was aborted, do not write remnant\n\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  _this.chunks.insertOne(doc, getWriteOptions(_this), function (error) {\n    if (error) {\n      return __handleError(_this, error);\n    }\n\n    --_this.state.outstandingRequests;\n    checkDone(_this);\n  });\n}\n/**\n * @ignore\n */\n\n\nfunction checkAborted(_this, callback) {\n  if (_this.state.aborted) {\n    if (typeof callback === 'function') {\n      callback(new Error('this stream has been aborted'));\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/gridfs-stream/upload.js"],"names":["core","require","crypto","stream","util","Buffer","ERROR_NAMESPACE_NOT_FOUND","module","exports","GridFSBucketWriteStream","bucket","filename","options","Writable","call","chunks","s","_chunksCollection","files","_filesCollection","done","id","BSON","ObjectId","chunkSizeBytes","bufToStore","alloc","length","md5","disableMD5","createHash","n","pos","state","streamEnd","outstandingRequests","errored","aborted","promiseLibrary","calledOpenUploadStream","_this","checkIndexes","checkedIndexes","emit","inherits","prototype","write","chunk","encoding","callback","waitForIndexes","doWrite","abort","error","Error","reject","deleteMany","files_id","end","checkAborted","once","result","writeRemnant","__handleError","createChunkDoc","filesId","data","_id","checkChunksIndex","listIndexes","toArray","indexes","code","index","createIndex","background","unique","hasChunksIndex","forEach","key","keys","Object","indexOptions","getWriteOptions","checkDone","filesDoc","createFilesDoc","digest","contentType","aliases","metadata","insertOne","findOne","doc","uploadDate","hasFileIndex","chunkSize","ret","Date","inputBuf","isBuffer","from","copy","inputBufRemaining","spaceRemaining","numToCopy","Math","min","inputBufPos","update","obj","writeConcern","w","wtimeout","j","remnant"],"mappings":"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","sourcesContent":["'use strict';\n\nvar core = require('../core');\nvar crypto = require('crypto');\nvar stream = require('stream');\nvar util = require('util');\nvar Buffer = require('safe-buffer').Buffer;\n\nvar ERROR_NAMESPACE_NOT_FOUND = 26;\n\nmodule.exports = GridFSBucketWriteStream;\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n *\n * @class\n * @extends external:Writable\n * @param {GridFSBucket} bucket Handle for this stream's corresponding bucket\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options] Optional settings.\n * @param {string|number|object} [options.id] Custom file id for the GridFS file.\n * @param {number} [options.chunkSizeBytes] The chunk size to use, in bytes\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data\n * @fires GridFSBucketWriteStream#error\n * @fires GridFSBucketWriteStream#finish\n */\n\nfunction GridFSBucketWriteStream(bucket, filename, options) {\n  options = options || {};\n  stream.Writable.call(this, options);\n  this.bucket = bucket;\n  this.chunks = bucket.s._chunksCollection;\n  this.filename = filename;\n  this.files = bucket.s._filesCollection;\n  this.options = options;\n  // Signals the write is all done\n  this.done = false;\n\n  this.id = options.id ? options.id : core.BSON.ObjectId();\n  this.chunkSizeBytes = this.options.chunkSizeBytes;\n  this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n  this.length = 0;\n  this.md5 = !options.disableMD5 && crypto.createHash('md5');\n  this.n = 0;\n  this.pos = 0;\n  this.state = {\n    streamEnd: false,\n    outstandingRequests: 0,\n    errored: false,\n    aborted: false,\n    promiseLibrary: this.bucket.s.promiseLibrary\n  };\n\n  if (!this.bucket.s.calledOpenUploadStream) {\n    this.bucket.s.calledOpenUploadStream = true;\n\n    var _this = this;\n    checkIndexes(this, function() {\n      _this.bucket.s.checkedIndexes = true;\n      _this.bucket.emit('index');\n    });\n  }\n}\n\nutil.inherits(GridFSBucketWriteStream, stream.Writable);\n\n/**\n * An error occurred\n *\n * @event GridFSBucketWriteStream#error\n * @type {Error}\n */\n\n/**\n * `end()` was called and the write stream successfully wrote the file\n * metadata and all the chunks to MongoDB.\n *\n * @event GridFSBucketWriteStream#finish\n * @type {object}\n */\n\n/**\n * Write a buffer to the stream.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {GridFSBucket~errorCallback} callback Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n * @return {Boolean} False if this write required flushing a chunk to MongoDB. True otherwise.\n */\n\nGridFSBucketWriteStream.prototype.write = function(chunk, encoding, callback) {\n  var _this = this;\n  return waitForIndexes(this, function() {\n    return doWrite(_this, chunk, encoding, callback);\n  });\n};\n\n/**\n * Places this write stream into an aborted state (all future writes fail)\n * and deletes all chunks that have already been written.\n *\n * @method\n * @param {GridFSBucket~errorCallback} callback called when chunks are successfully removed or error occurred\n * @return {Promise} if no callback specified\n */\n\nGridFSBucketWriteStream.prototype.abort = function(callback) {\n  if (this.state.streamEnd) {\n    var error = new Error('Cannot abort a stream that has already completed');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    return this.state.promiseLibrary.reject(error);\n  }\n  if (this.state.aborted) {\n    error = new Error('Cannot call abort() on a stream twice');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    return this.state.promiseLibrary.reject(error);\n  }\n  this.state.aborted = true;\n  this.chunks.deleteMany({ files_id: this.id }, function(error) {\n    if (typeof callback === 'function') callback(error);\n  });\n};\n\n/**\n * Tells the stream that no more data will be coming in. The stream will\n * persist the remaining data to MongoDB, write the files document, and\n * then emit a 'finish' event.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {GridFSBucket~errorCallback} callback Function to call when all files and chunks have been persisted to MongoDB\n */\n\nGridFSBucketWriteStream.prototype.end = function(chunk, encoding, callback) {\n  var _this = this;\n  if (typeof chunk === 'function') {\n    (callback = chunk), (chunk = null), (encoding = null);\n  } else if (typeof encoding === 'function') {\n    (callback = encoding), (encoding = null);\n  }\n\n  if (checkAborted(this, callback)) {\n    return;\n  }\n  this.state.streamEnd = true;\n\n  if (callback) {\n    this.once('finish', function(result) {\n      callback(null, result);\n    });\n  }\n\n  if (!chunk) {\n    waitForIndexes(this, function() {\n      writeRemnant(_this);\n    });\n    return;\n  }\n\n  this.write(chunk, encoding, function() {\n    writeRemnant(_this);\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction __handleError(_this, error, callback) {\n  if (_this.state.errored) {\n    return;\n  }\n  _this.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  _this.emit('error', error);\n}\n\n/**\n * @ignore\n */\n\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: core.BSON.ObjectId(),\n    files_id: filesId,\n    n: n,\n    data: data\n  };\n}\n\n/**\n * @ignore\n */\n\nfunction checkChunksIndex(_this, callback) {\n  _this.chunks.listIndexes().toArray(function(error, indexes) {\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n        var index = { files_id: 1, n: 1 };\n        _this.chunks.createIndex(index, { background: false, unique: true }, function(error) {\n          if (error) {\n            return callback(error);\n          }\n\n          callback();\n        });\n        return;\n      }\n      return callback(error);\n    }\n\n    var hasChunksIndex = false;\n    indexes.forEach(function(index) {\n      if (index.key) {\n        var keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n          hasChunksIndex = true;\n        }\n      }\n    });\n\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = { files_id: 1, n: 1 };\n      var indexOptions = getWriteOptions(_this);\n\n      indexOptions.background = false;\n      indexOptions.unique = true;\n\n      _this.chunks.createIndex(index, indexOptions, function(error) {\n        if (error) {\n          return callback(error);\n        }\n\n        callback();\n      });\n    }\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction checkDone(_this, callback) {\n  if (_this.done) return true;\n  if (_this.state.streamEnd && _this.state.outstandingRequests === 0 && !_this.state.errored) {\n    // Set done so we dont' trigger duplicate createFilesDoc\n    _this.done = true;\n    // Create a new files doc\n    var filesDoc = createFilesDoc(\n      _this.id,\n      _this.length,\n      _this.chunkSizeBytes,\n      _this.md5 && _this.md5.digest('hex'),\n      _this.filename,\n      _this.options.contentType,\n      _this.options.aliases,\n      _this.options.metadata\n    );\n\n    if (checkAborted(_this, callback)) {\n      return false;\n    }\n\n    _this.files.insertOne(filesDoc, getWriteOptions(_this), function(error) {\n      if (error) {\n        return __handleError(_this, error, callback);\n      }\n      _this.emit('finish', filesDoc);\n    });\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * @ignore\n */\n\nfunction checkIndexes(_this, callback) {\n  _this.files.findOne({}, { _id: 1 }, function(error, doc) {\n    if (error) {\n      return callback(error);\n    }\n    if (doc) {\n      return callback();\n    }\n\n    _this.files.listIndexes().toArray(function(error, indexes) {\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n          var index = { filename: 1, uploadDate: 1 };\n          _this.files.createIndex(index, { background: false }, function(error) {\n            if (error) {\n              return callback(error);\n            }\n\n            checkChunksIndex(_this, callback);\n          });\n          return;\n        }\n        return callback(error);\n      }\n\n      var hasFileIndex = false;\n      indexes.forEach(function(index) {\n        var keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n          hasFileIndex = true;\n        }\n      });\n\n      if (hasFileIndex) {\n        checkChunksIndex(_this, callback);\n      } else {\n        index = { filename: 1, uploadDate: 1 };\n\n        var indexOptions = getWriteOptions(_this);\n\n        indexOptions.background = false;\n\n        _this.files.createIndex(index, indexOptions, function(error) {\n          if (error) {\n            return callback(error);\n          }\n\n          checkChunksIndex(_this, callback);\n        });\n      }\n    });\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction createFilesDoc(_id, length, chunkSize, md5, filename, contentType, aliases, metadata) {\n  var ret = {\n    _id: _id,\n    length: length,\n    chunkSize: chunkSize,\n    uploadDate: new Date(),\n    filename: filename\n  };\n\n  if (md5) {\n    ret.md5 = md5;\n  }\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\n/**\n * @ignore\n */\n\nfunction doWrite(_this, chunk, encoding, callback) {\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  var inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n  _this.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (_this.pos + inputBuf.length < _this.chunkSizeBytes) {\n    inputBuf.copy(_this.bufToStore, _this.pos);\n    _this.pos += inputBuf.length;\n\n    callback && callback();\n\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  var inputBufRemaining = inputBuf.length;\n  var spaceRemaining = _this.chunkSizeBytes - _this.pos;\n  var numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  var outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    var inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(_this.bufToStore, _this.pos, inputBufPos, inputBufPos + numToCopy);\n    _this.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    if (spaceRemaining === 0) {\n      if (_this.md5) {\n        _this.md5.update(_this.bufToStore);\n      }\n      var doc = createChunkDoc(_this.id, _this.n, Buffer.from(_this.bufToStore));\n      ++_this.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(_this, callback)) {\n        return false;\n      }\n\n      _this.chunks.insertOne(doc, getWriteOptions(_this), function(error) {\n        if (error) {\n          return __handleError(_this, error);\n        }\n        --_this.state.outstandingRequests;\n        --outstandingRequests;\n\n        if (!outstandingRequests) {\n          _this.emit('drain', doc);\n          callback && callback();\n          checkDone(_this);\n        }\n      });\n\n      spaceRemaining = _this.chunkSizeBytes;\n      _this.pos = 0;\n      ++_this.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\n\n/**\n * @ignore\n */\n\nfunction getWriteOptions(_this) {\n  var obj = {};\n  if (_this.options.writeConcern) {\n    obj.w = _this.options.writeConcern.w;\n    obj.wtimeout = _this.options.writeConcern.wtimeout;\n    obj.j = _this.options.writeConcern.j;\n  }\n  return obj;\n}\n\n/**\n * @ignore\n */\n\nfunction waitForIndexes(_this, callback) {\n  if (_this.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  _this.bucket.once('index', function() {\n    callback(true);\n  });\n\n  return true;\n}\n\n/**\n * @ignore\n */\n\nfunction writeRemnant(_this, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (_this.pos === 0) {\n    return checkDone(_this, callback);\n  }\n\n  ++_this.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  var remnant = Buffer.alloc(_this.pos);\n  _this.bufToStore.copy(remnant, 0, 0, _this.pos);\n  if (_this.md5) {\n    _this.md5.update(remnant);\n  }\n  var doc = createChunkDoc(_this.id, _this.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  _this.chunks.insertOne(doc, getWriteOptions(_this), function(error) {\n    if (error) {\n      return __handleError(_this, error);\n    }\n    --_this.state.outstandingRequests;\n    checkDone(_this);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction checkAborted(_this, callback) {\n  if (_this.state.aborted) {\n    if (typeof callback === 'function') {\n      callback(new Error('this stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}