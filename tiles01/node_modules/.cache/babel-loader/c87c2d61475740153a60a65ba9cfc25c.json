{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst bitfield = require('sparse-bitfield');\n/* eslint-disable-next-line security/detect-non-literal-fs-filename */\n\n\nconst memory = fs.readFileSync(path.resolve(__dirname, '../code-points.mem'));\nlet offset = 0;\n/**\n * Loads each code points sequence from buffer.\n * @returns {bitfield}\n */\n\nfunction read() {\n  const size = memory.readUInt32BE(offset);\n  offset += 4;\n  const codepoints = memory.slice(offset, offset + size);\n  offset += size;\n  return bitfield({\n    buffer: codepoints\n  });\n}\n\nconst unassigned_code_points = read();\nconst commonly_mapped_to_nothing = read();\nconst non_ASCII_space_characters = read();\nconst prohibited_characters = read();\nconst bidirectional_r_al = read();\nconst bidirectional_l = read();\nmodule.exports = {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l\n};","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/saslprep/lib/memory-code-points.js"],"names":["fs","require","path","bitfield","memory","readFileSync","resolve","__dirname","offset","read","size","readUInt32BE","codepoints","slice","buffer","unassigned_code_points","commonly_mapped_to_nothing","non_ASCII_space_characters","prohibited_characters","bidirectional_r_al","bidirectional_l","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;AAEA;;;AACA,MAAMG,MAAM,GAAGJ,EAAE,CAACK,YAAH,CAAgBH,IAAI,CAACI,OAAL,CAAaC,SAAb,EAAwB,oBAAxB,CAAhB,CAAf;AACA,IAAIC,MAAM,GAAG,CAAb;AAEA;AACA;AACA;AACA;;AACA,SAASC,IAAT,GAAgB;AACd,QAAMC,IAAI,GAAGN,MAAM,CAACO,YAAP,CAAoBH,MAApB,CAAb;AACAA,EAAAA,MAAM,IAAI,CAAV;AAEA,QAAMI,UAAU,GAAGR,MAAM,CAACS,KAAP,CAAaL,MAAb,EAAqBA,MAAM,GAAGE,IAA9B,CAAnB;AACAF,EAAAA,MAAM,IAAIE,IAAV;AAEA,SAAOP,QAAQ,CAAC;AAAEW,IAAAA,MAAM,EAAEF;AAAV,GAAD,CAAf;AACD;;AAED,MAAMG,sBAAsB,GAAGN,IAAI,EAAnC;AACA,MAAMO,0BAA0B,GAAGP,IAAI,EAAvC;AACA,MAAMQ,0BAA0B,GAAGR,IAAI,EAAvC;AACA,MAAMS,qBAAqB,GAAGT,IAAI,EAAlC;AACA,MAAMU,kBAAkB,GAAGV,IAAI,EAA/B;AACA,MAAMW,eAAe,GAAGX,IAAI,EAA5B;AAEAY,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,sBADe;AAEfC,EAAAA,0BAFe;AAGfC,EAAAA,0BAHe;AAIfC,EAAAA,qBAJe;AAKfC,EAAAA,kBALe;AAMfC,EAAAA;AANe,CAAjB","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst bitfield = require('sparse-bitfield');\n\n/* eslint-disable-next-line security/detect-non-literal-fs-filename */\nconst memory = fs.readFileSync(path.resolve(__dirname, '../code-points.mem'));\nlet offset = 0;\n\n/**\n * Loads each code points sequence from buffer.\n * @returns {bitfield}\n */\nfunction read() {\n  const size = memory.readUInt32BE(offset);\n  offset += 4;\n\n  const codepoints = memory.slice(offset, offset + size);\n  offset += size;\n\n  return bitfield({ buffer: codepoints });\n}\n\nconst unassigned_code_points = read();\nconst commonly_mapped_to_nothing = read();\nconst non_ASCII_space_characters = read();\nconst prohibited_characters = read();\nconst bidirectional_r_al = read();\nconst bidirectional_l = read();\n\nmodule.exports = {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l,\n};\n"]},"metadata":{},"sourceType":"script"}