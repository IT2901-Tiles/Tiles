{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst MongoError = require('../core').MongoError;\n\nclass OptionsOperation extends OperationBase {\n  constructor(collection, options) {\n    super(options);\n    this.collection = collection;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const opts = this.options;\n    coll.s.db.listCollections({\n      name: coll.collectionName\n    }, opts).toArray((err, collections) => {\n      if (err) return handleCallback(callback, err);\n\n      if (collections.length === 0) {\n        return handleCallback(callback, MongoError.create({\n          message: `collection ${coll.namespace} not found`,\n          driver: true\n        }));\n      }\n\n      handleCallback(callback, err, collections[0].options || null);\n    });\n  }\n\n}\n\nmodule.exports = OptionsOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/options_operation.js"],"names":["OperationBase","require","handleCallback","MongoError","OptionsOperation","constructor","collection","options","execute","callback","coll","opts","s","db","listCollections","name","collectionName","toArray","err","collections","length","create","message","namespace","driver","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,MAAME,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAA3C;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,UAAtC;;AAEA,MAAMC,gBAAN,SAA+BJ,aAA/B,CAA6C;AAC3CK,EAAAA,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;AAC/B,UAAMA,OAAN;AAEA,SAAKD,UAAL,GAAkBA,UAAlB;AACD;;AAEDE,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,IAAI,GAAG,KAAKJ,UAAlB;AACA,UAAMK,IAAI,GAAG,KAAKJ,OAAlB;AAEAG,IAAAA,IAAI,CAACE,CAAL,CAAOC,EAAP,CAAUC,eAAV,CAA0B;AAAEC,MAAAA,IAAI,EAAEL,IAAI,CAACM;AAAb,KAA1B,EAAyDL,IAAzD,EAA+DM,OAA/D,CAAuE,CAACC,GAAD,EAAMC,WAAN,KAAsB;AAC3F,UAAID,GAAJ,EAAS,OAAOhB,cAAc,CAACO,QAAD,EAAWS,GAAX,CAArB;;AACT,UAAIC,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,eAAOlB,cAAc,CACnBO,QADmB,EAEnBN,UAAU,CAACkB,MAAX,CAAkB;AAAEC,UAAAA,OAAO,EAAG,cAAaZ,IAAI,CAACa,SAAU,YAAxC;AAAqDC,UAAAA,MAAM,EAAE;AAA7D,SAAlB,CAFmB,CAArB;AAID;;AAEDtB,MAAAA,cAAc,CAACO,QAAD,EAAWS,GAAX,EAAgBC,WAAW,CAAC,CAAD,CAAX,CAAeZ,OAAf,IAA0B,IAA1C,CAAd;AACD,KAVD;AAWD;;AAtB0C;;AAyB7CkB,MAAM,CAACC,OAAP,GAAiBtB,gBAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\n\nclass OptionsOperation extends OperationBase {\n  constructor(collection, options) {\n    super(options);\n\n    this.collection = collection;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const opts = this.options;\n\n    coll.s.db.listCollections({ name: coll.collectionName }, opts).toArray((err, collections) => {\n      if (err) return handleCallback(callback, err);\n      if (collections.length === 0) {\n        return handleCallback(\n          callback,\n          MongoError.create({ message: `collection ${coll.namespace} not found`, driver: true })\n        );\n      }\n\n      handleCallback(callback, err, collections[0].options || null);\n    });\n  }\n}\n\nmodule.exports = OptionsOperation;\n"]},"metadata":{},"sourceType":"script"}