{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst inherits = require('util').inherits;\n\nconst getSingleProperty = require('./utils').getSingleProperty;\n\nconst CommandCursor = require('./command_cursor');\n\nconst handleCallback = require('./utils').handleCallback;\n\nconst filterOptions = require('./utils').filterOptions;\n\nconst toError = require('./utils').toError;\n\nconst ReadPreference = require('./core').ReadPreference;\n\nconst MongoError = require('./core').MongoError;\n\nconst ObjectID = require('./core').ObjectID;\n\nconst Logger = require('./core').Logger;\n\nconst Collection = require('./collection');\n\nconst mergeOptionsAndWriteConcern = require('./utils').mergeOptionsAndWriteConcern;\n\nconst executeLegacyOperation = require('./utils').executeLegacyOperation;\n\nconst ChangeStream = require('./change_stream');\n\nconst deprecate = require('util').deprecate;\n\nconst deprecateOptions = require('./utils').deprecateOptions;\n\nconst MongoDBNamespace = require('./utils').MongoDBNamespace;\n\nconst CONSTANTS = require('./constants');\n\nconst WriteConcern = require('./write_concern');\n\nconst ReadConcern = require('./read_concern');\n\nconst AggregationCursor = require('./aggregation_cursor'); // Operations\n\n\nconst createListener = require('./operations/db_ops').createListener;\n\nconst ensureIndex = require('./operations/db_ops').ensureIndex;\n\nconst evaluate = require('./operations/db_ops').evaluate;\n\nconst profilingInfo = require('./operations/db_ops').profilingInfo;\n\nconst validateDatabaseName = require('./operations/db_ops').validateDatabaseName;\n\nconst AggregateOperation = require('./operations/aggregate');\n\nconst AddUserOperation = require('./operations/add_user');\n\nconst CollectionsOperation = require('./operations/collections');\n\nconst CommandOperation = require('./operations/command');\n\nconst RunCommandOperation = require('./operations/run_command');\n\nconst CreateCollectionOperation = require('./operations/create_collection');\n\nconst CreateIndexesOperation = require('./operations/create_indexes');\n\nconst DropCollectionOperation = require('./operations/drop').DropCollectionOperation;\n\nconst DropDatabaseOperation = require('./operations/drop').DropDatabaseOperation;\n\nconst ExecuteDbAdminCommandOperation = require('./operations/execute_db_admin_command');\n\nconst IndexInformationOperation = require('./operations/index_information');\n\nconst ListCollectionsOperation = require('./operations/list_collections');\n\nconst ProfilingLevelOperation = require('./operations/profiling_level');\n\nconst RemoveUserOperation = require('./operations/remove_user');\n\nconst RenameOperation = require('./operations/rename');\n\nconst SetProfilingLevelOperation = require('./operations/set_profiling_level');\n\nconst executeOperation = require('./operations/execute_operation');\n/**\n * @fileOverview The **Db** class is a class that represents a MongoDB Database.\n *\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n */\n// Allowed parameters\n\n\nconst legalOptionNames = ['w', 'wtimeout', 'fsync', 'j', 'writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'bufferMaxEntries', 'authSource', 'ignoreUndefined', 'promoteLongs', 'promiseLibrary', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'parentDb', 'noListener', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * Creates a new Db instance\n * @class\n * @param {string} databaseName The name of the database this instance represents.\n * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.\n * @param {object} [options] Optional settings.\n * @param {string} [options.authSource] If the database authentication is dependent on another databaseName.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.\n * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database\n * @property {string} databaseName The name of the database this instance represents.\n * @property {object} options The options associated with the db instance.\n * @property {boolean} native_parser The current value of the parameter native_parser.\n * @property {boolean} slaveOk The current slaveOk value for the db instance.\n * @property {object} writeConcern The current write concern values.\n * @property {object} topology Access the topology object (single server, replicaset or mongos).\n * @fires Db#close\n * @fires Db#reconnect\n * @fires Db#error\n * @fires Db#timeout\n * @fires Db#parseError\n * @fires Db#fullsetup\n * @return {Db} a Db instance.\n */\n\nfunction Db(databaseName, topology, options) {\n  options = options || {};\n  if (!(this instanceof Db)) return new Db(databaseName, topology, options);\n  EventEmitter.call(this); // Get the promiseLibrary\n\n  const promiseLibrary = options.promiseLibrary || Promise; // Filter the options\n\n  options = filterOptions(options, legalOptionNames); // Ensure we put the promiseLib in the options\n\n  options.promiseLibrary = promiseLibrary; // Internal state of the db object\n\n  this.s = {\n    // DbCache\n    dbCache: {},\n    // Children db's\n    children: [],\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Logger instance\n    logger: Logger('Db', options),\n    // Get the bson parser\n    bson: topology ? topology.bson : null,\n    // Unpack read preference\n    readPreference: ReadPreference.fromOptions(options),\n    // Set buffermaxEntries\n    bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : -1,\n    // Parent db (if chained)\n    parentDb: options.parentDb || null,\n    // Set up the primary key factory or fallback to ObjectID\n    pkFactory: options.pkFactory || ObjectID,\n    // Get native parser\n    nativeParser: options.nativeParser || options.native_parser,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // No listener\n    noListener: typeof options.noListener === 'boolean' ? options.noListener : false,\n    // ReadConcern\n    readConcern: ReadConcern.fromOptions(options),\n    writeConcern: WriteConcern.fromOptions(options),\n    // Namespace\n    namespace: new MongoDBNamespace(databaseName)\n  }; // Ensure we have a valid db name\n\n  validateDatabaseName(databaseName); // Add a read Only property\n\n  getSingleProperty(this, 'serverConfig', this.s.topology);\n  getSingleProperty(this, 'bufferMaxEntries', this.s.bufferMaxEntries);\n  getSingleProperty(this, 'databaseName', this.s.namespace.db); // This is a child db, do not register any listeners\n\n  if (options.parentDb) return;\n  if (this.s.noListener) return; // Add listeners\n\n  topology.on('error', createListener(this, 'error', this));\n  topology.on('timeout', createListener(this, 'timeout', this));\n  topology.on('close', createListener(this, 'close', this));\n  topology.on('parseError', createListener(this, 'parseError', this));\n  topology.once('open', createListener(this, 'open', this));\n  topology.once('fullsetup', createListener(this, 'fullsetup', this));\n  topology.once('all', createListener(this, 'all', this));\n  topology.on('reconnect', createListener(this, 'reconnect', this));\n}\n\ninherits(Db, EventEmitter);\nDb.prototype.on = deprecate(function () {\n  return Db.super_.prototype.on.apply(this, arguments);\n}, 'Listening to events on the Db class has been deprecated and will be removed in the next major version.');\nDb.prototype.once = deprecate(function () {\n  return Db.super_.prototype.once.apply(this, arguments);\n}, 'Listening to events on the Db class has been deprecated and will be removed in the next major version.'); // Topology\n\nObject.defineProperty(Db.prototype, 'topology', {\n  enumerable: true,\n  get: function () {\n    return this.s.topology;\n  }\n}); // Options\n\nObject.defineProperty(Db.prototype, 'options', {\n  enumerable: true,\n  get: function () {\n    return this.s.options;\n  }\n}); // slaveOk specified\n\nObject.defineProperty(Db.prototype, 'slaveOk', {\n  enumerable: true,\n  get: function () {\n    if (this.s.options.readPreference != null && (this.s.options.readPreference !== 'primary' || this.s.options.readPreference.mode !== 'primary')) {\n      return true;\n    }\n\n    return false;\n  }\n});\nObject.defineProperty(Db.prototype, 'readConcern', {\n  enumerable: true,\n  get: function () {\n    return this.s.readConcern;\n  }\n});\nObject.defineProperty(Db.prototype, 'readPreference', {\n  enumerable: true,\n  get: function () {\n    if (this.s.readPreference == null) {\n      // TODO: check client\n      return ReadPreference.primary;\n    }\n\n    return this.s.readPreference;\n  }\n}); // get the write Concern\n\nObject.defineProperty(Db.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function () {\n    return this.s.writeConcern;\n  }\n});\nObject.defineProperty(Db.prototype, 'namespace', {\n  enumerable: true,\n  get: function () {\n    return this.s.namespace.toString();\n  }\n});\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\nDb.prototype.command = function (command, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = Object.assign({}, options);\n  const commandOperation = new RunCommandOperation(this, command, options);\n  return executeOperation(this.s.topology, commandOperation, callback);\n};\n/**\n * Execute an aggregation framework pipeline against the database, needs MongoDB >= 3.6\n * @method\n * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n * @param {number} [options.cursor.batchSize=1000] Deprecated. Use `options.batchSize`\n * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.\n * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {string} [options.comment] Add a comment to an aggregation command\n * @param {string|object} [options.hint] Add an index selection hint to an aggregation command\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Database~aggregationCallback} callback The command result callback\n * @return {(null|AggregationCursor)}\n */\n\n\nDb.prototype.aggregate = function (pipeline, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } // If we have no options or callback we are doing\n  // a cursor based aggregation\n\n\n  if (options == null && callback == null) {\n    options = {};\n  }\n\n  const cursor = new AggregationCursor(this.s.topology, new AggregateOperation(this, pipeline, options), options); // TODO: remove this when NODE-2074 is resolved\n\n  if (typeof callback === 'function') {\n    callback(null, cursor);\n    return;\n  }\n\n  return cursor;\n};\n/**\n * Return the Admin db instance\n * @method\n * @return {Admin} return the new Admin db instance\n */\n\n\nDb.prototype.admin = function () {\n  const Admin = require('./admin');\n\n  return new Admin(this, this.s.topology, this.s.promiseLibrary);\n};\n/**\n * The callback format for the collection method, must be used if strict is specified\n * @callback Db~collectionResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection instance.\n */\n\n/**\n * The callback format for an aggregation call\n * @callback Database~aggregationCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.\n */\n\n\nconst collectionKeys = ['pkFactory', 'readPreference', 'serializeFunctions', 'strict', 'readConcern', 'ignoreUndefined', 'promoteValues', 'promoteBuffers', 'promoteLongs'];\n/**\n * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you\n * can use it without a callback in the following way: `const collection = db.collection('mycollection');`\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {Db~collectionResultCallback} [callback] The collection result callback\n * @return {Collection} return the new Collection instance if not in strict mode\n */\n\nDb.prototype.collection = function (name, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  options = Object.assign({}, options); // Set the promise library\n\n  options.promiseLibrary = this.s.promiseLibrary; // If we have not set a collection level readConcern set the db level one\n\n  options.readConcern = options.readConcern ? new ReadConcern(options.readConcern.level) : this.readConcern; // Do we have ignoreUndefined set\n\n  if (this.s.options.ignoreUndefined) {\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  } // Merge in all needed options and ensure correct writeConcern merging from db level\n\n\n  options = mergeOptionsAndWriteConcern(options, this.s.options, collectionKeys, true); // Execute\n\n  if (options == null || !options.strict) {\n    try {\n      const collection = new Collection(this, this.s.topology, this.databaseName, name, this.s.pkFactory, options);\n      if (callback) callback(null, collection);\n      return collection;\n    } catch (err) {\n      if (err instanceof MongoError && callback) return callback(err);\n      throw err;\n    }\n  } // Strict mode\n\n\n  if (typeof callback !== 'function') {\n    throw toError(`A callback is required in strict mode. While getting collection ${name}`);\n  } // Did the user destroy the topology\n\n\n  if (this.serverConfig && this.serverConfig.isDestroyed()) {\n    return callback(new MongoError('topology was destroyed'));\n  }\n\n  const listCollectionOptions = Object.assign({}, options, {\n    nameOnly: true\n  }); // Strict mode\n\n  this.listCollections({\n    name: name\n  }, listCollectionOptions).toArray((err, collections) => {\n    if (err != null) return handleCallback(callback, err, null);\n    if (collections.length === 0) return handleCallback(callback, toError(`Collection ${name} does not exist. Currently in strict mode.`), null);\n\n    try {\n      return handleCallback(callback, null, new Collection(this, this.s.topology, this.databaseName, name, this.s.pkFactory, options));\n    } catch (err) {\n      return handleCallback(callback, err, null);\n    }\n  });\n};\n/**\n * Create a new collection on a server with the specified options. Use this to create capped collections.\n * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] DEPRECATED: Returns an error if the collection does not exist\n * @param {boolean} [options.capped=false] Create a capped collection.\n * @param {boolean} [options.autoIndexId=true] DEPRECATED: Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0\n * @param {number} [options.size] The size of the capped collection in bytes.\n * @param {number} [options.max] The maximum number of documents in the capped collection.\n * @param {number} [options.flags] Optional. Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag.\n * @param {object} [options.storageEngine] Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher.\n * @param {object} [options.validator] Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher.\n * @param {string} [options.validationLevel] Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher.\n * @param {string} [options.validationAction] Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher.\n * @param {object} [options.indexOptionDefaults] Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher.\n * @param {string} [options.viewOn] The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher.\n * @param {array} [options.pipeline] An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.createCollection = deprecateOptions({\n  name: 'Db.createCollection',\n  deprecatedOptions: ['autoIndexId', 'strict', 'w', 'wtimeout', 'j'],\n  optionsIndex: 1\n}, function (name, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;\n  options.readConcern = options.readConcern ? new ReadConcern(options.readConcern.level) : this.readConcern;\n  const createCollectionOperation = new CreateCollectionOperation(this, name, options);\n  return executeOperation(this.s.topology, createCollectionOperation, callback);\n});\n/**\n * Get all the db statistics.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {number} [options.scale] Divide the returned sizes by scale value.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\nDb.prototype.stats = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // Build command object\n\n  const commandObject = {\n    dbStats: true\n  }; // Check if we have the scale value\n\n  if (options['scale'] != null) commandObject['scale'] = options['scale']; // If we have a readPreference set\n\n  if (options.readPreference == null && this.s.readPreference) {\n    options.readPreference = this.s.readPreference;\n  }\n\n  const statsOperation = new CommandOperation(this, options, null, commandObject); // Execute the command\n\n  return executeOperation(this.s.topology, statsOperation, callback);\n};\n/**\n * Get the list of all collection information for the specified db.\n *\n * @method\n * @param {object} [filter={}] Query to filter collections by\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nameOnly=false] Since 4.0: If true, will only return the collection name in the response, and will omit additional info\n * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {CommandCursor}\n */\n\n\nDb.prototype.listCollections = function (filter, options) {\n  filter = filter || {};\n  options = options || {};\n  return new CommandCursor(this.s.topology, new ListCollectionsOperation(this, filter, options), options);\n};\n/**\n * Evaluate JavaScript on the server\n *\n * @method\n * @param {Code} code JavaScript to execute on server.\n * @param {(object|array)} parameters The parameters for the call.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaluation of the javascript.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @deprecated Eval is deprecated on MongoDB 3.2 and forward\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.eval = deprecate(function (code, parameters, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  parameters = args.length ? args.shift() : parameters;\n  options = args.length ? args.shift() || {} : {};\n  return executeLegacyOperation(this.s.topology, evaluate, [this, code, parameters, options, callback]);\n}, 'Db.eval is deprecated as of MongoDB version 3.2');\n/**\n * Rename a collection.\n *\n * @method\n * @param {string} fromCollection Name of current collection to rename.\n * @param {string} toCollection New name of of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\n\nDb.prototype.renameCollection = function (fromCollection, toCollection, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = Object.assign({}, options, {\n    readPreference: ReadPreference.PRIMARY\n  }); // Add return new collection\n\n  options.new_collection = true;\n  const renameOperation = new RenameOperation(this.collection(fromCollection), toCollection, options);\n  return executeOperation(this.s.topology, renameOperation, callback);\n};\n/**\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {string} name Name of collection to drop\n * @param {Object} [options] Optional settings\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.dropCollection = function (name, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const dropCollectionOperation = new DropCollectionOperation(this, name, options);\n  return executeOperation(this.s.topology, dropCollectionOperation, callback);\n};\n/**\n * Drop a database, removing it permanently from the server.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.dropDatabase = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const dropDatabaseOperation = new DropDatabaseOperation(this, options);\n  return executeOperation(this.s.topology, dropDatabaseOperation, callback);\n};\n/**\n * Fetch all collections for the current db.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionsResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.collections = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const collectionsOperation = new CollectionsOperation(this, options);\n  return executeOperation(this.s.topology, collectionsOperation, callback);\n};\n/**\n * Runs a command on the database as admin.\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.executeDbAdminCommand = function (selector, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  options.readPreference = ReadPreference.resolve(this, options);\n  const executeDbAdminCommandOperation = new ExecuteDbAdminCommandOperation(this, selector, options);\n  return executeOperation(this.s.topology, executeDbAdminCommandOperation, callback);\n};\n/**\n * Creates an index on the db and collection.\n * @method\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {(number|string)} [options.commitQuorum] (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes.\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.createIndex = function (name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options ? Object.assign({}, options) : {};\n  const createIndexesOperation = new CreateIndexesOperation(this, name, fieldOrSpec, options);\n  return executeOperation(this.s.topology, createIndexesOperation, callback);\n};\n/**\n * Ensures that an index exists, if it does not it creates it\n * @method\n * @deprecated since version 2.0\n * @param {string} name The index name\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.ensureIndex = deprecate(function (name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  return executeLegacyOperation(this.s.topology, ensureIndex, [this, name, fieldOrSpec, options, callback]);\n}, 'Db.ensureIndex is deprecated as of MongoDB version 3.0 / driver version 2.0');\n\nDb.prototype.addChild = function (db) {\n  if (this.s.parentDb) return this.s.parentDb.addChild(db);\n  this.s.children.push(db);\n};\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.addUser = function (username, password, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // Special case where there is no password ($external users)\n\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  const addUserOperation = new AddUserOperation(this, username, password, options);\n  return executeOperation(this.s.topology, addUserOperation, callback);\n};\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.removeUser = function (username, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const removeUserOperation = new RemoveUserOperation(this, username, options);\n  return executeOperation(this.s.topology, removeUserOperation, callback);\n};\n/**\n * Set the current profiling level of MongoDB\n *\n * @param {string} level The new profiling level (off, slow_only, all).\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.setProfilingLevel = function (level, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const setProfilingLevelOperation = new SetProfilingLevelOperation(this, level, options);\n  return executeOperation(this.s.topology, setProfilingLevelOperation, callback);\n};\n/**\n * Retrieve the current profiling information for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Query the system.profile collection directly.\n */\n\n\nDb.prototype.profilingInfo = deprecate(function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  return executeLegacyOperation(this.s.topology, profilingInfo, [this, options, callback]);\n}, 'Db.profilingInfo is deprecated. Query the system.profile collection directly.');\n/**\n * Retrieve the current profiling Level for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\nDb.prototype.profilingLevel = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const profilingLevelOperation = new ProfilingLevelOperation(this, options);\n  return executeOperation(this.s.topology, profilingLevelOperation, callback);\n};\n/**\n * Retrieves this collections index info.\n * @method\n * @param {string} name The name of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.full=false] Returns the full raw index information.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nDb.prototype.indexInformation = function (name, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const indexInformationOperation = new IndexInformationOperation(this, name, options);\n  return executeOperation(this.s.topology, indexInformationOperation, callback);\n};\n/**\n * Unref all sockets\n * @method\n */\n\n\nDb.prototype.unref = function () {\n  this.s.topology.unref();\n};\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\n * @method\n * @since 3.1.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\n\n\nDb.prototype.watch = function (pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {}; // Allow optionally not specifying a pipeline\n\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n/**\n * Return the db logger\n * @method\n * @return {Logger} return the db logger\n * @ignore\n */\n\n\nDb.prototype.getLogger = function () {\n  return this.s.logger;\n};\n/**\n * Db close event\n *\n * Emitted after a socket closed against a single server or mongos proxy.\n *\n * @event Db#close\n * @type {MongoError}\n */\n\n/**\n * Db reconnect event\n *\n *  * Server: Emitted when the driver has reconnected and re-authenticated.\n *  * ReplicaSet: N/A\n *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.\n *\n * @event Db#reconnect\n * @type {object}\n */\n\n/**\n * Db error event\n *\n * Emitted after an error occurred against a single server or mongos proxy.\n *\n * @event Db#error\n * @type {MongoError}\n */\n\n/**\n * Db timeout event\n *\n * Emitted after a socket timeout occurred against a single server or mongos proxy.\n *\n * @event Db#timeout\n * @type {MongoError}\n */\n\n/**\n * Db parseError event\n *\n * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.\n *\n * @event Db#parseError\n * @type {MongoError}\n */\n\n/**\n * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.\n *\n * * Server: Emitted when the driver has connected to the single server and has authenticated.\n * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.\n * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.\n *\n * @event Db#fullsetup\n * @type {Db}\n */\n// Constants\n\n\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nmodule.exports = Db;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/db.js"],"names":["EventEmitter","require","inherits","getSingleProperty","CommandCursor","handleCallback","filterOptions","toError","ReadPreference","MongoError","ObjectID","Logger","Collection","mergeOptionsAndWriteConcern","executeLegacyOperation","ChangeStream","deprecate","deprecateOptions","MongoDBNamespace","CONSTANTS","WriteConcern","ReadConcern","AggregationCursor","createListener","ensureIndex","evaluate","profilingInfo","validateDatabaseName","AggregateOperation","AddUserOperation","CollectionsOperation","CommandOperation","RunCommandOperation","CreateCollectionOperation","CreateIndexesOperation","DropCollectionOperation","DropDatabaseOperation","ExecuteDbAdminCommandOperation","IndexInformationOperation","ListCollectionsOperation","ProfilingLevelOperation","RemoveUserOperation","RenameOperation","SetProfilingLevelOperation","executeOperation","legalOptionNames","Db","databaseName","topology","options","call","promiseLibrary","Promise","s","dbCache","children","logger","bson","readPreference","fromOptions","bufferMaxEntries","parentDb","pkFactory","nativeParser","native_parser","noListener","readConcern","writeConcern","namespace","db","on","once","prototype","super_","apply","arguments","Object","defineProperty","enumerable","get","mode","primary","toString","command","callback","assign","commandOperation","aggregate","pipeline","cursor","admin","Admin","collectionKeys","collection","name","level","ignoreUndefined","strict","err","serverConfig","isDestroyed","listCollectionOptions","nameOnly","listCollections","toArray","collections","length","createCollection","deprecatedOptions","optionsIndex","createCollectionOperation","stats","commandObject","dbStats","statsOperation","filter","eval","code","parameters","args","Array","slice","pop","undefined","shift","renameCollection","fromCollection","toCollection","PRIMARY","new_collection","renameOperation","dropCollection","dropCollectionOperation","dropDatabase","dropDatabaseOperation","collectionsOperation","executeDbAdminCommand","selector","resolve","executeDbAdminCommandOperation","createIndex","fieldOrSpec","createIndexesOperation","addChild","push","addUser","username","password","addUserOperation","removeUser","removeUserOperation","setProfilingLevel","setProfilingLevelOperation","profilingLevel","profilingLevelOperation","indexInformation","indexInformationOperation","unref","watch","isArray","getLogger","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\nconst inherits = require('util').inherits;\nconst getSingleProperty = require('./utils').getSingleProperty;\nconst CommandCursor = require('./command_cursor');\nconst handleCallback = require('./utils').handleCallback;\nconst filterOptions = require('./utils').filterOptions;\nconst toError = require('./utils').toError;\nconst ReadPreference = require('./core').ReadPreference;\nconst MongoError = require('./core').MongoError;\nconst ObjectID = require('./core').ObjectID;\nconst Logger = require('./core').Logger;\nconst Collection = require('./collection');\nconst mergeOptionsAndWriteConcern = require('./utils').mergeOptionsAndWriteConcern;\nconst executeLegacyOperation = require('./utils').executeLegacyOperation;\nconst ChangeStream = require('./change_stream');\nconst deprecate = require('util').deprecate;\nconst deprecateOptions = require('./utils').deprecateOptions;\nconst MongoDBNamespace = require('./utils').MongoDBNamespace;\nconst CONSTANTS = require('./constants');\nconst WriteConcern = require('./write_concern');\nconst ReadConcern = require('./read_concern');\nconst AggregationCursor = require('./aggregation_cursor');\n\n// Operations\nconst createListener = require('./operations/db_ops').createListener;\nconst ensureIndex = require('./operations/db_ops').ensureIndex;\nconst evaluate = require('./operations/db_ops').evaluate;\nconst profilingInfo = require('./operations/db_ops').profilingInfo;\nconst validateDatabaseName = require('./operations/db_ops').validateDatabaseName;\n\nconst AggregateOperation = require('./operations/aggregate');\nconst AddUserOperation = require('./operations/add_user');\nconst CollectionsOperation = require('./operations/collections');\nconst CommandOperation = require('./operations/command');\nconst RunCommandOperation = require('./operations/run_command');\nconst CreateCollectionOperation = require('./operations/create_collection');\nconst CreateIndexesOperation = require('./operations/create_indexes');\nconst DropCollectionOperation = require('./operations/drop').DropCollectionOperation;\nconst DropDatabaseOperation = require('./operations/drop').DropDatabaseOperation;\nconst ExecuteDbAdminCommandOperation = require('./operations/execute_db_admin_command');\nconst IndexInformationOperation = require('./operations/index_information');\nconst ListCollectionsOperation = require('./operations/list_collections');\nconst ProfilingLevelOperation = require('./operations/profiling_level');\nconst RemoveUserOperation = require('./operations/remove_user');\nconst RenameOperation = require('./operations/rename');\nconst SetProfilingLevelOperation = require('./operations/set_profiling_level');\n\nconst executeOperation = require('./operations/execute_operation');\n\n/**\n * @fileOverview The **Db** class is a class that represents a MongoDB Database.\n *\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n */\n\n// Allowed parameters\nconst legalOptionNames = [\n  'w',\n  'wtimeout',\n  'fsync',\n  'j',\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'bufferMaxEntries',\n  'authSource',\n  'ignoreUndefined',\n  'promoteLongs',\n  'promiseLibrary',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'parentDb',\n  'noListener',\n  'loggerLevel',\n  'logger',\n  'promoteBuffers',\n  'promoteLongs',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/**\n * Creates a new Db instance\n * @class\n * @param {string} databaseName The name of the database this instance represents.\n * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.\n * @param {object} [options] Optional settings.\n * @param {string} [options.authSource] If the database authentication is dependent on another databaseName.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.\n * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database\n * @property {string} databaseName The name of the database this instance represents.\n * @property {object} options The options associated with the db instance.\n * @property {boolean} native_parser The current value of the parameter native_parser.\n * @property {boolean} slaveOk The current slaveOk value for the db instance.\n * @property {object} writeConcern The current write concern values.\n * @property {object} topology Access the topology object (single server, replicaset or mongos).\n * @fires Db#close\n * @fires Db#reconnect\n * @fires Db#error\n * @fires Db#timeout\n * @fires Db#parseError\n * @fires Db#fullsetup\n * @return {Db} a Db instance.\n */\nfunction Db(databaseName, topology, options) {\n  options = options || {};\n  if (!(this instanceof Db)) return new Db(databaseName, topology, options);\n  EventEmitter.call(this);\n\n  // Get the promiseLibrary\n  const promiseLibrary = options.promiseLibrary || Promise;\n\n  // Filter the options\n  options = filterOptions(options, legalOptionNames);\n\n  // Ensure we put the promiseLib in the options\n  options.promiseLibrary = promiseLibrary;\n\n  // Internal state of the db object\n  this.s = {\n    // DbCache\n    dbCache: {},\n    // Children db's\n    children: [],\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Logger instance\n    logger: Logger('Db', options),\n    // Get the bson parser\n    bson: topology ? topology.bson : null,\n    // Unpack read preference\n    readPreference: ReadPreference.fromOptions(options),\n    // Set buffermaxEntries\n    bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : -1,\n    // Parent db (if chained)\n    parentDb: options.parentDb || null,\n    // Set up the primary key factory or fallback to ObjectID\n    pkFactory: options.pkFactory || ObjectID,\n    // Get native parser\n    nativeParser: options.nativeParser || options.native_parser,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // No listener\n    noListener: typeof options.noListener === 'boolean' ? options.noListener : false,\n    // ReadConcern\n    readConcern: ReadConcern.fromOptions(options),\n    writeConcern: WriteConcern.fromOptions(options),\n    // Namespace\n    namespace: new MongoDBNamespace(databaseName)\n  };\n\n  // Ensure we have a valid db name\n  validateDatabaseName(databaseName);\n\n  // Add a read Only property\n  getSingleProperty(this, 'serverConfig', this.s.topology);\n  getSingleProperty(this, 'bufferMaxEntries', this.s.bufferMaxEntries);\n  getSingleProperty(this, 'databaseName', this.s.namespace.db);\n\n  // This is a child db, do not register any listeners\n  if (options.parentDb) return;\n  if (this.s.noListener) return;\n\n  // Add listeners\n  topology.on('error', createListener(this, 'error', this));\n  topology.on('timeout', createListener(this, 'timeout', this));\n  topology.on('close', createListener(this, 'close', this));\n  topology.on('parseError', createListener(this, 'parseError', this));\n  topology.once('open', createListener(this, 'open', this));\n  topology.once('fullsetup', createListener(this, 'fullsetup', this));\n  topology.once('all', createListener(this, 'all', this));\n  topology.on('reconnect', createListener(this, 'reconnect', this));\n}\n\ninherits(Db, EventEmitter);\n\nDb.prototype.on = deprecate(function() {\n  return Db.super_.prototype.on.apply(this, arguments);\n}, 'Listening to events on the Db class has been deprecated and will be removed in the next major version.');\n\nDb.prototype.once = deprecate(function() {\n  return Db.super_.prototype.once.apply(this, arguments);\n}, 'Listening to events on the Db class has been deprecated and will be removed in the next major version.');\n\n// Topology\nObject.defineProperty(Db.prototype, 'topology', {\n  enumerable: true,\n  get: function() {\n    return this.s.topology;\n  }\n});\n\n// Options\nObject.defineProperty(Db.prototype, 'options', {\n  enumerable: true,\n  get: function() {\n    return this.s.options;\n  }\n});\n\n// slaveOk specified\nObject.defineProperty(Db.prototype, 'slaveOk', {\n  enumerable: true,\n  get: function() {\n    if (\n      this.s.options.readPreference != null &&\n      (this.s.options.readPreference !== 'primary' ||\n        this.s.options.readPreference.mode !== 'primary')\n    ) {\n      return true;\n    }\n    return false;\n  }\n});\n\nObject.defineProperty(Db.prototype, 'readConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.readConcern;\n  }\n});\n\nObject.defineProperty(Db.prototype, 'readPreference', {\n  enumerable: true,\n  get: function() {\n    if (this.s.readPreference == null) {\n      // TODO: check client\n      return ReadPreference.primary;\n    }\n\n    return this.s.readPreference;\n  }\n});\n\n// get the write Concern\nObject.defineProperty(Db.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.writeConcern;\n  }\n});\n\nObject.defineProperty(Db.prototype, 'namespace', {\n  enumerable: true,\n  get: function() {\n    return this.s.namespace.toString();\n  }\n});\n\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.command = function(command, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options);\n\n  const commandOperation = new RunCommandOperation(this, command, options);\n\n  return executeOperation(this.s.topology, commandOperation, callback);\n};\n\n/**\n * Execute an aggregation framework pipeline against the database, needs MongoDB >= 3.6\n * @method\n * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n * @param {number} [options.cursor.batchSize=1000] Deprecated. Use `options.batchSize`\n * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.\n * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {string} [options.comment] Add a comment to an aggregation command\n * @param {string|object} [options.hint] Add an index selection hint to an aggregation command\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Database~aggregationCallback} callback The command result callback\n * @return {(null|AggregationCursor)}\n */\nDb.prototype.aggregate = function(pipeline, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // If we have no options or callback we are doing\n  // a cursor based aggregation\n  if (options == null && callback == null) {\n    options = {};\n  }\n\n  const cursor = new AggregationCursor(\n    this.s.topology,\n    new AggregateOperation(this, pipeline, options),\n    options\n  );\n\n  // TODO: remove this when NODE-2074 is resolved\n  if (typeof callback === 'function') {\n    callback(null, cursor);\n    return;\n  }\n\n  return cursor;\n};\n\n/**\n * Return the Admin db instance\n * @method\n * @return {Admin} return the new Admin db instance\n */\nDb.prototype.admin = function() {\n  const Admin = require('./admin');\n\n  return new Admin(this, this.s.topology, this.s.promiseLibrary);\n};\n\n/**\n * The callback format for the collection method, must be used if strict is specified\n * @callback Db~collectionResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection instance.\n */\n\n/**\n * The callback format for an aggregation call\n * @callback Database~aggregationCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.\n */\n\nconst collectionKeys = [\n  'pkFactory',\n  'readPreference',\n  'serializeFunctions',\n  'strict',\n  'readConcern',\n  'ignoreUndefined',\n  'promoteValues',\n  'promoteBuffers',\n  'promoteLongs'\n];\n\n/**\n * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you\n * can use it without a callback in the following way: `const collection = db.collection('mycollection');`\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {Db~collectionResultCallback} [callback] The collection result callback\n * @return {Collection} return the new Collection instance if not in strict mode\n */\nDb.prototype.collection = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  options = Object.assign({}, options);\n\n  // Set the promise library\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  // If we have not set a collection level readConcern set the db level one\n  options.readConcern = options.readConcern\n    ? new ReadConcern(options.readConcern.level)\n    : this.readConcern;\n\n  // Do we have ignoreUndefined set\n  if (this.s.options.ignoreUndefined) {\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  // Merge in all needed options and ensure correct writeConcern merging from db level\n  options = mergeOptionsAndWriteConcern(options, this.s.options, collectionKeys, true);\n\n  // Execute\n  if (options == null || !options.strict) {\n    try {\n      const collection = new Collection(\n        this,\n        this.s.topology,\n        this.databaseName,\n        name,\n        this.s.pkFactory,\n        options\n      );\n      if (callback) callback(null, collection);\n      return collection;\n    } catch (err) {\n      if (err instanceof MongoError && callback) return callback(err);\n      throw err;\n    }\n  }\n\n  // Strict mode\n  if (typeof callback !== 'function') {\n    throw toError(`A callback is required in strict mode. While getting collection ${name}`);\n  }\n\n  // Did the user destroy the topology\n  if (this.serverConfig && this.serverConfig.isDestroyed()) {\n    return callback(new MongoError('topology was destroyed'));\n  }\n\n  const listCollectionOptions = Object.assign({}, options, { nameOnly: true });\n\n  // Strict mode\n  this.listCollections({ name: name }, listCollectionOptions).toArray((err, collections) => {\n    if (err != null) return handleCallback(callback, err, null);\n    if (collections.length === 0)\n      return handleCallback(\n        callback,\n        toError(`Collection ${name} does not exist. Currently in strict mode.`),\n        null\n      );\n\n    try {\n      return handleCallback(\n        callback,\n        null,\n        new Collection(this, this.s.topology, this.databaseName, name, this.s.pkFactory, options)\n      );\n    } catch (err) {\n      return handleCallback(callback, err, null);\n    }\n  });\n};\n\n/**\n * Create a new collection on a server with the specified options. Use this to create capped collections.\n * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] DEPRECATED: Returns an error if the collection does not exist\n * @param {boolean} [options.capped=false] Create a capped collection.\n * @param {boolean} [options.autoIndexId=true] DEPRECATED: Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0\n * @param {number} [options.size] The size of the capped collection in bytes.\n * @param {number} [options.max] The maximum number of documents in the capped collection.\n * @param {number} [options.flags] Optional. Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag.\n * @param {object} [options.storageEngine] Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher.\n * @param {object} [options.validator] Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher.\n * @param {string} [options.validationLevel] Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher.\n * @param {string} [options.validationAction] Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher.\n * @param {object} [options.indexOptionDefaults] Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher.\n * @param {string} [options.viewOn] The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher.\n * @param {array} [options.pipeline] An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.createCollection = deprecateOptions(\n  {\n    name: 'Db.createCollection',\n    deprecatedOptions: ['autoIndexId', 'strict', 'w', 'wtimeout', 'j'],\n    optionsIndex: 1\n  },\n  function(name, options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n    options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;\n    options.readConcern = options.readConcern\n      ? new ReadConcern(options.readConcern.level)\n      : this.readConcern;\n    const createCollectionOperation = new CreateCollectionOperation(this, name, options);\n\n    return executeOperation(this.s.topology, createCollectionOperation, callback);\n  }\n);\n\n/**\n * Get all the db statistics.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {number} [options.scale] Divide the returned sizes by scale value.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.stats = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Build command object\n  const commandObject = { dbStats: true };\n  // Check if we have the scale value\n  if (options['scale'] != null) commandObject['scale'] = options['scale'];\n\n  // If we have a readPreference set\n  if (options.readPreference == null && this.s.readPreference) {\n    options.readPreference = this.s.readPreference;\n  }\n\n  const statsOperation = new CommandOperation(this, options, null, commandObject);\n\n  // Execute the command\n  return executeOperation(this.s.topology, statsOperation, callback);\n};\n\n/**\n * Get the list of all collection information for the specified db.\n *\n * @method\n * @param {object} [filter={}] Query to filter collections by\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nameOnly=false] Since 4.0: If true, will only return the collection name in the response, and will omit additional info\n * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {CommandCursor}\n */\nDb.prototype.listCollections = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  return new CommandCursor(\n    this.s.topology,\n    new ListCollectionsOperation(this, filter, options),\n    options\n  );\n};\n\n/**\n * Evaluate JavaScript on the server\n *\n * @method\n * @param {Code} code JavaScript to execute on server.\n * @param {(object|array)} parameters The parameters for the call.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaluation of the javascript.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @deprecated Eval is deprecated on MongoDB 3.2 and forward\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.eval = deprecate(function(code, parameters, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  parameters = args.length ? args.shift() : parameters;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeLegacyOperation(this.s.topology, evaluate, [\n    this,\n    code,\n    parameters,\n    options,\n    callback\n  ]);\n}, 'Db.eval is deprecated as of MongoDB version 3.2');\n\n/**\n * Rename a collection.\n *\n * @method\n * @param {string} fromCollection Name of current collection to rename.\n * @param {string} toCollection New name of of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n  // Add return new collection\n  options.new_collection = true;\n\n  const renameOperation = new RenameOperation(\n    this.collection(fromCollection),\n    toCollection,\n    options\n  );\n\n  return executeOperation(this.s.topology, renameOperation, callback);\n};\n\n/**\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {string} name Name of collection to drop\n * @param {Object} [options] Optional settings\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.dropCollection = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const dropCollectionOperation = new DropCollectionOperation(this, name, options);\n\n  return executeOperation(this.s.topology, dropCollectionOperation, callback);\n};\n\n/**\n * Drop a database, removing it permanently from the server.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.dropDatabase = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const dropDatabaseOperation = new DropDatabaseOperation(this, options);\n\n  return executeOperation(this.s.topology, dropDatabaseOperation, callback);\n};\n\n/**\n * Fetch all collections for the current db.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionsResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.collections = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const collectionsOperation = new CollectionsOperation(this, options);\n\n  return executeOperation(this.s.topology, collectionsOperation, callback);\n};\n\n/**\n * Runs a command on the database as admin.\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.executeDbAdminCommand = function(selector, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  options.readPreference = ReadPreference.resolve(this, options);\n\n  const executeDbAdminCommandOperation = new ExecuteDbAdminCommandOperation(\n    this,\n    selector,\n    options\n  );\n\n  return executeOperation(this.s.topology, executeDbAdminCommandOperation, callback);\n};\n\n/**\n * Creates an index on the db and collection.\n * @method\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {(number|string)} [options.commitQuorum] (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes.\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.createIndex = function(name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? Object.assign({}, options) : {};\n\n  const createIndexesOperation = new CreateIndexesOperation(this, name, fieldOrSpec, options);\n\n  return executeOperation(this.s.topology, createIndexesOperation, callback);\n};\n\n/**\n * Ensures that an index exists, if it does not it creates it\n * @method\n * @deprecated since version 2.0\n * @param {string} name The index name\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.ensureIndex = deprecate(function(name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.s.topology, ensureIndex, [\n    this,\n    name,\n    fieldOrSpec,\n    options,\n    callback\n  ]);\n}, 'Db.ensureIndex is deprecated as of MongoDB version 3.0 / driver version 2.0');\n\nDb.prototype.addChild = function(db) {\n  if (this.s.parentDb) return this.s.parentDb.addChild(db);\n  this.s.children.push(db);\n};\n\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.addUser = function(username, password, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Special case where there is no password ($external users)\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  const addUserOperation = new AddUserOperation(this, username, password, options);\n\n  return executeOperation(this.s.topology, addUserOperation, callback);\n};\n\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.removeUser = function(username, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const removeUserOperation = new RemoveUserOperation(this, username, options);\n\n  return executeOperation(this.s.topology, removeUserOperation, callback);\n};\n\n/**\n * Set the current profiling level of MongoDB\n *\n * @param {string} level The new profiling level (off, slow_only, all).\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.setProfilingLevel = function(level, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const setProfilingLevelOperation = new SetProfilingLevelOperation(this, level, options);\n\n  return executeOperation(this.s.topology, setProfilingLevelOperation, callback);\n};\n\n/**\n * Retrieve the current profiling information for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Query the system.profile collection directly.\n */\nDb.prototype.profilingInfo = deprecate(function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.s.topology, profilingInfo, [this, options, callback]);\n}, 'Db.profilingInfo is deprecated. Query the system.profile collection directly.');\n\n/**\n * Retrieve the current profiling Level for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.profilingLevel = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const profilingLevelOperation = new ProfilingLevelOperation(this, options);\n\n  return executeOperation(this.s.topology, profilingLevelOperation, callback);\n};\n\n/**\n * Retrieves this collections index info.\n * @method\n * @param {string} name The name of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.full=false] Returns the full raw index information.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.indexInformation = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const indexInformationOperation = new IndexInformationOperation(this, name, options);\n\n  return executeOperation(this.s.topology, indexInformationOperation, callback);\n};\n\n/**\n * Unref all sockets\n * @method\n */\nDb.prototype.unref = function() {\n  this.s.topology.unref();\n};\n\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\n * @method\n * @since 3.1.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\nDb.prototype.watch = function(pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {};\n\n  // Allow optionally not specifying a pipeline\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n\n/**\n * Return the db logger\n * @method\n * @return {Logger} return the db logger\n * @ignore\n */\nDb.prototype.getLogger = function() {\n  return this.s.logger;\n};\n\n/**\n * Db close event\n *\n * Emitted after a socket closed against a single server or mongos proxy.\n *\n * @event Db#close\n * @type {MongoError}\n */\n\n/**\n * Db reconnect event\n *\n *  * Server: Emitted when the driver has reconnected and re-authenticated.\n *  * ReplicaSet: N/A\n *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.\n *\n * @event Db#reconnect\n * @type {object}\n */\n\n/**\n * Db error event\n *\n * Emitted after an error occurred against a single server or mongos proxy.\n *\n * @event Db#error\n * @type {MongoError}\n */\n\n/**\n * Db timeout event\n *\n * Emitted after a socket timeout occurred against a single server or mongos proxy.\n *\n * @event Db#timeout\n * @type {MongoError}\n */\n\n/**\n * Db parseError event\n *\n * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.\n *\n * @event Db#parseError\n * @type {MongoError}\n */\n\n/**\n * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.\n *\n * * Server: Emitted when the driver has connected to the single server and has authenticated.\n * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.\n * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.\n *\n * @event Db#fullsetup\n * @type {Db}\n */\n\n// Constants\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\nmodule.exports = Db;\n"]},"metadata":{},"sourceType":"script"}