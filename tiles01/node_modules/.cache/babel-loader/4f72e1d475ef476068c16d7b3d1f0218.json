{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\karen\\\\bacheloroppgaven\\\\Tiles\\\\tiles01\\\\src\\\\Components\\\\AudioAnimations.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport vibrateSound from '../Audio/feedback/synth-vibe.wav';\nimport dropSound from '../Audio/feedback/goblin-fall.mp3'; // Adding sounds to the different animations provided in AnimationsPage.jsx\n\nfunction AudioAnimations(props) {\n  _s();\n\n  const [triggerCard] = useState(props.triggerCard); // props to pass to AnimationsPreview.jsx\n\n  const [thingCard] = useState(props.thingCard); // props to pass to AnimationsPreview.jsx\n\n  const [feedbackCard] = useState(props.feedbackCard); // props to pass to AnimationsPreview.jsx\n\n  var srcForSound;\n  var audioType = 'audio/'; // Check which cards are picked by the user, and match the audio with each card (that has audio associated to it)\n\n  function matchAudioToCards() {\n    if (feedbackCard === 'vibrate') {\n      return [vibrateSound, 'wav'];\n    } else if (triggerCard === 'drop') {\n      return [dropSound, 'mp3'];\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n\n    /* Audio starts playing immediately, and is in a loop so it will never stop playing */\n\n    /*<audio controls autoPlay loop> \r\n        <source src={matchAudioToCards()[0]} type={audioType + matchAudioToCards()[1]}/>\r\n    </audio>*/\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        id: \"player\",\n        src: vibrateSound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onclick: \"document.getElementById('player').play()\",\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onclick: \"document.getElementById('player').pause()\",\n          children: \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onclick: \"document.getElementById('player').muted=!document.getElementById('player').muted\",\n          children: \"Mute/ Unmute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  );\n}\n\n_s(AudioAnimations, \"CjcveqJIEJWbceupU/zq6JURvvE=\");\n\n_c = AudioAnimations;\nexport default AudioAnimations;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnimations\");","map":{"version":3,"sources":["C:/Users/karen/bacheloroppgaven/Tiles/tiles01/src/Components/AudioAnimations.jsx"],"names":["React","useState","vibrateSound","dropSound","AudioAnimations","props","triggerCard","thingCard","feedbackCard","srcForSound","audioType","matchAudioToCards"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,SAAP,MAAsB,mCAAtB,C,CAEA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC5B,QAAM,CAACC,WAAD,IAAgBL,QAAQ,CAACI,KAAK,CAACC,WAAP,CAA9B,CAD4B,CACsB;;AAClD,QAAM,CAACC,SAAD,IAAcN,QAAQ,CAACI,KAAK,CAACE,SAAP,CAA5B,CAF4B,CAEkB;;AAC9C,QAAM,CAACC,YAAD,IAAiBP,QAAQ,CAACI,KAAK,CAACG,YAAP,CAA/B,CAH4B,CAGwB;;AACpD,MAAIC,WAAJ;AACA,MAAIC,SAAS,GAAG,QAAhB,CAL4B,CAO5B;;AACA,WAASC,iBAAT,GAA6B;AACzB,QAAIH,YAAY,KAAK,SAArB,EAAgC;AAC5B,aAAO,CAACN,YAAD,EAAe,KAAf,CAAP;AACH,KAFD,MAEO,IAAII,WAAW,KAAK,MAApB,EAA4B;AAC/B,aAAO,CAACH,SAAD,EAAY,KAAZ,CAAP;AACH;AACJ;;AAED;AAAA;;AACQ;;AACA;AACZ;AACA;AACY;AAAA,8BACI;AAAO,QAAA,EAAE,EAAC,QAAV;AAAmB,QAAA,GAAG,EAAED;AAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACI;AAAQ,UAAA,OAAO,EAAC,0CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAC,2CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,OAAO,EAAC,kFAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AALR;AAcH;;GA9BQE,e;;KAAAA,e;AAgCT,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport vibrateSound from '../Audio/feedback/synth-vibe.wav'\r\nimport dropSound from '../Audio/feedback/goblin-fall.mp3'\r\n\r\n// Adding sounds to the different animations provided in AnimationsPage.jsx\r\nfunction AudioAnimations(props) {\r\n    const [triggerCard] = useState(props.triggerCard) // props to pass to AnimationsPreview.jsx\r\n    const [thingCard] = useState(props.thingCard) // props to pass to AnimationsPreview.jsx\r\n    const [feedbackCard] = useState(props.feedbackCard) // props to pass to AnimationsPreview.jsx\r\n    var srcForSound;\r\n    var audioType = 'audio/'\r\n\r\n    // Check which cards are picked by the user, and match the audio with each card (that has audio associated to it)\r\n    function matchAudioToCards() {\r\n        if (feedbackCard === 'vibrate') {\r\n            return [vibrateSound, 'wav'] \r\n        } else if (triggerCard === 'drop') {\r\n            return [dropSound, 'mp3']\r\n        }\r\n    }\r\n\r\n    return (\r\n            /* Audio starts playing immediately, and is in a loop so it will never stop playing */\r\n            /*<audio controls autoPlay loop> \r\n                <source src={matchAudioToCards()[0]} type={audioType + matchAudioToCards()[1]}/>\r\n            </audio>*/\r\n            <div>\r\n                <audio id=\"player\" src={vibrateSound} ></audio>\r\n                <div>\r\n                    <button onclick=\"document.getElementById('player').play()\">Play</button>\r\n                    <button onclick=\"document.getElementById('player').pause()\">Pause</button>\r\n                    <button onclick=\"document.getElementById('player').muted=!document.getElementById('player').muted\">Mute/ Unmute</button>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default AudioAnimations;"]},"metadata":{},"sourceType":"module"}