{"ast":null,"code":"'use strict';\n\nconst FindAndModifyOperation = require('./find_and_modify');\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = typeof options.returnOriginal === 'boolean' ? !options.returnOriginal : false;\n    finalOptions.upsert = typeof options.upsert === 'boolean' ? options.upsert : false;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new TypeError('Update parameter must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, update, finalOptions);\n  }\n\n}\n\nmodule.exports = FindOneAndUpdateOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/find_one_and_update.js"],"names":["FindAndModifyOperation","require","hasAtomicOperators","FindOneAndUpdateOperation","constructor","collection","filter","update","options","finalOptions","Object","assign","fields","projection","new","returnOriginal","upsert","TypeError","sort","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,mBAAD,CAAtC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,kBAA/C;;AAEA,MAAMC,yBAAN,SAAwCH,sBAAxC,CAA+D;AAC7DI,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AAC/C;AACA,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAArB;AACAC,IAAAA,YAAY,CAACG,MAAb,GAAsBJ,OAAO,CAACK,UAA9B;AACAJ,IAAAA,YAAY,CAACF,MAAb,GAAsB,IAAtB;AACAE,IAAAA,YAAY,CAACK,GAAb,GACE,OAAON,OAAO,CAACO,cAAf,KAAkC,SAAlC,GAA8C,CAACP,OAAO,CAACO,cAAvD,GAAwE,KAD1E;AAEAN,IAAAA,YAAY,CAACO,MAAb,GAAsB,OAAOR,OAAO,CAACQ,MAAf,KAA0B,SAA1B,GAAsCR,OAAO,CAACQ,MAA9C,GAAuD,KAA7E;;AAEA,QAAIV,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;AAChD,YAAM,IAAIW,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAIV,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;AAChD,YAAM,IAAIU,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAI,CAACf,kBAAkB,CAACK,MAAD,CAAvB,EAAiC;AAC/B,YAAM,IAAIU,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,UAAMZ,UAAN,EAAkBC,MAAlB,EAA0BG,YAAY,CAACS,IAAvC,EAA6CX,MAA7C,EAAqDE,YAArD;AACD;;AAvB4D;;AA0B/DU,MAAM,CAACC,OAAP,GAAiBjB,yBAAjB","sourcesContent":["'use strict';\n\nconst FindAndModifyOperation = require('./find_and_modify');\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new =\n      typeof options.returnOriginal === 'boolean' ? !options.returnOriginal : false;\n    finalOptions.upsert = typeof options.upsert === 'boolean' ? options.upsert : false;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new TypeError('Update parameter must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, update, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndUpdateOperation;\n"]},"metadata":{},"sourceType":"script"}