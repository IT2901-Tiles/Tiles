{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\StuartGO\\\\projects\\\\bachelorOppgave\\\\Tiles\\\\tiles01\\\\src\\\\Components\\\\FormFieldAnimationPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nfunction FormFieldAnimationPage(props) {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [triggerCard] = useState(props.triggerCard); // props to pass to AnimationsPreview.jsx\n\n  const [thingCard] = useState(props.thingCard); // props to pass to AnimationsPreview.jsx\n\n  const [feedbackCard] = useState(props.feedbackCard); // props to pass to AnimationsPreview.jsx\n\n  let outputStandardText = `Cards chosen:\\n- Trigger: ${triggerCard}\\n- Thing: ${thingCard}\\n- Feedback: ${feedbackCard}\\n\\nYour idea:\\n- `; // passed as first parameter in the downloadFile Blob\n  // The following function gathers the content from the textarea and inserts it into a external txt-file\n\n  function downloadFile() {\n    sendIdeaRequest();\n    let userInputValue; // will change depending on the user writes something or not \n\n    if (document.getElementById(\"textBoxAnimationPage\").value === \"\") {\n      // if user does not write anything in the textarea\n      userInputValue = \"Oops! Looks like no brilliant ideas were written down...\";\n    } else {\n      // if the user writes something in the textare\n      userInputValue = document.getElementById(\"textBoxAnimationPage\").value;\n    }\n\n    const htmlElement = document.createElement(\"a\"); // creates an \"a\" element in the html page, where we'll \"store\" the value of the user input\n\n    const valueInput = new Blob([outputStandardText + userInputValue], {\n      type: 'text/plain'\n    }); // value of txt file must be passed in the first parameter of Blob\n\n    htmlElement.href = URL.createObjectURL(valueInput);\n    htmlElement.download = \"tiles.txt\";\n    document.body.appendChild(htmlElement);\n    htmlElement.click();\n  } // Will fix the position when the animations are ready\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textAreaAnimationPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"textBoxAnimationPage\",\n      placeholder: \"Write your idea here...\",\n      onChange: newInput => setInput(newInput.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadFile,\n      className: \"textButtonAnimationPage\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormFieldAnimationPage, \"EGLpom2IiXn86x0U18pG/DqP36w=\");\n\n_c = FormFieldAnimationPage;\n\nfunction sendIdeaRequest() {\n  fetch('localhost:8484/add_idea', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"arrfa\": \"ADSs\"\n    })\n  }).then(response => response.json()).then(data => {\n    window.alert(data); //Do anything else like Toast etc.\n  });\n}\n\nexport default FormFieldAnimationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormFieldAnimationPage\");","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/src/Components/FormFieldAnimationPage.jsx"],"names":["React","useState","FormFieldAnimationPage","props","input","setInput","triggerCard","thingCard","feedbackCard","outputStandardText","downloadFile","sendIdeaRequest","userInputValue","document","getElementById","value","htmlElement","createElement","valueInput","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","newInput","target","fetch","method","headers","JSON","stringify","then","response","json","data","window","alert"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAGA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,WAAD,IAAgBL,QAAQ,CAACE,KAAK,CAACG,WAAP,CAA9B,CAFmC,CAEe;;AAClD,QAAM,CAACC,SAAD,IAAcN,QAAQ,CAACE,KAAK,CAACI,SAAP,CAA5B,CAHmC,CAGW;;AAC9C,QAAM,CAACC,YAAD,IAAiBP,QAAQ,CAACE,KAAK,CAACK,YAAP,CAA/B,CAJmC,CAIiB;;AACpD,MAAIC,kBAAkB,GAAI,6BAA4BH,WAAY,cAAaC,SAAU,iBAAgBC,YAAa,oBAAtH,CALmC,CAKuG;AAE1I;;AACA,WAASE,YAAT,GAAwB;AACpBC,IAAAA,eAAe;AACf,QAAIC,cAAJ,CAFoB,CAED;;AACnB,QAAIC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,EAAgDC,KAAhD,KAA0D,EAA9D,EAAkE;AAAE;AAChEH,MAAAA,cAAc,GAAG,0DAAjB;AACH,KAFD,MAEO;AAAE;AACLA,MAAAA,cAAc,GAAGC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,EAAgDC,KAAjE;AACH;;AACD,UAAMC,WAAW,GAAGH,QAAQ,CAACI,aAAT,CAAuB,GAAvB,CAApB,CARoB,CAQ4B;;AAChD,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,CAACV,kBAAkB,GAAGG,cAAtB,CAAT,EAAgD;AAACQ,MAAAA,IAAI,EAAE;AAAP,KAAhD,CAAnB,CAToB,CASqE;;AACzFJ,IAAAA,WAAW,CAACK,IAAZ,GAAmBC,GAAG,CAACC,eAAJ,CAAoBL,UAApB,CAAnB;AACAF,IAAAA,WAAW,CAACQ,QAAZ,GAAuB,WAAvB;AACAX,IAAAA,QAAQ,CAACY,IAAT,CAAcC,WAAd,CAA0BV,WAA1B;AACAA,IAAAA,WAAW,CAACW,KAAZ;AACH,GAtBkC,CAwBnC;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,4BACI;AAAU,MAAA,EAAE,EAAC,sBAAb;AAAoC,MAAA,WAAW,EAAC,yBAAhD;AAA0E,MAAA,QAAQ,EAAEC,QAAQ,IAAIvB,QAAQ,CAACuB,QAAQ,CAACC,MAAT,CAAgBd,KAAjB;AAAxG;AAAA;AAAA;AAAA;AAAA,YADJ,eAEQ;AAAQ,MAAA,OAAO,EAAEL,YAAjB;AAA+B,MAAA,SAAS,EAAC,yBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA/BQR,sB;;KAAAA,sB;;AAkCT,SAASS,eAAT,GAA0B;AACtBmB,EAAAA,KAAK,CAAC,yBAAD,EAA4B;AAC/BC,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAFsB;AAG/BP,IAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAe;AACnB,eAAQ;AADW,KAAf;AAHyB,GAA5B,CAAL,CAOGC,IAPH,CAOQC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EAPlB,EAOmCF,IAPnC,CAOwCG,IAAI,IAAE;AACzCC,IAAAA,MAAM,CAACC,KAAP,CAAaF,IAAb,EADyC,CAEzC;AACR,GAVG;AAWH;;AAKD,eAAepC,sBAAf","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nfunction FormFieldAnimationPage(props) {\r\n    const [input, setInput] = useState('')\r\n    const [triggerCard] = useState(props.triggerCard) // props to pass to AnimationsPreview.jsx\r\n    const [thingCard] = useState(props.thingCard) // props to pass to AnimationsPreview.jsx\r\n    const [feedbackCard] = useState(props.feedbackCard) // props to pass to AnimationsPreview.jsx\r\n    let outputStandardText = `Cards chosen:\\n- Trigger: ${triggerCard}\\n- Thing: ${thingCard}\\n- Feedback: ${feedbackCard}\\n\\nYour idea:\\n- ` // passed as first parameter in the downloadFile Blob\r\n\r\n    // The following function gathers the content from the textarea and inserts it into a external txt-file\r\n    function downloadFile() {\r\n        sendIdeaRequest()\r\n        let userInputValue // will change depending on the user writes something or not \r\n        if (document.getElementById(\"textBoxAnimationPage\").value === \"\") { // if user does not write anything in the textarea\r\n            userInputValue = \"Oops! Looks like no brilliant ideas were written down...\" \r\n        } else { // if the user writes something in the textare\r\n            userInputValue = document.getElementById(\"textBoxAnimationPage\").value\r\n        }\r\n        const htmlElement = document.createElement(\"a\") // creates an \"a\" element in the html page, where we'll \"store\" the value of the user input\r\n        const valueInput = new Blob([outputStandardText + userInputValue], {type: 'text/plain'}) // value of txt file must be passed in the first parameter of Blob\r\n        htmlElement.href = URL.createObjectURL(valueInput)\r\n        htmlElement.download = \"tiles.txt\"\r\n        document.body.appendChild(htmlElement)\r\n        htmlElement.click()\r\n    }\r\n\r\n    // Will fix the position when the animations are ready\r\n    return (\r\n        <div className=\"textAreaAnimationPage\">\r\n            <textarea id=\"textBoxAnimationPage\" placeholder=\"Write your idea here...\" onChange={newInput => setInput(newInput.target.value)}/>\r\n                <button onClick={downloadFile} className=\"textButtonAnimationPage\">Save</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction sendIdeaRequest(){\r\n    fetch('localhost:8484/add_idea', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        \"arrfa\":\"ADSs\"\r\n\r\n      })\r\n    }).then(response=>response.json()).then(data=>{\r\n         window.alert(data)\r\n         //Do anything else like Toast etc.\r\n})\r\n}\r\n\r\n\r\n\r\n\r\nexport default FormFieldAnimationPage"]},"metadata":{},"sourceType":"module"}