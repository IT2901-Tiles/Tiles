{"ast":null,"code":"'use strict';\n\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n\n        if (message.errorLabels) {\n          this[kErrorLabels] = new Set(message.errorLabels);\n        }\n\n        for (var name in message) {\n          if (name === 'errorLabels' || name === 'errmsg') {\n            continue;\n          }\n\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n  }\n  /**\n   * Legacy name for server error responses\n   */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n\n\n  static create(options) {\n    return new MongoError(options);\n  }\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n\n}\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\n\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\n\n\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n    this.name = 'MongoNetworkError';\n\n    if (options && options.beforeHandshake === true) {\n      this[kBeforeHandshake] = true;\n    }\n  }\n\n}\n/**\n * An error indicating a network timeout occurred\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {object} [options.beforeHandshake] Indicates the timeout happened before a connection handshake completed\n * @extends MongoError\n */\n\n\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n    this.name = 'MongoNetworkTimeoutError';\n  }\n\n}\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\n\n\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n\n}\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\n\n\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    this.name = 'MongoTimeoutError';\n\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n\n}\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\n\n\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\n\n\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result && Array.isArray(result.errorLabels)) {\n      this[kErrorLabels] = new Set(result.errorLabels);\n    }\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n} // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\n\nconst RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable\n7, // HostNotFound\n89, // NetworkTimeout\n91, // ShutdownInProgress\n189, // PrimarySteppedDown\n9001, // SocketException\n10107, // NotMaster\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13435, // NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n10107, // NotMaster\n13435, // NotMasterNoSlaveOk\n13436, // NotMasterOrSecondary\n189, // PrimarySteppedDown\n91, // ShutdownInProgress\n7, // HostNotFound\n6, // HostUnreachable\n89, // NetworkTimeout\n9001, // SocketException\n262 // ExceededTimeLimit\n]);\n\nfunction isRetryableWriteError(error) {\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code) || RETRYABLE_WRITE_ERROR_CODES.has(error.result.code);\n  }\n\n  return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\n\n\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\n\nconst SDAM_RECOVERING_CODES = new Set([91, // ShutdownInProgress\n189, // PrimarySteppedDown\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13436 // NotMasterOrSecondary\n]);\nconst SDAM_NOTMASTER_CODES = new Set([10107, // NotMaster\n13435 // NotMasterNoSlaveOk\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([11600, // InterruptedAtShutdown\n91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\n\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isRetryableWriteError,\n  isNetworkErrorBeforeHandshake\n};","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/error.js"],"names":["kErrorLabels","Symbol","MongoError","Error","constructor","message","stack","errmsg","$err","errorLabels","Set","name","captureStackTrace","create","options","hasErrorLabel","label","has","addErrorLabel","add","Array","from","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoTimeoutError","reason","error","MongoServerSelectionError","makeWriteConcernResultObject","input","output","Object","assign","ok","code","codeName","MongoWriteConcernError","result","isArray","RETRYABLE_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","isRetryableWriteError","isRetryableError","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","isNotMasterError","isNodeShuttingDownError","isSDAMUnrecoverableError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n          this[kErrorLabels] = new Set(message.errorLabels);\n        }\n\n        for (var name in message) {\n          if (name === 'errorLabels' || name === 'errmsg') {\n            continue;\n          }\n\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n  }\n\n  /**\n   * Legacy name for server error responses\n   */\n  get errmsg() {\n    return this.message;\n  }\n\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n}\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n    this.name = 'MongoNetworkError';\n\n    if (options && options.beforeHandshake === true) {\n      this[kBeforeHandshake] = true;\n    }\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {object} [options.beforeHandshake] Indicates the timeout happened before a connection handshake completed\n * @extends MongoError\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n    this.name = 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n}\n\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    this.name = 'MongoTimeoutError';\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result && Array.isArray(result.errorLabels)) {\n      this[kErrorLabels] = new Set(result.errorLabels);\n    }\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n  6, // HostUnreachable\n  7, // HostNotFound\n  89, // NetworkTimeout\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  9001, // SocketException\n  10107, // NotMaster\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13435, // NotMasterNoSlaveOk\n  13436 // NotMasterOrSecondary\n]);\n\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  10107, // NotMaster\n  13435, // NotMasterNoSlaveOk\n  13436, // NotMasterOrSecondary\n  189, // PrimarySteppedDown\n  91, // ShutdownInProgress\n  7, // HostNotFound\n  6, // HostUnreachable\n  89, // NetworkTimeout\n  9001, // SocketException\n  262 // ExceededTimeLimit\n]);\n\nfunction isRetryableWriteError(error) {\n  if (error instanceof MongoWriteConcernError) {\n    return (\n      RETRYABLE_WRITE_ERROR_CODES.has(error.code) ||\n      RETRYABLE_WRITE_ERROR_CODES.has(error.result.code)\n    );\n  }\n\n  return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\nfunction isRetryableError(error) {\n  return (\n    RETRYABLE_ERROR_CODES.has(error.code) ||\n    error instanceof MongoNetworkError ||\n    error.message.match(/not master/) ||\n    error.message.match(/node is recovering/)\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set([\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13436 // NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set([\n  10107, // NotMaster\n  13435 // NotMasterNoSlaveOk\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isRetryableWriteError,\n  isNetworkErrorBeforeHandshake\n};\n"]},"metadata":{},"sourceType":"script"}