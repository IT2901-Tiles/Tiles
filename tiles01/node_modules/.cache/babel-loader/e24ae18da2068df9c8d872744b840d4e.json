{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst updateDocuments = require('./common_functions').updateDocuments;\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nclass UpdateManyOperation extends OperationBase {\n  constructor(collection, filter, update, options) {\n    super(options);\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    this.collection = collection;\n    this.filter = filter;\n    this.update = update;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const update = this.update;\n    const options = this.options; // Set single document update\n\n    options.multi = true; // Execute update\n\n    updateDocuments(coll, filter, update, options, (err, r) => {\n      if (callback == null) return;\n      if (err) return callback(err);\n      if (r == null) return callback(null, {\n        result: {\n          ok: 1\n        }\n      }); // If an explain operation was executed, don't process the server results\n\n      if (this.explain) return callback(undefined, r.result);\n      r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n      r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n      : null;\n      r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n      r.matchedCount = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n      callback(null, r);\n    });\n  }\n\n}\n\ndefineAspects(UpdateManyOperation, [Aspect.EXPLAINABLE]);\nmodule.exports = UpdateManyOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/update_many.js"],"names":["OperationBase","require","updateDocuments","hasAtomicOperators","Aspect","defineAspects","UpdateManyOperation","constructor","collection","filter","update","options","TypeError","execute","callback","coll","multi","err","r","result","ok","explain","undefined","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","upsertedCount","matchedCount","EXPLAINABLE","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,MAAME,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BC,eAAtD;;AACA,MAAMC,kBAAkB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,kBAA/C;;AACA,MAAMC,MAAM,GAAGH,OAAO,CAAC,aAAD,CAAP,CAAuBG,MAAtC;;AACA,MAAMC,aAAa,GAAGJ,OAAO,CAAC,aAAD,CAAP,CAAuBI,aAA7C;;AAEA,MAAMC,mBAAN,SAAkCN,aAAlC,CAAgD;AAC9CO,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AAC/C,UAAMA,OAAN;;AAEA,QAAI,CAACR,kBAAkB,CAACO,MAAD,CAAvB,EAAiC;AAC/B,YAAM,IAAIE,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDG,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,IAAI,GAAG,KAAKP,UAAlB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB,CAJgB,CAMhB;;AACAA,IAAAA,OAAO,CAACK,KAAR,GAAgB,IAAhB,CAPgB,CAQhB;;AACAd,IAAAA,eAAe,CAACa,IAAD,EAAON,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,EAAgC,CAACM,GAAD,EAAMC,CAAN,KAAY;AACzD,UAAIJ,QAAQ,IAAI,IAAhB,EAAsB;AACtB,UAAIG,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AACT,UAAIC,CAAC,IAAI,IAAT,EAAe,OAAOJ,QAAQ,CAAC,IAAD,EAAO;AAAEK,QAAAA,MAAM,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN;AAAV,OAAP,CAAf,CAH0C,CAKzD;;AACA,UAAI,KAAKC,OAAT,EAAkB,OAAOP,QAAQ,CAACQ,SAAD,EAAYJ,CAAC,CAACC,MAAd,CAAf;AAElBD,MAAAA,CAAC,CAACK,aAAF,GAAkBL,CAAC,CAACC,MAAF,CAASK,SAAT,IAAsB,IAAtB,GAA6BN,CAAC,CAACC,MAAF,CAASK,SAAtC,GAAkDN,CAAC,CAACC,MAAF,CAASM,CAA7E;AACAP,MAAAA,CAAC,CAACQ,UAAF,GACEC,KAAK,CAACC,OAAN,CAAcV,CAAC,CAACC,MAAF,CAASU,QAAvB,KAAoCX,CAAC,CAACC,MAAF,CAASU,QAAT,CAAkBC,MAAlB,GAA2B,CAA/D,GACIZ,CAAC,CAACC,MAAF,CAASU,QAAT,CAAkB,CAAlB,CADJ,CACyB;AADzB,QAEI,IAHN;AAIAX,MAAAA,CAAC,CAACa,aAAF,GACEJ,KAAK,CAACC,OAAN,CAAcV,CAAC,CAACC,MAAF,CAASU,QAAvB,KAAoCX,CAAC,CAACC,MAAF,CAASU,QAAT,CAAkBC,MAAtD,GAA+DZ,CAAC,CAACC,MAAF,CAASU,QAAT,CAAkBC,MAAjF,GAA0F,CAD5F;AAEAZ,MAAAA,CAAC,CAACc,YAAF,GACEL,KAAK,CAACC,OAAN,CAAcV,CAAC,CAACC,MAAF,CAASU,QAAvB,KAAoCX,CAAC,CAACC,MAAF,CAASU,QAAT,CAAkBC,MAAlB,GAA2B,CAA/D,GAAmE,CAAnE,GAAuEZ,CAAC,CAACC,MAAF,CAASM,CADlF;AAEAX,MAAAA,QAAQ,CAAC,IAAD,EAAOI,CAAP,CAAR;AACD,KAlBc,CAAf;AAmBD;;AAzC6C;;AA4ChDb,aAAa,CAACC,mBAAD,EAAsB,CAACF,MAAM,CAAC6B,WAAR,CAAtB,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiB7B,mBAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst updateDocuments = require('./common_functions').updateDocuments;\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\n\nclass UpdateManyOperation extends OperationBase {\n  constructor(collection, filter, update, options) {\n    super(options);\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    this.collection = collection;\n    this.filter = filter;\n    this.update = update;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const update = this.update;\n    const options = this.options;\n\n    // Set single document update\n    options.multi = true;\n    // Execute update\n    updateDocuments(coll, filter, update, options, (err, r) => {\n      if (callback == null) return;\n      if (err) return callback(err);\n      if (r == null) return callback(null, { result: { ok: 1 } });\n\n      // If an explain operation was executed, don't process the server results\n      if (this.explain) return callback(undefined, r.result);\n\n      r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n      r.upsertedId =\n        Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n          ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n          : null;\n      r.upsertedCount =\n        Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n      r.matchedCount =\n        Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n      callback(null, r);\n    });\n  }\n}\n\ndefineAspects(UpdateManyOperation, [Aspect.EXPLAINABLE]);\n\nmodule.exports = UpdateManyOperation;\n"]},"metadata":{},"sourceType":"script"}