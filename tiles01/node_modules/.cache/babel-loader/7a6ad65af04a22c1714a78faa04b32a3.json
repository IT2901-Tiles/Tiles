{"ast":null,"code":"'use strict';\n\nconst MongoError = require('./core').MongoError;\n\nconst Cursor = require('./cursor');\n\nconst CursorState = require('./core/cursor').CursorState;\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\n\n\nclass AggregationCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n  }\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @throws {MongoError}\n   * @return {AggregationCursor}\n   */\n\n\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({\n        message: 'Cursor is closed',\n        driver: true\n      });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({\n        message: 'batchSize requires an integer',\n        driver: true\n      });\n    }\n\n    this.operation.options.batchSize = value;\n    this.setCursorBatchSize(value);\n    return this;\n  }\n  /**\n   * Add a geoNear stage to the aggregation pipeline\n   * @method\n   * @param {object} document The geoNear stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  geoNear(document) {\n    this.operation.addToPipeline({\n      $geoNear: document\n    });\n    return this;\n  }\n  /**\n   * Add a group stage to the aggregation pipeline\n   * @method\n   * @param {object} document The group stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  group(document) {\n    this.operation.addToPipeline({\n      $group: document\n    });\n    return this;\n  }\n  /**\n   * Add a limit stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state limit value.\n   * @return {AggregationCursor}\n   */\n\n\n  limit(value) {\n    this.operation.addToPipeline({\n      $limit: value\n    });\n    return this;\n  }\n  /**\n   * Add a match stage to the aggregation pipeline\n   * @method\n   * @param {object} document The match stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  match(document) {\n    this.operation.addToPipeline({\n      $match: document\n    });\n    return this;\n  }\n  /**\n   * Add a maxTimeMS stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state maxTimeMS value.\n   * @return {AggregationCursor}\n   */\n\n\n  maxTimeMS(value) {\n    this.operation.options.maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a out stage to the aggregation pipeline\n   * @method\n   * @param {number} destination The destination name.\n   * @return {AggregationCursor}\n   */\n\n\n  out(destination) {\n    this.operation.addToPipeline({\n      $out: destination\n    });\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   * @method\n   * @param {object} document The project stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  project(document) {\n    this.operation.addToPipeline({\n      $project: document\n    });\n    return this;\n  }\n  /**\n   * Add a lookup stage to the aggregation pipeline\n   * @method\n   * @param {object} document The lookup stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  lookup(document) {\n    this.operation.addToPipeline({\n      $lookup: document\n    });\n    return this;\n  }\n  /**\n   * Add a redact stage to the aggregation pipeline\n   * @method\n   * @param {object} document The redact stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  redact(document) {\n    this.operation.addToPipeline({\n      $redact: document\n    });\n    return this;\n  }\n  /**\n   * Add a skip stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state skip value.\n   * @return {AggregationCursor}\n   */\n\n\n  skip(value) {\n    this.operation.addToPipeline({\n      $skip: value\n    });\n    return this;\n  }\n  /**\n   * Add a sort stage to the aggregation pipeline\n   * @method\n   * @param {object} document The sort stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  sort(document) {\n    this.operation.addToPipeline({\n      $sort: document\n    });\n    return this;\n  }\n  /**\n   * Add a unwind stage to the aggregation pipeline\n   * @method\n   * @param {(string|object)} field The unwind field name or stage document.\n   * @return {AggregationCursor}\n   */\n\n\n  unwind(field) {\n    this.operation.addToPipeline({\n      $unwind: field\n    });\n    return this;\n  }\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n\n\n  getLogger() {\n    return this.logger;\n  }\n\n} // aliases\n\n\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @deprecated\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n *\n * For backwards compatibility, a verbosity of true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n *\n * @method AggregationCursor.prototype.explain\n * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity=true] - An optional mode in which to run the explain.\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = AggregationCursor;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/aggregation_cursor.js"],"names":["MongoError","require","Cursor","CursorState","AggregationCursor","constructor","topology","operation","options","batchSize","value","s","state","CLOSED","isDead","create","message","driver","setCursorBatchSize","geoNear","document","addToPipeline","$geoNear","group","$group","limit","$limit","match","$match","maxTimeMS","out","destination","$out","project","$project","lookup","$lookup","redact","$redact","skip","$skip","sort","$sort","unwind","field","$unwind","getLogger","logger","prototype","get","toArray","module","exports"],"mappings":"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ACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEmB,EAAAA,IAAI,CAAC7B,KAAD,EAAQ;AACV,SAAKH,SAAL,CAAec,aAAf,CAA6B;AAAEmB,MAAAA,KAAK,EAAE9B;AAAT,KAA7B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE+B,EAAAA,IAAI,CAACrB,QAAD,EAAW;AACb,SAAKb,SAAL,CAAec,aAAf,CAA6B;AAAEqB,MAAAA,KAAK,EAAEtB;AAAT,KAA7B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEuB,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACZ,SAAKrC,SAAL,CAAec,aAAf,CAA6B;AAAEwB,MAAAA,OAAO,EAAED;AAAX,KAA7B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKC,MAAZ;AACD;;AAtKoC,C,CAyKvC;;;AACA3C,iBAAiB,CAAC4C,SAAlB,CAA4BC,GAA5B,GAAkC7C,iBAAiB,CAAC4C,SAAlB,CAA4BE,OAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiBhD,iBAAjB","sourcesContent":["'use strict';\n\nconst MongoError = require('./core').MongoError;\nconst Cursor = require('./cursor');\nconst CursorState = require('./core/cursor').CursorState;\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nclass AggregationCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @throws {MongoError}\n   * @return {AggregationCursor}\n   */\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n    }\n\n    this.operation.options.batchSize = value;\n    this.setCursorBatchSize(value);\n    return this;\n  }\n\n  /**\n   * Add a geoNear stage to the aggregation pipeline\n   * @method\n   * @param {object} document The geoNear stage document.\n   * @return {AggregationCursor}\n   */\n  geoNear(document) {\n    this.operation.addToPipeline({ $geoNear: document });\n    return this;\n  }\n\n  /**\n   * Add a group stage to the aggregation pipeline\n   * @method\n   * @param {object} document The group stage document.\n   * @return {AggregationCursor}\n   */\n  group(document) {\n    this.operation.addToPipeline({ $group: document });\n    return this;\n  }\n\n  /**\n   * Add a limit stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state limit value.\n   * @return {AggregationCursor}\n   */\n  limit(value) {\n    this.operation.addToPipeline({ $limit: value });\n    return this;\n  }\n\n  /**\n   * Add a match stage to the aggregation pipeline\n   * @method\n   * @param {object} document The match stage document.\n   * @return {AggregationCursor}\n   */\n  match(document) {\n    this.operation.addToPipeline({ $match: document });\n    return this;\n  }\n\n  /**\n   * Add a maxTimeMS stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state maxTimeMS value.\n   * @return {AggregationCursor}\n   */\n  maxTimeMS(value) {\n    this.operation.options.maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a out stage to the aggregation pipeline\n   * @method\n   * @param {number} destination The destination name.\n   * @return {AggregationCursor}\n   */\n  out(destination) {\n    this.operation.addToPipeline({ $out: destination });\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   * @method\n   * @param {object} document The project stage document.\n   * @return {AggregationCursor}\n   */\n  project(document) {\n    this.operation.addToPipeline({ $project: document });\n    return this;\n  }\n\n  /**\n   * Add a lookup stage to the aggregation pipeline\n   * @method\n   * @param {object} document The lookup stage document.\n   * @return {AggregationCursor}\n   */\n  lookup(document) {\n    this.operation.addToPipeline({ $lookup: document });\n    return this;\n  }\n\n  /**\n   * Add a redact stage to the aggregation pipeline\n   * @method\n   * @param {object} document The redact stage document.\n   * @return {AggregationCursor}\n   */\n  redact(document) {\n    this.operation.addToPipeline({ $redact: document });\n    return this;\n  }\n\n  /**\n   * Add a skip stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state skip value.\n   * @return {AggregationCursor}\n   */\n  skip(value) {\n    this.operation.addToPipeline({ $skip: value });\n    return this;\n  }\n\n  /**\n   * Add a sort stage to the aggregation pipeline\n   * @method\n   * @param {object} document The sort stage document.\n   * @return {AggregationCursor}\n   */\n  sort(document) {\n    this.operation.addToPipeline({ $sort: document });\n    return this;\n  }\n\n  /**\n   * Add a unwind stage to the aggregation pipeline\n   * @method\n   * @param {(string|object)} field The unwind field name or stage document.\n   * @return {AggregationCursor}\n   */\n  unwind(field) {\n    this.operation.addToPipeline({ $unwind: field });\n    return this;\n  }\n\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n  getLogger() {\n    return this.logger;\n  }\n}\n\n// aliases\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @deprecated\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n *\n * For backwards compatibility, a verbosity of true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n *\n * @method AggregationCursor.prototype.explain\n * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity=true] - An optional mode in which to run the explain.\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = AggregationCursor;\n"]},"metadata":{},"sourceType":"script"}