{"ast":null,"code":"/**\n * Module dependencies.\n * @ignore\n */\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif (typeof global !== 'undefined') {\n  var Buffer = require('buffer').Buffer; // TODO just use global Buffer\n\n}\n\nvar utils = require('./parser/utils');\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\n\n\nfunction Binary(buffer, subType) {\n  if (!(this instanceof Binary)) return new Binary(buffer, subType);\n\n  if (buffer != null && !(typeof buffer === 'string') && !Buffer.isBuffer(buffer) && !(buffer instanceof Uint8Array) && !Array.isArray(buffer)) {\n    throw new Error('only String, Buffer, Uint8Array or Array accepted');\n  }\n\n  this._bsontype = 'Binary';\n\n  if (buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if (buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if (typeof buffer === 'string') {\n      // Different ways of writing the length of the string for the different types\n      if (typeof Buffer !== 'undefined') {\n        this.buffer = utils.toBuffer(buffer);\n      } else if (typeof Uint8Array !== 'undefined' || Object.prototype.toString.call(buffer) === '[object Array]') {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error('only String, Buffer, Uint8Array or Array accepted');\n      }\n    } else {\n      this.buffer = buffer;\n    }\n\n    this.position = buffer.length;\n  } else {\n    if (typeof Buffer !== 'undefined') {\n      this.buffer = utils.allocBuffer(Binary.BUFFER_SIZE);\n    } else if (typeof Uint8Array !== 'undefined') {\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    } // Set position to start of buffer\n\n\n    this.position = 0;\n  }\n}\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\n\n\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1) throw new Error('only accepts single character String, Uint8Array or Array');\n  if (typeof byte_value !== 'number' && byte_value < 0 || byte_value > 255) throw new Error('only accepts number in a valid unsigned byte range 0-255'); // Decode the byte value once\n\n  var decoded_byte = null;\n\n  if (typeof byte_value === 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if (byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if (this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = utils.allocBuffer(Binary.BUFFER_SIZE + this.buffer.length); // Combine the two buffers together\n\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      buffer = null; // Create a new buffer (typed or normal array)\n\n      if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      } // We need to copy all the content to the new array\n\n\n      for (var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      } // Reassign the buffer\n\n\n      this.buffer = buffer; // Write the byte\n\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\n\n\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset === 'number' ? offset : this.position; // If the buffer is to small let's extend the buffer\n\n  if (this.buffer.length < offset + string.length) {\n    var buffer = null; // If we are in node.js\n\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = utils.allocBuffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length)); // Copy the content\n\n      for (var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    } // Assign the new buffer\n\n\n    this.buffer = buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = offset + string.length > this.position ? offset + string.length : this.position; // offset = string.length\n  } else if (typeof Buffer !== 'undefined' && typeof string === 'string' && Buffer.isBuffer(this.buffer)) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = offset + string.length > this.position ? offset + string.length : this.position; // offset = string.length;\n  } else if (Object.prototype.toString.call(string) === '[object Uint8Array]' || Object.prototype.toString.call(string) === '[object Array]' && typeof string !== 'string') {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if (typeof string === 'string') {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\n\n\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0 ? length : this.position; // Let's return the data based on the type we have\n\n  if (this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer = typeof Uint8Array !== 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  } // Return the buffer\n\n\n  return buffer;\n};\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\n\n\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw; // Optimize to serialize for the situation where the data == size of buffer\n\n  if (asRaw && typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length === this.position) return this.buffer; // If it's a node.js buffer object\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if (asRaw) {\n      // we support the slice command use it\n      if (this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer = Object.prototype.toString.call(this.buffer) === '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position); // Copy content\n\n        for (var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        } // Return the buffer\n\n\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\n\n\nBinary.prototype.length = function length() {\n  return this.position;\n};\n/**\n * @ignore\n */\n\n\nBinary.prototype.toJSON = function () {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n};\n/**\n * @ignore\n */\n\n\nBinary.prototype.toString = function (format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n};\n/**\n * Binary default subtype\n * @ignore\n */\n\n\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * @ignore\n */\n\nvar writeStringToArray = function (data) {\n  // Create a buffer\n  var buffer = typeof Uint8Array !== 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length); // Write the content to the buffer\n\n  for (var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  } // Write the string to the buffer\n\n\n  return buffer;\n};\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\n\n\nvar convertArraytoUtf8BinaryString = function (byteArray, startIndex, endIndex) {\n  var result = '';\n\n  for (var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_USER_DEFINED = 128;\n/**\n * Expose.\n */\n\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/bson/lib/bson/binary.js"],"names":["global","Buffer","require","utils","Binary","buffer","subType","isBuffer","Uint8Array","Array","isArray","Error","_bsontype","Number","sub_type","position","BSON_BINARY_SUBTYPE_DEFAULT","toBuffer","Object","prototype","toString","call","writeStringToArray","length","allocBuffer","BUFFER_SIZE","ArrayBuffer","put","byte_value","decoded_byte","charCodeAt","copy","i","write","string","offset","read","slice","value","asRaw","newBuffer","convertArraytoUtf8BinaryString","toJSON","format","data","byteArray","startIndex","endIndex","result","String","fromCharCode","SUBTYPE_DEFAULT","SUBTYPE_FUNCTION","SUBTYPE_BYTE_ARRAY","SUBTYPE_UUID_OLD","SUBTYPE_UUID","SUBTYPE_MD5","SUBTYPE_USER_DEFINED","module","exports"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n * @ignore\n */\n\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif (typeof global !== 'undefined') {\n  var Buffer = require('buffer').Buffer; // TODO just use global Buffer\n}\n\nvar utils = require('./parser/utils');\n\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\nfunction Binary(buffer, subType) {\n  if (!(this instanceof Binary)) return new Binary(buffer, subType);\n\n  if (\n    buffer != null &&\n    !(typeof buffer === 'string') &&\n    !Buffer.isBuffer(buffer) &&\n    !(buffer instanceof Uint8Array) &&\n    !Array.isArray(buffer)\n  ) {\n    throw new Error('only String, Buffer, Uint8Array or Array accepted');\n  }\n\n  this._bsontype = 'Binary';\n\n  if (buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if (buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if (typeof buffer === 'string') {\n      // Different ways of writing the length of the string for the different types\n      if (typeof Buffer !== 'undefined') {\n        this.buffer = utils.toBuffer(buffer);\n      } else if (\n        typeof Uint8Array !== 'undefined' ||\n        Object.prototype.toString.call(buffer) === '[object Array]'\n      ) {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error('only String, Buffer, Uint8Array or Array accepted');\n      }\n    } else {\n      this.buffer = buffer;\n    }\n    this.position = buffer.length;\n  } else {\n    if (typeof Buffer !== 'undefined') {\n      this.buffer = utils.allocBuffer(Binary.BUFFER_SIZE);\n    } else if (typeof Uint8Array !== 'undefined') {\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    }\n    // Set position to start of buffer\n    this.position = 0;\n  }\n}\n\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1)\n    throw new Error('only accepts single character String, Uint8Array or Array');\n  if ((typeof byte_value !== 'number' && byte_value < 0) || byte_value > 255)\n    throw new Error('only accepts number in a valid unsigned byte range 0-255');\n\n  // Decode the byte value once\n  var decoded_byte = null;\n  if (typeof byte_value === 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if (byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if (this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = utils.allocBuffer(Binary.BUFFER_SIZE + this.buffer.length);\n      // Combine the two buffers together\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      buffer = null;\n      // Create a new buffer (typed or normal array)\n      if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      }\n\n      // We need to copy all the content to the new array\n      for (var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      }\n\n      // Reassign the buffer\n      this.buffer = buffer;\n      // Write the byte\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset === 'number' ? offset : this.position;\n\n  // If the buffer is to small let's extend the buffer\n  if (this.buffer.length < offset + string.length) {\n    var buffer = null;\n    // If we are in node.js\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = utils.allocBuffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length));\n      // Copy the content\n      for (var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    }\n\n    // Assign the new buffer\n    this.buffer = buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length\n  } else if (\n    typeof Buffer !== 'undefined' &&\n    typeof string === 'string' &&\n    Buffer.isBuffer(this.buffer)\n  ) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length;\n  } else if (\n    Object.prototype.toString.call(string) === '[object Uint8Array]' ||\n    (Object.prototype.toString.call(string) === '[object Array]' && typeof string !== 'string')\n  ) {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if (typeof string === 'string') {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0 ? length : this.position;\n\n  // Let's return the data based on the type we have\n  if (this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer =\n      typeof Uint8Array !== 'undefined'\n        ? new Uint8Array(new ArrayBuffer(length))\n        : new Array(length);\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  }\n  // Return the buffer\n  return buffer;\n};\n\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw;\n\n  // Optimize to serialize for the situation where the data == size of buffer\n  if (\n    asRaw &&\n    typeof Buffer !== 'undefined' &&\n    Buffer.isBuffer(this.buffer) &&\n    this.buffer.length === this.position\n  )\n    return this.buffer;\n\n  // If it's a node.js buffer object\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw\n      ? this.buffer.slice(0, this.position)\n      : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if (asRaw) {\n      // we support the slice command use it\n      if (this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer =\n          Object.prototype.toString.call(this.buffer) === '[object Uint8Array]'\n            ? new Uint8Array(new ArrayBuffer(this.position))\n            : new Array(this.position);\n        // Copy content\n        for (var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        }\n        // Return the buffer\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\nBinary.prototype.length = function length() {\n  return this.position;\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toJSON = function() {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toString = function(format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n};\n\n/**\n * Binary default subtype\n * @ignore\n */\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n/**\n * @ignore\n */\nvar writeStringToArray = function(data) {\n  // Create a buffer\n  var buffer =\n    typeof Uint8Array !== 'undefined'\n      ? new Uint8Array(new ArrayBuffer(data.length))\n      : new Array(data.length);\n  // Write the content to the buffer\n  for (var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  }\n  // Write the string to the buffer\n  return buffer;\n};\n\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\nvar convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {\n  var result = '';\n  for (var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_USER_DEFINED = 128;\n\n/**\n * Expose.\n */\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;\n"]},"metadata":{},"sourceType":"script"}