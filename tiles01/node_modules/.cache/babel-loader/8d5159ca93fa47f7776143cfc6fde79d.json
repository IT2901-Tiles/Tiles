{"ast":null,"code":"var pager = require('memory-pager');\n\nmodule.exports = Bitfield;\n\nfunction Bitfield(opts) {\n  if (!(this instanceof Bitfield)) return new Bitfield(opts);\n  if (!opts) opts = {};\n  if (Buffer.isBuffer(opts)) opts = {\n    buffer: opts\n  };\n  this.pageOffset = opts.pageOffset || 0;\n  this.pageSize = opts.pageSize || 1024;\n  this.pages = opts.pages || pager(this.pageSize);\n  this.byteLength = this.pages.length * this.pageSize;\n  this.length = 8 * this.byteLength;\n  if (!powerOfTwo(this.pageSize)) throw new Error('The page size should be a power of two');\n  this._trackUpdates = !!opts.trackUpdates;\n  this._pageMask = this.pageSize - 1;\n\n  if (opts.buffer) {\n    for (var i = 0; i < opts.buffer.length; i += this.pageSize) {\n      this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize));\n    }\n\n    this.byteLength = opts.buffer.length;\n    this.length = 8 * this.byteLength;\n  }\n}\n\nBitfield.prototype.get = function (i) {\n  var o = i & 7;\n  var j = (i - o) / 8;\n  return !!(this.getByte(j) & 128 >> o);\n};\n\nBitfield.prototype.getByte = function (i) {\n  var o = i & this._pageMask;\n  var j = (i - o) / this.pageSize;\n  var page = this.pages.get(j, true);\n  return page ? page.buffer[o + this.pageOffset] : 0;\n};\n\nBitfield.prototype.set = function (i, v) {\n  var o = i & 7;\n  var j = (i - o) / 8;\n  var b = this.getByte(j);\n  return this.setByte(j, v ? b | 128 >> o : b & (255 ^ 128 >> o));\n};\n\nBitfield.prototype.toBuffer = function () {\n  var all = alloc(this.pages.length * this.pageSize);\n\n  for (var i = 0; i < this.pages.length; i++) {\n    var next = this.pages.get(i, true);\n    var allOffset = i * this.pageSize;\n    if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize);\n  }\n\n  return all;\n};\n\nBitfield.prototype.setByte = function (i, b) {\n  var o = i & this._pageMask;\n  var j = (i - o) / this.pageSize;\n  var page = this.pages.get(j, false);\n  o += this.pageOffset;\n  if (page.buffer[o] === b) return false;\n  page.buffer[o] = b;\n\n  if (i >= this.byteLength) {\n    this.byteLength = i + 1;\n    this.length = this.byteLength * 8;\n  }\n\n  if (this._trackUpdates) this.pages.updated(page);\n  return true;\n};\n\nfunction alloc(n) {\n  if (Buffer.alloc) return Buffer.alloc(n);\n  var b = new Buffer(n);\n  b.fill(0);\n  return b;\n}\n\nfunction powerOfTwo(x) {\n  return !(x & x - 1);\n}","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/sparse-bitfield/index.js"],"names":["pager","require","module","exports","Bitfield","opts","Buffer","isBuffer","buffer","pageOffset","pageSize","pages","byteLength","length","powerOfTwo","Error","_trackUpdates","trackUpdates","_pageMask","i","set","slice","prototype","get","o","j","getByte","page","v","b","setByte","toBuffer","all","alloc","next","allOffset","copy","updated","n","fill","x"],"mappings":"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","sourcesContent":["var pager = require('memory-pager')\n\nmodule.exports = Bitfield\n\nfunction Bitfield (opts) {\n  if (!(this instanceof Bitfield)) return new Bitfield(opts)\n  if (!opts) opts = {}\n  if (Buffer.isBuffer(opts)) opts = {buffer: opts}\n\n  this.pageOffset = opts.pageOffset || 0\n  this.pageSize = opts.pageSize || 1024\n  this.pages = opts.pages || pager(this.pageSize)\n\n  this.byteLength = this.pages.length * this.pageSize\n  this.length = 8 * this.byteLength\n\n  if (!powerOfTwo(this.pageSize)) throw new Error('The page size should be a power of two')\n\n  this._trackUpdates = !!opts.trackUpdates\n  this._pageMask = this.pageSize - 1\n\n  if (opts.buffer) {\n    for (var i = 0; i < opts.buffer.length; i += this.pageSize) {\n      this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize))\n    }\n    this.byteLength = opts.buffer.length\n    this.length = 8 * this.byteLength\n  }\n}\n\nBitfield.prototype.get = function (i) {\n  var o = i & 7\n  var j = (i - o) / 8\n\n  return !!(this.getByte(j) & (128 >> o))\n}\n\nBitfield.prototype.getByte = function (i) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, true)\n\n  return page ? page.buffer[o + this.pageOffset] : 0\n}\n\nBitfield.prototype.set = function (i, v) {\n  var o = i & 7\n  var j = (i - o) / 8\n  var b = this.getByte(j)\n\n  return this.setByte(j, v ? b | (128 >> o) : b & (255 ^ (128 >> o)))\n}\n\nBitfield.prototype.toBuffer = function () {\n  var all = alloc(this.pages.length * this.pageSize)\n\n  for (var i = 0; i < this.pages.length; i++) {\n    var next = this.pages.get(i, true)\n    var allOffset = i * this.pageSize\n    if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize)\n  }\n\n  return all\n}\n\nBitfield.prototype.setByte = function (i, b) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, false)\n\n  o += this.pageOffset\n\n  if (page.buffer[o] === b) return false\n  page.buffer[o] = b\n\n  if (i >= this.byteLength) {\n    this.byteLength = i + 1\n    this.length = this.byteLength * 8\n  }\n\n  if (this._trackUpdates) this.pages.updated(page)\n\n  return true\n}\n\nfunction alloc (n) {\n  if (Buffer.alloc) return Buffer.alloc(n)\n  var b = new Buffer(n)\n  b.fill(0)\n  return b\n}\n\nfunction powerOfTwo (x) {\n  return !(x & (x - 1))\n}\n"]},"metadata":{},"sourceType":"script"}