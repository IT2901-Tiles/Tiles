{"ast":null,"code":"'use strict';\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\n\nclass ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n\n}\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\n\n\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n\n}\n/**\n * An event published when a connection pool is closed\n */\n\n\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\n\n\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\n\n\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n  }\n\n}\n/**\n * An event published when a request to check a connection out begins\n */\n\n\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\n\n\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n\n}\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection pool is cleared\n */\n\n\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nconst CMAP_EVENT_NAMES = ['connectionPoolCreated', 'connectionPoolClosed', 'connectionCreated', 'connectionReady', 'connectionClosed', 'connectionCheckOutStarted', 'connectionCheckOutFailed', 'connectionCheckedOut', 'connectionCheckedIn', 'connectionPoolCleared'];\nmodule.exports = {\n  CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n};","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/cmap/events.js"],"names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","ConnectionPoolCreatedEvent","options","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","CMAP_EVENT_NAMES","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\nclass ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\nconst CMAP_EVENT_NAMES = [\n  'connectionPoolCreated',\n  'connectionPoolClosed',\n  'connectionCreated',\n  'connectionReady',\n  'connectionClosed',\n  'connectionCheckOutStarted',\n  'connectionCheckOutFailed',\n  'connectionCheckedOut',\n  'connectionCheckedIn',\n  'connectionPoolCleared'\n];\n\nmodule.exports = {\n  CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n};\n"]},"metadata":{},"sourceType":"script"}