{"ast":null,"code":"'use strict';\n\nconst CommandOperation = require('./command');\n\nclass ValidateCollectionOperation extends CommandOperation {\n  constructor(admin, collectionName, options) {\n    // Decorate command with extra options\n    let command = {\n      validate: collectionName\n    };\n    const keys = Object.keys(options);\n\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = options[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options, null, command);\n    this.collectionName = collectionName;\n  }\n\n  execute(callback) {\n    const collectionName = this.collectionName;\n    super.execute((err, doc) => {\n      if (err != null) return callback(err, null);\n      if (doc.ok === 0) return callback(new Error('Error with validate command'), null);\n      if (doc.result != null && doc.result.constructor !== String) return callback(new Error('Error with validation data'), null);\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null) return callback(new Error('Error: invalid collection ' + collectionName), null);\n      if (doc.valid != null && !doc.valid) return callback(new Error('Error: invalid collection ' + collectionName), null);\n      return callback(null, doc);\n    });\n  }\n\n}\n\nmodule.exports = ValidateCollectionOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/validate_collection.js"],"names":["CommandOperation","require","ValidateCollectionOperation","constructor","admin","collectionName","options","command","validate","keys","Object","i","length","prototype","hasOwnProperty","call","s","db","execute","callback","err","doc","ok","Error","result","String","match","valid","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAhC;;AAEA,MAAMC,2BAAN,SAA0CF,gBAA1C,CAA2D;AACzDG,EAAAA,WAAW,CAACC,KAAD,EAAQC,cAAR,EAAwBC,OAAxB,EAAiC;AAC1C;AACA,QAAIC,OAAO,GAAG;AAAEC,MAAAA,QAAQ,EAAEH;AAAZ,KAAd;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,OAAZ,CAAb;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAID,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,OAArC,EAA8CG,IAAI,CAACE,CAAD,CAAlD,KAA0DF,IAAI,CAACE,CAAD,CAAJ,KAAY,SAA1E,EAAqF;AACnFJ,QAAAA,OAAO,CAACE,IAAI,CAACE,CAAD,CAAL,CAAP,GAAmBL,OAAO,CAACG,IAAI,CAACE,CAAD,CAAL,CAA1B;AACD;AACF;;AAED,UAAMP,KAAK,CAACY,CAAN,CAAQC,EAAd,EAAkBX,OAAlB,EAA2B,IAA3B,EAAiCC,OAAjC;AACA,SAAKF,cAAL,GAAsBA,cAAtB;AACD;;AAEDa,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMd,cAAc,GAAG,KAAKA,cAA5B;AAEA,UAAMa,OAAN,CAAc,CAACE,GAAD,EAAMC,GAAN,KAAc;AAC1B,UAAID,GAAG,IAAI,IAAX,EAAiB,OAAOD,QAAQ,CAACC,GAAD,EAAM,IAAN,CAAf;AAEjB,UAAIC,GAAG,CAACC,EAAJ,KAAW,CAAf,EAAkB,OAAOH,QAAQ,CAAC,IAAII,KAAJ,CAAU,6BAAV,CAAD,EAA2C,IAA3C,CAAf;AAClB,UAAIF,GAAG,CAACG,MAAJ,IAAc,IAAd,IAAsBH,GAAG,CAACG,MAAJ,CAAWrB,WAAX,KAA2BsB,MAArD,EACE,OAAON,QAAQ,CAAC,IAAII,KAAJ,CAAU,4BAAV,CAAD,EAA0C,IAA1C,CAAf;AACF,UAAIF,GAAG,CAACG,MAAJ,IAAc,IAAd,IAAsBH,GAAG,CAACG,MAAJ,CAAWE,KAAX,CAAiB,mBAAjB,KAAyC,IAAnE,EACE,OAAOP,QAAQ,CAAC,IAAII,KAAJ,CAAU,+BAA+BlB,cAAzC,CAAD,EAA2D,IAA3D,CAAf;AACF,UAAIgB,GAAG,CAACM,KAAJ,IAAa,IAAb,IAAqB,CAACN,GAAG,CAACM,KAA9B,EACE,OAAOR,QAAQ,CAAC,IAAII,KAAJ,CAAU,+BAA+BlB,cAAzC,CAAD,EAA2D,IAA3D,CAAf;AAEF,aAAOc,QAAQ,CAAC,IAAD,EAAOE,GAAP,CAAf;AACD,KAZD;AAaD;;AA/BwD;;AAkC3DO,MAAM,CAACC,OAAP,GAAiB3B,2BAAjB","sourcesContent":["'use strict';\n\nconst CommandOperation = require('./command');\n\nclass ValidateCollectionOperation extends CommandOperation {\n  constructor(admin, collectionName, options) {\n    // Decorate command with extra options\n    let command = { validate: collectionName };\n    const keys = Object.keys(options);\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = options[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options, null, command);\n    this.collectionName = collectionName;\n  }\n\n  execute(callback) {\n    const collectionName = this.collectionName;\n\n    super.execute((err, doc) => {\n      if (err != null) return callback(err, null);\n\n      if (doc.ok === 0) return callback(new Error('Error with validate command'), null);\n      if (doc.result != null && doc.result.constructor !== String)\n        return callback(new Error('Error with validation data'), null);\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n        return callback(new Error('Error: invalid collection ' + collectionName), null);\n      if (doc.valid != null && !doc.valid)\n        return callback(new Error('Error: invalid collection ' + collectionName), null);\n\n      return callback(null, doc);\n    });\n  }\n}\n\nmodule.exports = ValidateCollectionOperation;\n"]},"metadata":{},"sourceType":"script"}