{"ast":null,"code":"'use strict';\n\nvar Binary = require('../core').BSON.Binary,\n    ObjectID = require('../core').BSON.ObjectID;\n\nvar Buffer = require('safe-buffer').Buffer;\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\n\n\nvar Chunk = function (file, mongoObject, writeConcern) {\n  if (!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n  this.file = file;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || {\n    w: 1\n  };\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if (typeof mongoObjectFinal.data === 'string') {\n    var buffer = Buffer.alloc(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (Array.isArray(mongoObjectFinal.data)) {\n    buffer = Buffer.alloc(mongoObjectFinal.data.length);\n    var data = mongoObjectFinal.data.join('');\n    buffer.write(data, 0, data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (mongoObjectFinal.data && mongoObjectFinal.data._bsontype === 'Binary') {\n    this.data = mongoObjectFinal.data;\n  } else if (!Buffer.isBuffer(mongoObjectFinal.data) && !(mongoObjectFinal.data == null)) {\n    throw Error('Illegal chunk format');\n  } // Update position\n\n\n  this.internalPosition = 0;\n};\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\n\n\nChunk.prototype.write = function (data, callback) {\n  this.data.write(data, this.internalPosition, data.length, 'binary');\n  this.internalPosition = this.data.length();\n  if (callback != null) return callback(null, this);\n  return this;\n};\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\n\n\nChunk.prototype.read = function (length) {\n  // Default to full read if no index defined\n  length = length == null || length === 0 ? this.length() : length;\n\n  if (this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function (length) {\n  if (this.length() - this.internalPosition >= length) {\n    var data = null;\n\n    if (this.data.buffer != null) {\n      //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else {\n      //Native BSON\n      data = Buffer.alloc(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\n\n\nChunk.prototype.eof = function () {\n  return this.internalPosition === this.length() ? true : false;\n};\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\n\n\nChunk.prototype.getc = function () {\n  return this.read(1);\n};\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\n\n\nChunk.prototype.rewind = function () {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\n\n\nChunk.prototype.save = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function (err, collection) {\n    if (err) return callback(err); // Merge the options\n\n    var writeOptions = {\n      upsert: true\n    };\n\n    for (var name in options) writeOptions[name] = options[name];\n\n    for (name in self.writeConcern) writeOptions[name] = self.writeConcern[name];\n\n    if (self.data.length() > 0) {\n      self.buildMongoObject(function (mongoObject) {\n        var options = {\n          forceServerObjectId: true\n        };\n\n        for (var name in self.writeConcern) {\n          options[name] = self.writeConcern[name];\n        }\n\n        collection.replaceOne({\n          _id: self.objectId\n        }, mongoObject, writeOptions, function (err) {\n          callback(err, self);\n        });\n      });\n    } else {\n      callback(null, self);\n    } // });\n\n  });\n};\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\n\n\nChunk.prototype.buildMongoObject = function (callback) {\n  var mongoObject = {\n    files_id: this.file.fileId,\n    n: this.chunkNumber,\n    data: this.data\n  }; // If we are saving using a specific ObjectId\n\n  if (this.objectId != null) mongoObject._id = this.objectId;\n  callback(mongoObject);\n};\n/**\n * @return {number} the length of the data\n */\n\n\nChunk.prototype.length = function () {\n  return this.data.length();\n};\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\n\n\nObject.defineProperty(Chunk.prototype, 'position', {\n  enumerable: true,\n  get: function () {\n    return this.internalPosition;\n  },\n  set: function (value) {\n    this.internalPosition = value;\n  }\n});\n/**\n * The default chunk size\n * @constant\n */\n\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\nmodule.exports = Chunk;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/gridfs/chunk.js"],"names":["Binary","require","BSON","ObjectID","Buffer","Chunk","file","mongoObject","writeConcern","mongoObjectFinal","w","objectId","_id","chunkNumber","n","data","buffer","alloc","length","write","Array","isArray","join","_bsontype","isBuffer","Error","internalPosition","prototype","callback","read","readSlice","slice","readInto","eof","getc","rewind","save","options","self","chunkCollection","err","collection","writeOptions","upsert","name","buildMongoObject","forceServerObjectId","replaceOne","files_id","fileId","Object","defineProperty","enumerable","get","set","value","DEFAULT_CHUNK_SIZE","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Binary = require('../core').BSON.Binary,\n  ObjectID = require('../core').BSON.ObjectID;\n\nvar Buffer = require('safe-buffer').Buffer;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = function(file, mongoObject, writeConcern) {\n  if (!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || { w: 1 };\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if (typeof mongoObjectFinal.data === 'string') {\n    var buffer = Buffer.alloc(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (Array.isArray(mongoObjectFinal.data)) {\n    buffer = Buffer.alloc(mongoObjectFinal.data.length);\n    var data = mongoObjectFinal.data.join('');\n    buffer.write(data, 0, data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (mongoObjectFinal.data && mongoObjectFinal.data._bsontype === 'Binary') {\n    this.data = mongoObjectFinal.data;\n  } else if (!Buffer.isBuffer(mongoObjectFinal.data) && !(mongoObjectFinal.data == null)) {\n    throw Error('Illegal chunk format');\n  }\n\n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function(data, callback) {\n  this.data.write(data, this.internalPosition, data.length, 'binary');\n  this.internalPosition = this.data.length();\n  if (callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function(length) {\n  // Default to full read if no index defined\n  length = length == null || length === 0 ? this.length() : length;\n\n  if (this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function(length) {\n  if (this.length() - this.internalPosition >= length) {\n    var data = null;\n    if (this.data.buffer != null) {\n      //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else {\n      //Native BSON\n      data = Buffer.alloc(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function() {\n  return this.internalPosition === this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function() {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function() {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function(options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function(err, collection) {\n    if (err) return callback(err);\n\n    // Merge the options\n    var writeOptions = { upsert: true };\n    for (var name in options) writeOptions[name] = options[name];\n    for (name in self.writeConcern) writeOptions[name] = self.writeConcern[name];\n\n    if (self.data.length() > 0) {\n      self.buildMongoObject(function(mongoObject) {\n        var options = { forceServerObjectId: true };\n        for (var name in self.writeConcern) {\n          options[name] = self.writeConcern[name];\n        }\n\n        collection.replaceOne({ _id: self.objectId }, mongoObject, writeOptions, function(err) {\n          callback(err, self);\n        });\n      });\n    } else {\n      callback(null, self);\n    }\n    // });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function(callback) {\n  var mongoObject = {\n    files_id: this.file.fileId,\n    n: this.chunkNumber,\n    data: this.data\n  };\n  // If we are saving using a specific ObjectId\n  if (this.objectId != null) mongoObject._id = this.objectId;\n\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function() {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, 'position', {\n  enumerable: true,\n  get: function() {\n    return this.internalPosition;\n  },\n  set: function(value) {\n    this.internalPosition = value;\n  }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\n\nmodule.exports = Chunk;\n"]},"metadata":{},"sourceType":"script"}