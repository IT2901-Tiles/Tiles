{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\StuartGO\\\\projects\\\\bachelorOppgave\\\\Tiles\\\\tiles01\\\\src\\\\Components\\\\FormFieldAnimationPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nconst {\n  MongoClient\n} = require(\"mongodb\");\n\nfunction FormFieldAnimationPage(props) {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [triggerCard] = useState(props.triggerCard); // props to pass to AnimationsPreview.jsx\n\n  const [thingCard] = useState(props.thingCard); // props to pass to AnimationsPreview.jsx\n\n  const [feedbackCard] = useState(props.feedbackCard); // props to pass to AnimationsPreview.jsx\n\n  let outputStandardText = `Cards chosen:\\n- Trigger: ${triggerCard}\\n- Thing: ${thingCard}\\n- Feedback: ${feedbackCard}\\n\\nYour idea:\\n- `; // passed as first parameter in the downloadFile Blob\n  // The following function gathers the content from the textarea and inserts it into a external txt-file\n\n  function downloadFile() {\n    let userInputValue; // will change depending on the user writes something or not \n\n    if (document.getElementById(\"textBoxAnimationPage\").value === \"\") {\n      // if user does not write anything in the textarea\n      userInputValue = \"Oops! Looks like no brilliant ideas were written down...\";\n    } else {\n      // if the user writes something in the textare\n      userInputValue = document.getElementById(\"textBoxAnimationPage\").value;\n    }\n\n    const htmlElement = document.createElement(\"a\"); // creates an \"a\" element in the html page, where we'll \"store\" the value of the user input\n\n    const valueInput = new Blob([outputStandardText + userInputValue], {\n      type: 'text/plain'\n    }); // value of txt file must be passed in the first parameter of Blob\n\n    htmlElement.href = URL.createObjectURL(valueInput);\n    htmlElement.download = \"tiles.txt\";\n    document.body.appendChild(htmlElement);\n    htmlElement.click();\n  }\n\n  console.log(\"databasE?\");\n  writeIdeaDB(\"yes\", \"no\", \"what\", \"very nice\"); // Will fix the position when the animations are ready\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textAreaAnimationPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"textBoxAnimationPage\",\n      placeholder: \"Write your idea here...\",\n      onChange: newInput => setInput(newInput.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadFile,\n      className: \"textButtonAnimationPage\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormFieldAnimationPage, \"EGLpom2IiXn86x0U18pG/DqP36w=\");\n\n_c = FormFieldAnimationPage;\n\nasync function writeIdeaDB(triggerCard, thingCard, feedbackCard, idea) {\n  const url = \"mongodb+srv://Tiles:CoolCoolCool@tilescluster.87fob.mongodb.net/Tiles_cards?retryWrites=true&w=majority\";\n  const client = new MongoClient(url); // The database to use\n\n  const dbName = \"Tiles_cards\";\n\n  try {\n    await client.connect();\n    console.log(\"Connected correctly to server\");\n    const db = client.db(dbName);\n    const ideas = db.collection(\"ideas\");\n    db.createCollection(\"Ass\");\n    let ideaDocument = {\n      \"cards\": {\n        \"trigger\": triggerCard,\n        \"thing\": thingCard,\n        \"feedback\": feedbackCard\n      },\n      \"idea\": idea\n    }; // Insert a single document, wait for promise so we can read it back\n\n    const p = await ideas.insertOne(ideaDocument); // Find one document\n\n    const myDoc = await ideas.findOne(); // Print to the console\n\n    console.log(myDoc);\n  } catch (err) {\n    console.log(err.stack);\n  } finally {\n    await client.close();\n  }\n}\n\nexport default FormFieldAnimationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormFieldAnimationPage\");","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/src/Components/FormFieldAnimationPage.jsx"],"names":["React","useState","MongoClient","require","FormFieldAnimationPage","props","input","setInput","triggerCard","thingCard","feedbackCard","outputStandardText","downloadFile","userInputValue","document","getElementById","value","htmlElement","createElement","valueInput","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","console","log","writeIdeaDB","newInput","target","idea","url","client","dbName","connect","db","ideas","collection","createCollection","ideaDocument","p","insertOne","myDoc","findOne","err","stack","close"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nconst { MongoClient } = require(\"mongodb\");\r\n\r\nfunction FormFieldAnimationPage(props) {\r\n    const [input, setInput] = useState('')\r\n    const [triggerCard] = useState(props.triggerCard) // props to pass to AnimationsPreview.jsx\r\n    const [thingCard] = useState(props.thingCard) // props to pass to AnimationsPreview.jsx\r\n    const [feedbackCard] = useState(props.feedbackCard) // props to pass to AnimationsPreview.jsx\r\n    let outputStandardText = `Cards chosen:\\n- Trigger: ${triggerCard}\\n- Thing: ${thingCard}\\n- Feedback: ${feedbackCard}\\n\\nYour idea:\\n- ` // passed as first parameter in the downloadFile Blob\r\n\r\n    // The following function gathers the content from the textarea and inserts it into a external txt-file\r\n    function downloadFile() {\r\n        let userInputValue // will change depending on the user writes something or not \r\n        if (document.getElementById(\"textBoxAnimationPage\").value === \"\") { // if user does not write anything in the textarea\r\n            userInputValue = \"Oops! Looks like no brilliant ideas were written down...\" \r\n        } else { // if the user writes something in the textare\r\n            userInputValue = document.getElementById(\"textBoxAnimationPage\").value\r\n        }\r\n        const htmlElement = document.createElement(\"a\") // creates an \"a\" element in the html page, where we'll \"store\" the value of the user input\r\n        const valueInput = new Blob([outputStandardText + userInputValue], {type: 'text/plain'}) // value of txt file must be passed in the first parameter of Blob\r\n        htmlElement.href = URL.createObjectURL(valueInput)\r\n        htmlElement.download = \"tiles.txt\"\r\n        document.body.appendChild(htmlElement)\r\n        htmlElement.click()\r\n    }\r\n    console.log(\"databasE?\")\r\n    writeIdeaDB(\"yes\",\"no\",\"what\",\"very nice\")\r\n    // Will fix the position when the animations are ready\r\n    return (\r\n        <div className=\"textAreaAnimationPage\">\r\n            <textarea id=\"textBoxAnimationPage\" placeholder=\"Write your idea here...\" onChange={newInput => setInput(newInput.target.value)}/>\r\n                <button onClick={downloadFile} className=\"textButtonAnimationPage\">Save</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n \r\n\r\n                      \r\n async function writeIdeaDB(triggerCard,thingCard,feedbackCard,idea) {                                                                                                                                     \r\n    const url = \"mongodb+srv://Tiles:CoolCoolCool@tilescluster.87fob.mongodb.net/Tiles_cards?retryWrites=true&w=majority\";\r\n    const client = new MongoClient(url);\r\n    \r\n    // The database to use\r\n    const dbName = \"Tiles_cards\";\r\n    try {\r\n         await client.connect();\r\n         console.log(\"Connected correctly to server\");\r\n         const db = client.db(dbName);\r\n\r\n         const ideas = db.collection(\"ideas\");\r\n        db.createCollection(\"Ass\")                                                                                                                                             \r\n         let ideaDocument = {\r\n             \"cards\": { \"trigger\": triggerCard, \"thing\": thingCard,\"feedback\":feedbackCard },\r\n             \"idea\": idea                                                                                                                               \r\n         }\r\n         // Insert a single document, wait for promise so we can read it back\r\n         const p = await ideas.insertOne(ideaDocument);\r\n         // Find one document\r\n         const myDoc = await ideas.findOne();\r\n         // Print to the console\r\n         console.log(myDoc);\r\n        } catch (err) {\r\n         console.log(err.stack);\r\n     }\r\n \r\n     finally {\r\n        await client.close();\r\n    }\r\n}\r\n\r\n\r\nexport default FormFieldAnimationPage"]},"metadata":{},"sourceType":"module"}