{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\karen\\\\bacheloroppgaven\\\\Tiles\\\\tiles01\\\\src\\\\Components\\\\AudioAnimations.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport vibrateSound from '../Audio/feedback/synth-vibe.wav';\nimport dropSound from '../Audio/feedback/goblin-fall.mp3';\nimport lottieWeb from 'https://cdn.skypack.dev/lottie-web'; // Adding sounds to the different animations provided in AnimationsPage.jsx\n\nfunction AudioAnimations(props) {\n  _s();\n\n  const [triggerCard] = useState(props.triggerCard); // props to pass to AnimationsPreview.jsx\n\n  const [thingCard] = useState(props.thingCard); // props to pass to AnimationsPreview.jsx\n\n  const [feedbackCard] = useState(props.feedbackCard); // props to pass to AnimationsPreview.jsx\n\n  var srcForSound;\n  var audioType = 'audio/';\n  const muteIconContainer = document.getElementById('muteIcon');\n  let state = 'mute';\n  const animationMuteButton = lottieWeb.loadAnimation({\n    container: muteIconContainer,\n    path: 'https://maxst.icons8.com/vue-static/landings/animated-icons/icons/pause/pause.json',\n    renderer: 'svg',\n    loop: true,\n    autoplay: true,\n    name: \"Demo Demo\"\n  });\n  animationMuteButton.goToAndStop(14, true);\n  muteIconContainer.addEventListener('click', () => {\n    if (state === 'mute') {\n      animationMuteButton.playSegments([14, 27], true);\n      state === 'unmute';\n    } else {\n      animationMuteButton.playSegments([0, 14], true);\n      state = 'mute';\n    }\n  }); // Check which cards are picked by the user, and match the audio with each card (that has audio associated to it)\n\n  function matchAudioToCards() {\n    if (feedbackCard === 'vibrate') {\n      return [vibrateSound, 'wav'];\n    } else if (triggerCard === 'drop') {\n      return [dropSound, 'mp3'];\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n\n    /* Audio starts playing immediately, and is in a loop so it will never stop playing */\n\n    /* <audio controls autoPlay loop> \r\n        <source src={matchAudioToCards()[0]} type={audioType + matchAudioToCards()[1]}/>\r\n    </audio> */\n    _jsxDEV(\"div\", {\n      id: \"audio-player-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Audio...Player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"muteIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  );\n}\n\n_s(AudioAnimations, \"CjcveqJIEJWbceupU/zq6JURvvE=\");\n\n_c = AudioAnimations;\nexport default AudioAnimations;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnimations\");","map":{"version":3,"sources":["C:/Users/karen/bacheloroppgaven/Tiles/tiles01/src/Components/AudioAnimations.jsx"],"names":["React","useState","vibrateSound","dropSound","lottieWeb","AudioAnimations","props","triggerCard","thingCard","feedbackCard","srcForSound","audioType","muteIconContainer","document","getElementById","state","animationMuteButton","loadAnimation","container","path","renderer","loop","autoplay","name","goToAndStop","addEventListener","playSegments","matchAudioToCards"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,SAAP,MAAsB,oCAAtB,C,CAEA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC5B,QAAM,CAACC,WAAD,IAAgBN,QAAQ,CAACK,KAAK,CAACC,WAAP,CAA9B,CAD4B,CACsB;;AAClD,QAAM,CAACC,SAAD,IAAcP,QAAQ,CAACK,KAAK,CAACE,SAAP,CAA5B,CAF4B,CAEkB;;AAC9C,QAAM,CAACC,YAAD,IAAiBR,QAAQ,CAACK,KAAK,CAACG,YAAP,CAA/B,CAH4B,CAGwB;;AACpD,MAAIC,WAAJ;AACA,MAAIC,SAAS,GAAG,QAAhB;AAGA,QAAMC,iBAAiB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA1B;AACA,MAAIC,KAAK,GAAG,MAAZ;AAEA,QAAMC,mBAAmB,GAAGZ,SAAS,CAACa,aAAV,CAAwB;AAChDC,IAAAA,SAAS,EAAEN,iBADqC;AAEhDO,IAAAA,IAAI,EAAE,oFAF0C;AAGhDC,IAAAA,QAAQ,EAAE,KAHsC;AAIhDC,IAAAA,IAAI,EAAE,IAJ0C;AAKhDC,IAAAA,QAAQ,EAAE,IALsC;AAMhDC,IAAAA,IAAI,EAAE;AAN0C,GAAxB,CAA5B;AASAP,EAAAA,mBAAmB,CAACQ,WAApB,CAAgC,EAAhC,EAAoC,IAApC;AAEAZ,EAAAA,iBAAiB,CAACa,gBAAlB,CAAmC,OAAnC,EAA4C,MAAK;AAC7C,QAAIV,KAAK,KAAK,MAAd,EAAsB;AAClBC,MAAAA,mBAAmB,CAACU,YAApB,CAAiC,CAAC,EAAD,EAAK,EAAL,CAAjC,EAA2C,IAA3C;AACAX,MAAAA,KAAK,KAAK,QAAV;AACH,KAHD,MAGO;AACHC,MAAAA,mBAAmB,CAACU,YAApB,CAAiC,CAAC,CAAD,EAAI,EAAJ,CAAjC,EAA0C,IAA1C;AACAX,MAAAA,KAAK,GAAG,MAAR;AACH;AACA,GARL,EAtB4B,CAiC5B;;AACA,WAASY,iBAAT,GAA6B;AACzB,QAAIlB,YAAY,KAAK,SAArB,EAAgC;AAC5B,aAAO,CAACP,YAAD,EAAe,KAAf,CAAP;AACH,KAFD,MAEO,IAAIK,WAAW,KAAK,MAApB,EAA4B;AAC/B,aAAO,CAACJ,SAAD,EAAY,KAAZ,CAAP;AACH;AACJ;;AAED;AAAA;;AACQ;;AACA;AACZ;AACA;AAEY;AAAK,MAAA,EAAE,EAAC,wBAAR;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANR;AAWH;;GArDQE,e;;KAAAA,e;AAuDT,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport vibrateSound from '../Audio/feedback/synth-vibe.wav'\r\nimport dropSound from '../Audio/feedback/goblin-fall.mp3'\r\nimport lottieWeb from 'https://cdn.skypack.dev/lottie-web'\r\n\r\n// Adding sounds to the different animations provided in AnimationsPage.jsx\r\nfunction AudioAnimations(props) {\r\n    const [triggerCard] = useState(props.triggerCard) // props to pass to AnimationsPreview.jsx\r\n    const [thingCard] = useState(props.thingCard) // props to pass to AnimationsPreview.jsx\r\n    const [feedbackCard] = useState(props.feedbackCard) // props to pass to AnimationsPreview.jsx\r\n    var srcForSound;\r\n    var audioType = 'audio/'\r\n\r\n\r\n    const muteIconContainer = document.getElementById('muteIcon');\r\n    let state = 'mute';\r\n\r\n    const animationMuteButton = lottieWeb.loadAnimation({\r\n        container: muteIconContainer,\r\n        path: 'https://maxst.icons8.com/vue-static/landings/animated-icons/icons/pause/pause.json',\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        name: \"Demo Demo\",\r\n    });\r\n\r\n    animationMuteButton.goToAndStop(14, true);\r\n\r\n    muteIconContainer.addEventListener('click', () =>{\r\n        if (state === 'mute') {\r\n            animationMuteButton.playSegments([14, 27], true);\r\n            state === 'unmute';\r\n        } else {\r\n            animationMuteButton.playSegments([0, 14], true);\r\n            state = 'mute';\r\n        }\r\n        }\r\n    )\r\n\r\n    // Check which cards are picked by the user, and match the audio with each card (that has audio associated to it)\r\n    function matchAudioToCards() {\r\n        if (feedbackCard === 'vibrate') {\r\n            return [vibrateSound, 'wav'] \r\n        } else if (triggerCard === 'drop') {\r\n            return [dropSound, 'mp3']\r\n        }\r\n    }\r\n\r\n    return (\r\n            /* Audio starts playing immediately, and is in a loop so it will never stop playing */\r\n            /* <audio controls autoPlay loop> \r\n                <source src={matchAudioToCards()[0]} type={audioType + matchAudioToCards()[1]}/>\r\n            </audio> */\r\n\r\n            <div id=\"audio-player-container\">\r\n                <p>Audio...Player</p>\r\n                <button id=\"muteIcon\"></button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default AudioAnimations;"]},"metadata":{},"sourceType":"module"}