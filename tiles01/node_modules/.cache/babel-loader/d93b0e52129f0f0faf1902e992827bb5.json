{"ast":null,"code":"'use strict';\n\nconst FindAndModifyOperation = require('./find_and_modify');\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnOriginal !== void 0 ? !options.returnOriginal : false;\n    finalOptions.upsert = options.upsert !== void 0 ? !!options.upsert : false;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new TypeError('Replacement parameter must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, replacement, finalOptions);\n  }\n\n}\n\nmodule.exports = FindOneAndReplaceOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/find_one_and_replace.js"],"names":["FindAndModifyOperation","require","hasAtomicOperators","FindOneAndReplaceOperation","constructor","collection","filter","replacement","options","finalOptions","Object","assign","fields","projection","update","new","returnOriginal","upsert","TypeError","sort","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,mBAAD,CAAtC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,kBAA/C;;AAEA,MAAMC,0BAAN,SAAyCH,sBAAzC,CAAgE;AAC9DI,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,WAArB,EAAkCC,OAAlC,EAA2C;AACpD;AACA,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAArB;AACAC,IAAAA,YAAY,CAACG,MAAb,GAAsBJ,OAAO,CAACK,UAA9B;AACAJ,IAAAA,YAAY,CAACK,MAAb,GAAsB,IAAtB;AACAL,IAAAA,YAAY,CAACM,GAAb,GAAmBP,OAAO,CAACQ,cAAR,KAA2B,KAAK,CAAhC,GAAoC,CAACR,OAAO,CAACQ,cAA7C,GAA8D,KAAjF;AACAP,IAAAA,YAAY,CAACQ,MAAb,GAAsBT,OAAO,CAACS,MAAR,KAAmB,KAAK,CAAxB,GAA4B,CAAC,CAACT,OAAO,CAACS,MAAtC,GAA+C,KAArE;;AAEA,QAAIX,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;AAChD,YAAM,IAAIY,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAIX,WAAW,IAAI,IAAf,IAAuB,OAAOA,WAAP,KAAuB,QAAlD,EAA4D;AAC1D,YAAM,IAAIW,SAAJ,CAAc,yCAAd,CAAN;AACD;;AAED,QAAIhB,kBAAkB,CAACK,WAAD,CAAtB,EAAqC;AACnC,YAAM,IAAIW,SAAJ,CAAc,wDAAd,CAAN;AACD;;AAED,UAAMb,UAAN,EAAkBC,MAAlB,EAA0BG,YAAY,CAACU,IAAvC,EAA6CZ,WAA7C,EAA0DE,YAA1D;AACD;;AAtB6D;;AAyBhEW,MAAM,CAACC,OAAP,GAAiBlB,0BAAjB","sourcesContent":["'use strict';\n\nconst FindAndModifyOperation = require('./find_and_modify');\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnOriginal !== void 0 ? !options.returnOriginal : false;\n    finalOptions.upsert = options.upsert !== void 0 ? !!options.upsert : false;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new TypeError('Replacement parameter must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, replacement, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndReplaceOperation;\n"]},"metadata":{},"sourceType":"script"}