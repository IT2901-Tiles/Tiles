{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst MongoError = require('../core').MongoError;\n\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nclass ExecuteDbAdminCommandOperation extends OperationBase {\n  constructor(db, selector, options) {\n    super(options);\n    this.db = db;\n    this.selector = selector;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const selector = this.selector;\n    const options = this.options;\n    const namespace = new MongoDBNamespace('admin', '$cmd');\n    db.s.topology.command(namespace, selector, options, (err, result) => {\n      // Did the user destroy the topology\n      if (db.serverConfig && db.serverConfig.isDestroyed()) {\n        return callback(new MongoError('topology was destroyed'));\n      }\n\n      if (err) return handleCallback(callback, err);\n      handleCallback(callback, null, result.result);\n    });\n  }\n\n}\n\nmodule.exports = ExecuteDbAdminCommandOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/execute_db_admin_command.js"],"names":["OperationBase","require","handleCallback","MongoError","MongoDBNamespace","ExecuteDbAdminCommandOperation","constructor","db","selector","options","execute","callback","namespace","s","topology","command","err","result","serverConfig","isDestroyed","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,MAAME,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAA3C;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,UAAtC;;AACA,MAAMC,gBAAgB,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,gBAA7C;;AAEA,MAAMC,8BAAN,SAA6CL,aAA7C,CAA2D;AACzDM,EAAAA,WAAW,CAACC,EAAD,EAAKC,QAAL,EAAeC,OAAf,EAAwB;AACjC,UAAMA,OAAN;AAEA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAEDE,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMJ,EAAE,GAAG,KAAKA,EAAhB;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AAEA,UAAMG,SAAS,GAAG,IAAIR,gBAAJ,CAAqB,OAArB,EAA8B,MAA9B,CAAlB;AACAG,IAAAA,EAAE,CAACM,CAAH,CAAKC,QAAL,CAAcC,OAAd,CAAsBH,SAAtB,EAAiCJ,QAAjC,EAA2CC,OAA3C,EAAoD,CAACO,GAAD,EAAMC,MAAN,KAAiB;AACnE;AACA,UAAIV,EAAE,CAACW,YAAH,IAAmBX,EAAE,CAACW,YAAH,CAAgBC,WAAhB,EAAvB,EAAsD;AACpD,eAAOR,QAAQ,CAAC,IAAIR,UAAJ,CAAe,wBAAf,CAAD,CAAf;AACD;;AAED,UAAIa,GAAJ,EAAS,OAAOd,cAAc,CAACS,QAAD,EAAWK,GAAX,CAArB;AACTd,MAAAA,cAAc,CAACS,QAAD,EAAW,IAAX,EAAiBM,MAAM,CAACA,MAAxB,CAAd;AACD,KARD;AASD;;AAvBwD;;AA0B3DG,MAAM,CAACC,OAAP,GAAiBhB,8BAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nclass ExecuteDbAdminCommandOperation extends OperationBase {\n  constructor(db, selector, options) {\n    super(options);\n\n    this.db = db;\n    this.selector = selector;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const selector = this.selector;\n    const options = this.options;\n\n    const namespace = new MongoDBNamespace('admin', '$cmd');\n    db.s.topology.command(namespace, selector, options, (err, result) => {\n      // Did the user destroy the topology\n      if (db.serverConfig && db.serverConfig.isDestroyed()) {\n        return callback(new MongoError('topology was destroyed'));\n      }\n\n      if (err) return handleCallback(callback, err);\n      handleCallback(callback, null, result.result);\n    });\n  }\n}\n\nmodule.exports = ExecuteDbAdminCommandOperation;\n"]},"metadata":{},"sourceType":"script"}