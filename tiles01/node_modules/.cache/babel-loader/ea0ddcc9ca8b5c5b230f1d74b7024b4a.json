{"ast":null,"code":"// Copyright (c) 2008, Fair Oaks Labs, Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  * Redistributions of source code must retain the above copyright notice,\n//    this list of conditions and the following disclaimer.\n//\n//  * Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\n//\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\nvar readIEEE754 = function (buffer, offset, endian, mLen, nBytes) {\n  var e,\n      m,\n      bBE = endian === 'big',\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      nBits = -7,\n      i = bBE ? 0 : nBytes - 1,\n      d = bBE ? 1 : -1,\n      s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nvar writeIEEE754 = function (buffer, value, offset, endian, mLen, nBytes) {\n  var e,\n      m,\n      c,\n      bBE = endian === 'big',\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n      i = bBE ? nBytes - 1 : 0,\n      d = bBE ? -1 : 1,\n      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n\nexports.readIEEE754 = readIEEE754;\nexports.writeIEEE754 = writeIEEE754;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/bson/lib/bson/float_parser.js"],"names":["readIEEE754","buffer","offset","endian","mLen","nBytes","e","m","bBE","eLen","eMax","eBias","nBits","i","d","s","NaN","Infinity","Math","pow","writeIEEE754","value","c","rt","abs","isNaN","floor","log","LN2","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2008, Fair Oaks Labs, Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  * Redistributions of source code must retain the above copyright notice,\n//    this list of conditions and the following disclaimer.\n//\n//  * Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\n//\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\n\nvar readIEEE754 = function(buffer, offset, endian, mLen, nBytes) {\n  var e,\n    m,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    nBits = -7,\n    i = bBE ? 0 : nBytes - 1,\n    d = bBE ? 1 : -1,\n    s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << -nBits) - 1);\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << -nBits) - 1);\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nvar writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes) {\n  var e,\n    m,\n    c,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n    i = bBE ? nBytes - 1 : 0,\n    d = bBE ? -1 : 1,\n    s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n\nexports.readIEEE754 = readIEEE754;\nexports.writeIEEE754 = writeIEEE754;\n"]},"metadata":{},"sourceType":"script"}