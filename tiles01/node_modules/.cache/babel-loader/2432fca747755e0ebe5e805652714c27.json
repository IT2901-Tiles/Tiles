{"ast":null,"code":"'use strict'; // Core module\n\nconst core = require('./lib/core');\n\nconst Instrumentation = require('./lib/apm'); // Set up the connect function\n\n\nconst connect = require('./lib/mongo_client').connect; // Expose error class\n\n\nconnect.MongoError = core.MongoError;\nconnect.MongoNetworkError = core.MongoNetworkError;\nconnect.MongoTimeoutError = core.MongoTimeoutError;\nconnect.MongoServerSelectionError = core.MongoServerSelectionError;\nconnect.MongoParseError = core.MongoParseError;\nconnect.MongoWriteConcernError = core.MongoWriteConcernError;\nconnect.MongoBulkWriteError = require('./lib/bulk/common').BulkWriteError;\nconnect.BulkWriteError = connect.MongoBulkWriteError; // Actual driver classes exported\n\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/topologies/server');\nconnect.ReplSet = require('./lib/topologies/replset');\nconnect.Mongos = require('./lib/topologies/mongos');\nconnect.ReadPreference = core.ReadPreference;\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.AggregationCursor = require('./lib/aggregation_cursor');\nconnect.CommandCursor = require('./lib/command_cursor');\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream'); // Exported to be used in tests not to be used anywhere else\n\nconnect.CoreServer = core.Server;\nconnect.CoreConnection = core.Connection; // BSON types exported\n\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Int32 = core.BSON.Int32;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\nconnect.BSONRegExp = core.BSON.BSONRegExp;\nconnect.Decimal128 = core.BSON.Decimal128; // Add connect method\n\nconnect.connect = connect; // Set up the instrumentation method\n\nconnect.instrument = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  const instrumentation = new Instrumentation();\n  instrumentation.instrument(connect.MongoClient, callback);\n  return instrumentation;\n}; // Set our exports to be the connect function\n\n\nmodule.exports = connect;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/index.js"],"names":["core","require","Instrumentation","connect","MongoError","MongoNetworkError","MongoTimeoutError","MongoServerSelectionError","MongoParseError","MongoWriteConcernError","MongoBulkWriteError","BulkWriteError","Admin","MongoClient","Db","Collection","Server","ReplSet","Mongos","ReadPreference","GridStore","Chunk","Logger","AggregationCursor","CommandCursor","Cursor","GridFSBucket","CoreServer","CoreConnection","Connection","Binary","BSON","Code","Map","DBRef","Double","Int32","Long","MinKey","MaxKey","ObjectID","ObjectId","Symbol","Timestamp","BSONRegExp","Decimal128","instrument","options","callback","instrumentation","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// Core module\nconst core = require('./lib/core');\nconst Instrumentation = require('./lib/apm');\n\n// Set up the connect function\nconst connect = require('./lib/mongo_client').connect;\n\n// Expose error class\nconnect.MongoError = core.MongoError;\nconnect.MongoNetworkError = core.MongoNetworkError;\nconnect.MongoTimeoutError = core.MongoTimeoutError;\nconnect.MongoServerSelectionError = core.MongoServerSelectionError;\nconnect.MongoParseError = core.MongoParseError;\nconnect.MongoWriteConcernError = core.MongoWriteConcernError;\nconnect.MongoBulkWriteError = require('./lib/bulk/common').BulkWriteError;\nconnect.BulkWriteError = connect.MongoBulkWriteError;\n\n// Actual driver classes exported\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/topologies/server');\nconnect.ReplSet = require('./lib/topologies/replset');\nconnect.Mongos = require('./lib/topologies/mongos');\nconnect.ReadPreference = core.ReadPreference;\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.AggregationCursor = require('./lib/aggregation_cursor');\nconnect.CommandCursor = require('./lib/command_cursor');\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream');\n// Exported to be used in tests not to be used anywhere else\nconnect.CoreServer = core.Server;\nconnect.CoreConnection = core.Connection;\n\n// BSON types exported\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Int32 = core.BSON.Int32;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\nconnect.BSONRegExp = core.BSON.BSONRegExp;\nconnect.Decimal128 = core.BSON.Decimal128;\n\n// Add connect method\nconnect.connect = connect;\n\n// Set up the instrumentation method\nconnect.instrument = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  const instrumentation = new Instrumentation();\n  instrumentation.instrument(connect.MongoClient, callback);\n  return instrumentation;\n};\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n"]},"metadata":{},"sourceType":"script"}