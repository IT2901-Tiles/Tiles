{"ast":null,"code":"'use strict';\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\n\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      address,\n      previousDescription,\n      newDescription\n    });\n  }\n\n}\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\n\n\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n\n}\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\n\n\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n\n}\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\n\n\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      previousDescription,\n      newDescription\n    });\n  }\n\n}\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n\n}\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, {\n      connectionId\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      reply\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      failure\n    });\n  }\n\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/sdam/events.js"],"names":["ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","Object","assign","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, address, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, { connectionId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, { connectionId, duration, reply });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, { connectionId, duration, failure });\n  }\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};\n"]},"metadata":{},"sourceType":"script"}