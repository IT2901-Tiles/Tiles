{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst updateDocuments = require('./common_functions').updateDocuments;\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass ReplaceOneOperation extends OperationBase {\n  constructor(collection, filter, replacement, options) {\n    super(options);\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    this.collection = collection;\n    this.filter = filter;\n    this.replacement = replacement;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const replacement = this.replacement;\n    const options = this.options; // Set single document update\n\n    options.multi = false; // Execute update\n\n    updateDocuments(coll, filter, replacement, options, (err, r) => replaceCallback(err, r, replacement, callback));\n  }\n\n}\n\nfunction replaceCallback(err, r, doc, callback) {\n  if (callback == null) return;\n  if (err && callback) return callback(err);\n  if (r == null) return callback(null, {\n    result: {\n      ok: 1\n    }\n  });\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n  : null;\n  r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  r.ops = [doc]; // TODO: Should we still have this?\n\n  if (callback) callback(null, r);\n}\n\nmodule.exports = ReplaceOneOperation;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/operations/replace_one.js"],"names":["OperationBase","require","updateDocuments","hasAtomicOperators","ReplaceOneOperation","constructor","collection","filter","replacement","options","TypeError","execute","callback","coll","multi","err","r","replaceCallback","doc","result","ok","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","upsertedCount","matchedCount","ops","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst updateDocuments = require('./common_functions').updateDocuments;\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass ReplaceOneOperation extends OperationBase {\n  constructor(collection, filter, replacement, options) {\n    super(options);\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    this.collection = collection;\n    this.filter = filter;\n    this.replacement = replacement;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const replacement = this.replacement;\n    const options = this.options;\n\n    // Set single document update\n    options.multi = false;\n\n    // Execute update\n    updateDocuments(coll, filter, replacement, options, (err, r) =>\n      replaceCallback(err, r, replacement, callback)\n    );\n  }\n}\n\nfunction replaceCallback(err, r, doc, callback) {\n  if (callback == null) return;\n  if (err && callback) return callback(err);\n  if (r == null) return callback(null, { result: { ok: 1 } });\n\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n      ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n      : null;\n  r.upsertedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  r.ops = [doc]; // TODO: Should we still have this?\n  if (callback) callback(null, r);\n}\n\nmodule.exports = ReplaceOneOperation;\n"]},"metadata":{},"sourceType":"script"}