{"ast":null,"code":"'use strict';\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst MongoError = require('../error').MongoError;\n\nconst ServerType = require('../sdam/common').ServerType;\n\nconst TopologyDescription = require('../sdam/topology_description').TopologyDescription;\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n// OPCODE Numbers\n// Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes\n\nvar opcodes = {\n  OP_REPLY: 1,\n  OP_UPDATE: 2001,\n  OP_INSERT: 2002,\n  OP_QUERY: 2004,\n  OP_GETMORE: 2005,\n  OP_DELETE: 2006,\n  OP_KILL_CURSORS: 2007,\n  OP_COMPRESSED: 2012,\n  OP_MSG: 2013\n};\n\nvar getReadPreference = function (cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary'); // If we have an option readPreference override the command one\n\n  if (options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if (typeof readPreference === 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if (!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('read preference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n}; // Parses the header of a wire protocol message\n\n\nvar parseHeader = function (message) {\n  return {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n};\n\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false\n  });\n\n  if (typeof options.socketTimeout === 'number') {\n    queryOptions.socketTimeout = options.socketTimeout;\n  }\n\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n\n  if (typeof options.documentsReturnedIn === 'string') {\n    queryOptions.documentsReturnedIn = options.documentsReturnedIn;\n  }\n\n  return queryOptions;\n}\n\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer.type === 'mongos') return true;\n\n  if (topologyOrServer.description && topologyOrServer.description.type === ServerType.Mongos) {\n    return true;\n  } // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n\n\n  if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === ServerType.Mongos);\n  }\n\n  return false;\n}\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\n\nfunction collectionNamespace(ns) {\n  return ns.split('.').slice(1).join('.');\n}\n\nmodule.exports = {\n  getReadPreference,\n  MESSAGE_HEADER_SIZE,\n  COMPRESSION_DETAILS_SIZE,\n  opcodes,\n  parseHeader,\n  applyCommonQueryOptions,\n  isSharded,\n  databaseNamespace,\n  collectionNamespace\n};","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/wireprotocol/shared.js"],"names":["ReadPreference","require","MongoError","ServerType","TopologyDescription","MESSAGE_HEADER_SIZE","COMPRESSION_DETAILS_SIZE","opcodes","OP_REPLY","OP_UPDATE","OP_INSERT","OP_QUERY","OP_GETMORE","OP_DELETE","OP_KILL_CURSORS","OP_COMPRESSED","OP_MSG","getReadPreference","cmd","options","readPreference","parseHeader","message","length","readInt32LE","requestId","responseTo","opCode","applyCommonQueryOptions","queryOptions","Object","assign","raw","promoteLongs","promoteValues","promoteBuffers","monitoring","fullResult","socketTimeout","session","documentsReturnedIn","isSharded","topologyOrServer","type","description","Mongos","servers","Array","from","values","some","server","databaseNamespace","ns","split","collectionNamespace","slice","join","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ReadPreference = require('../topologies/read_preference');\nconst MongoError = require('../error').MongoError;\nconst ServerType = require('../sdam/common').ServerType;\nconst TopologyDescription = require('../sdam/topology_description').TopologyDescription;\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\n// OPCODE Numbers\n// Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes\nvar opcodes = {\n  OP_REPLY: 1,\n  OP_UPDATE: 2001,\n  OP_INSERT: 2002,\n  OP_QUERY: 2004,\n  OP_GETMORE: 2005,\n  OP_DELETE: 2006,\n  OP_KILL_CURSORS: 2007,\n  OP_COMPRESSED: 2012,\n  OP_MSG: 2013\n};\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if (options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if (typeof readPreference === 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if (!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('read preference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n};\n\n// Parses the header of a wire protocol message\nvar parseHeader = function(message) {\n  return {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n};\n\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false\n  });\n\n  if (typeof options.socketTimeout === 'number') {\n    queryOptions.socketTimeout = options.socketTimeout;\n  }\n\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n\n  if (typeof options.documentsReturnedIn === 'string') {\n    queryOptions.documentsReturnedIn = options.documentsReturnedIn;\n  }\n\n  return queryOptions;\n}\n\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer.type === 'mongos') return true;\n  if (topologyOrServer.description && topologyOrServer.description.type === ServerType.Mongos) {\n    return true;\n  }\n\n  // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n  if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === ServerType.Mongos);\n  }\n\n  return false;\n}\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\nfunction collectionNamespace(ns) {\n  return ns\n    .split('.')\n    .slice(1)\n    .join('.');\n}\n\nmodule.exports = {\n  getReadPreference,\n  MESSAGE_HEADER_SIZE,\n  COMPRESSION_DETAILS_SIZE,\n  opcodes,\n  parseHeader,\n  applyCommonQueryOptions,\n  isSharded,\n  databaseNamespace,\n  collectionNamespace\n};\n"]},"metadata":{},"sourceType":"script"}