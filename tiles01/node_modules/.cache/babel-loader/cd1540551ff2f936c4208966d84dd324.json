{"ast":null,"code":"// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * This type is for INTERNAL use in MongoDB only and should not be used in applications.\n * The appropriate corresponding type is the JavaScript Date type.\n * \n * Defines a Timestamp class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Timestamp\". This\n * implementation is derived from TimestampLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Timestamps.\n *\n * The internal representation of a Timestamp is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n */\nfunction Timestamp(low, high) {\n  if (!(this instanceof Timestamp)) return new Timestamp(low, high);\n  this._bsontype = 'Timestamp';\n  /**\n   * @type {number}\n   * @ignore\n   */\n\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n/**\n * Return the int value.\n *\n * @return {number} the value, assuming it is a 32-bit integer.\n */\n\n\nTimestamp.prototype.toInt = function () {\n  return this.low_;\n};\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\n\n\nTimestamp.prototype.toNumber = function () {\n  return this.high_ * Timestamp.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\n\n\nTimestamp.prototype.toJSON = function () {\n  return this.toString();\n};\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\n\n\nTimestamp.prototype.toString = function (opt_radix) {\n  var radix = opt_radix || 10;\n\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      // We need to change the Timestamp value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixTimestamp = Timestamp.fromNumber(radix);\n      var div = this.div(radixTimestamp);\n      var rem = div.multiply(radixTimestamp).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  } // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n    rem = remDiv;\n\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n\n      result = '' + digits + result;\n    }\n  }\n};\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\n\n\nTimestamp.prototype.getHighBits = function () {\n  return this.high_;\n};\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\n\n\nTimestamp.prototype.getLowBits = function () {\n  return this.low_;\n};\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\n\n\nTimestamp.prototype.getLowBitsUnsigned = function () {\n  return this.low_ >= 0 ? this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;\n};\n/**\n * Returns the number of bits needed to represent the absolute value of this Timestamp.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.\n */\n\n\nTimestamp.prototype.getNumBitsAbs = function () {\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) !== 0) {\n        break;\n      }\n    }\n\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\n\n\nTimestamp.prototype.isZero = function () {\n  return this.high_ === 0 && this.low_ === 0;\n};\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\n\n\nTimestamp.prototype.isNegative = function () {\n  return this.high_ < 0;\n};\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\n\n\nTimestamp.prototype.isOdd = function () {\n  return (this.low_ & 1) === 1;\n};\n/**\n * Return whether this Timestamp equals the other\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp equals the other\n */\n\n\nTimestamp.prototype.equals = function (other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n/**\n * Return whether this Timestamp does not equal the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp does not equal the other.\n */\n\n\nTimestamp.prototype.notEquals = function (other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n/**\n * Return whether this Timestamp is less than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than the other.\n */\n\n\nTimestamp.prototype.lessThan = function (other) {\n  return this.compare(other) < 0;\n};\n/**\n * Return whether this Timestamp is less than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than or equal to the other.\n */\n\n\nTimestamp.prototype.lessThanOrEqual = function (other) {\n  return this.compare(other) <= 0;\n};\n/**\n * Return whether this Timestamp is greater than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than the other.\n */\n\n\nTimestamp.prototype.greaterThan = function (other) {\n  return this.compare(other) > 0;\n};\n/**\n * Return whether this Timestamp is greater than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than or equal to the other.\n */\n\n\nTimestamp.prototype.greaterThanOrEqual = function (other) {\n  return this.compare(other) >= 0;\n};\n/**\n * Compares this Timestamp with the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\n\n\nTimestamp.prototype.compare = function (other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n\n  if (!thisNeg && otherNeg) {\n    return 1;\n  } // at this point, the signs are the same, so subtraction will not overflow\n\n\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\n * The negation of this value.\n *\n * @method\n * @return {Timestamp} the negation of this value.\n */\n\n\nTimestamp.prototype.negate = function () {\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.MIN_VALUE;\n  } else {\n    return this.not().add(Timestamp.ONE);\n  }\n};\n/**\n * Returns the sum of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to add to this one.\n * @return {Timestamp} the sum of this and the given Timestamp.\n */\n\n\nTimestamp.prototype.add = function (other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n/**\n * Returns the difference of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to subtract from this.\n * @return {Timestamp} the difference of this and the given Timestamp.\n */\n\n\nTimestamp.prototype.subtract = function (other) {\n  return this.add(other.negate());\n};\n/**\n * Returns the product of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to multiply with this.\n * @return {Timestamp} the product of this and the other.\n */\n\n\nTimestamp.prototype.multiply = function (other) {\n  if (this.isZero()) {\n    return Timestamp.ZERO;\n  } else if (other.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  } // If both Timestamps are small, use float multiplication\n\n\n  if (this.lessThan(Timestamp.TWO_PWR_24_) && other.lessThan(Timestamp.TWO_PWR_24_)) {\n    return Timestamp.fromNumber(this.toNumber() * other.toNumber());\n  } // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n/**\n * Returns this Timestamp divided by the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to divide.\n * @return {Timestamp} this Timestamp divided by the given one.\n */\n\n\nTimestamp.prototype.div = function (other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    if (other.equals(Timestamp.ONE) || other.equals(Timestamp.NEG_ONE)) {\n      return Timestamp.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Timestamp.MIN_VALUE)) {\n      return Timestamp.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n\n      if (approx.equals(Timestamp.ZERO)) {\n        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  } // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n\n\n  var res = Timestamp.ZERO;\n  rem = this;\n\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48); // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n\n    var approxRes = Timestamp.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Timestamp.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    } // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n\n\n    if (approxRes.isZero()) {\n      approxRes = Timestamp.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n\n  return res;\n};\n/**\n * Returns this Timestamp modulo the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to mod.\n * @return {Timestamp} this Timestamp modulo the given one.\n */\n\n\nTimestamp.prototype.modulo = function (other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Timestamp} the bitwise-NOT of this value.\n */\n\n\nTimestamp.prototype.not = function () {\n  return Timestamp.fromBits(~this.low_, ~this.high_);\n};\n/**\n * Returns the bitwise-AND of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to AND.\n * @return {Timestamp} the bitwise-AND of this and the other.\n */\n\n\nTimestamp.prototype.and = function (other) {\n  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n/**\n * Returns the bitwise-OR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to OR.\n * @return {Timestamp} the bitwise-OR of this and the other.\n */\n\n\nTimestamp.prototype.or = function (other) {\n  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n/**\n * Returns the bitwise-XOR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to XOR.\n * @return {Timestamp} the bitwise-XOR of this and the other.\n */\n\n\nTimestamp.prototype.xor = function (other) {\n  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n/**\n * Returns this Timestamp with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the left by the given amount.\n */\n\n\nTimestamp.prototype.shiftLeft = function (numBits) {\n  numBits &= 63;\n\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n\n    if (numBits < 32) {\n      var high = this.high_;\n      return Timestamp.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);\n    } else {\n      return Timestamp.fromBits(0, low << numBits - 32);\n    }\n  }\n};\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount.\n */\n\n\nTimestamp.prototype.shiftRight = function (numBits) {\n  numBits &= 63;\n\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);\n    } else {\n      return Timestamp.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);\n    }\n  }\n};\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\n\n\nTimestamp.prototype.shiftRightUnsigned = function (numBits) {\n  numBits &= 63;\n\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);\n    } else if (numBits === 32) {\n      return Timestamp.fromBits(high, 0);\n    } else {\n      return Timestamp.fromBits(high >>> numBits - 32, 0);\n    }\n  }\n};\n/**\n * Returns a Timestamp representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\n\n\nTimestamp.fromInt = function (value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Timestamp.INT_CACHE_[value];\n\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);\n\n  if (-128 <= value && value < 128) {\n    Timestamp.INT_CACHE_[value] = obj;\n  }\n\n  return obj;\n};\n/**\n * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\n\n\nTimestamp.fromNumber = function (value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Timestamp.ZERO;\n  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MIN_VALUE;\n  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MAX_VALUE;\n  } else if (value < 0) {\n    return Timestamp.fromNumber(-value).negate();\n  } else {\n    return new Timestamp(value % Timestamp.TWO_PWR_32_DBL_ | 0, value / Timestamp.TWO_PWR_32_DBL_ | 0);\n  }\n};\n/**\n * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Timestamp} the corresponding Timestamp value.\n */\n\n\nTimestamp.fromBits = function (lowBits, highBits) {\n  return new Timestamp(lowBits, highBits);\n};\n/**\n * Returns a Timestamp representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Timestamp.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Timestamp} the corresponding Timestamp value.\n */\n\n\nTimestamp.fromString = function (str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Timestamp.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  } // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));\n  var result = Timestamp.ZERO;\n\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n\n    if (size < 8) {\n      var power = Timestamp.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Timestamp.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Timestamp.fromNumber(value));\n    }\n  }\n\n  return result;\n}; // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Timestamp representations of small integer values.\n * @type {Object}\n * @ignore\n */\n\n\nTimestamp.INT_CACHE_ = {}; // NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_16_DBL_ = 1 << 16;\n/**\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_24_DBL_ = 1 << 24;\n/**\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n/**\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;\n/**\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n/**\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;\n/**\n * @type {number}\n * @ignore\n */\n\nTimestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;\n/** @type {Timestamp} */\n\nTimestamp.ZERO = Timestamp.fromInt(0);\n/** @type {Timestamp} */\n\nTimestamp.ONE = Timestamp.fromInt(1);\n/** @type {Timestamp} */\n\nTimestamp.NEG_ONE = Timestamp.fromInt(-1);\n/** @type {Timestamp} */\n\nTimestamp.MAX_VALUE = Timestamp.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n/** @type {Timestamp} */\n\nTimestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);\n/**\n * @type {Timestamp}\n * @ignore\n */\n\nTimestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);\n/**\n * Expose.\n */\n\nmodule.exports = Timestamp;\nmodule.exports.Timestamp = Timestamp;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/bson/lib/bson/timestamp.js"],"names":["Timestamp","low","high","_bsontype","low_","high_","prototype","toInt","toNumber","TWO_PWR_32_DBL_","getLowBitsUnsigned","toJSON","toString","opt_radix","radix","Error","isZero","isNegative","equals","MIN_VALUE","radixTimestamp","fromNumber","div","rem","multiply","subtract","negate","radixToPower","Math","pow","result","remDiv","intval","digits","length","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","add","ONE","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","fromBits","ZERO","TWO_PWR_24_","NEG_ONE","halfThis","shiftRight","approx","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","fromInt","value","cachedObj","INT_CACHE_","obj","isNaN","isFinite","TWO_PWR_63_DBL_","MAX_VALUE","lowBits","highBits","fromString","str","charAt","substring","indexOf","i","size","min","parseInt","power","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","module","exports"],"mappings":"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","sourcesContent":["// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * This type is for INTERNAL use in MongoDB only and should not be used in applications.\n * The appropriate corresponding type is the JavaScript Date type.\n * \n * Defines a Timestamp class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Timestamp\". This\n * implementation is derived from TimestampLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Timestamps.\n *\n * The internal representation of a Timestamp is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n */\nfunction Timestamp(low, high) {\n  if (!(this instanceof Timestamp)) return new Timestamp(low, high);\n  this._bsontype = 'Timestamp';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nTimestamp.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nTimestamp.prototype.toNumber = function() {\n  return this.high_ * Timestamp.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nTimestamp.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nTimestamp.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      // We need to change the Timestamp value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixTimestamp = Timestamp.fromNumber(radix);\n      var div = this.div(radixTimestamp);\n      var rem = div.multiply(radixTimestamp).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nTimestamp.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nTimestamp.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nTimestamp.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Timestamp.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.\n */\nTimestamp.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nTimestamp.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nTimestamp.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nTimestamp.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Timestamp equals the other\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp equals the other\n */\nTimestamp.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Timestamp does not equal the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp does not equal the other.\n */\nTimestamp.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Timestamp is less than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than the other.\n */\nTimestamp.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Timestamp is less than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than or equal to the other.\n */\nTimestamp.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Timestamp is greater than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than the other.\n */\nTimestamp.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Timestamp is greater than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than or equal to the other.\n */\nTimestamp.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Timestamp with the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nTimestamp.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Timestamp} the negation of this value.\n */\nTimestamp.prototype.negate = function() {\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.MIN_VALUE;\n  } else {\n    return this.not().add(Timestamp.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to add to this one.\n * @return {Timestamp} the sum of this and the given Timestamp.\n */\nTimestamp.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to subtract from this.\n * @return {Timestamp} the difference of this and the given Timestamp.\n */\nTimestamp.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to multiply with this.\n * @return {Timestamp} the product of this and the other.\n */\nTimestamp.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Timestamp.ZERO;\n  } else if (other.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Timestamps are small, use float multiplication\n  if (this.lessThan(Timestamp.TWO_PWR_24_) && other.lessThan(Timestamp.TWO_PWR_24_)) {\n    return Timestamp.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Timestamp divided by the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to divide.\n * @return {Timestamp} this Timestamp divided by the given one.\n */\nTimestamp.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    if (other.equals(Timestamp.ONE) || other.equals(Timestamp.NEG_ONE)) {\n      return Timestamp.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Timestamp.MIN_VALUE)) {\n      return Timestamp.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Timestamp.ZERO)) {\n        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Timestamp.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Timestamp.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Timestamp.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Timestamp.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Timestamp modulo the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to mod.\n * @return {Timestamp} this Timestamp modulo the given one.\n */\nTimestamp.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Timestamp} the bitwise-NOT of this value.\n */\nTimestamp.prototype.not = function() {\n  return Timestamp.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to AND.\n * @return {Timestamp} the bitwise-AND of this and the other.\n */\nTimestamp.prototype.and = function(other) {\n  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to OR.\n * @return {Timestamp} the bitwise-OR of this and the other.\n */\nTimestamp.prototype.or = function(other) {\n  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to XOR.\n * @return {Timestamp} the bitwise-XOR of this and the other.\n */\nTimestamp.prototype.xor = function(other) {\n  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Timestamp with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the left by the given amount.\n */\nTimestamp.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Timestamp.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Timestamp.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount.\n */\nTimestamp.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Timestamp.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nTimestamp.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Timestamp.fromBits(high, 0);\n    } else {\n      return Timestamp.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Timestamp representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Timestamp.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Timestamp.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Timestamp.ZERO;\n  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MIN_VALUE;\n  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MAX_VALUE;\n  } else if (value < 0) {\n    return Timestamp.fromNumber(-value).negate();\n  } else {\n    return new Timestamp(\n      (value % Timestamp.TWO_PWR_32_DBL_) | 0,\n      (value / Timestamp.TWO_PWR_32_DBL_) | 0\n    );\n  }\n};\n\n/**\n * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromBits = function(lowBits, highBits) {\n  return new Timestamp(lowBits, highBits);\n};\n\n/**\n * Returns a Timestamp representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Timestamp.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Timestamp.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));\n\n  var result = Timestamp.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Timestamp.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Timestamp.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Timestamp.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Timestamp representations of small integer values.\n * @type {Object}\n * @ignore\n */\nTimestamp.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Timestamp} */\nTimestamp.ZERO = Timestamp.fromInt(0);\n\n/** @type {Timestamp} */\nTimestamp.ONE = Timestamp.fromInt(1);\n\n/** @type {Timestamp} */\nTimestamp.NEG_ONE = Timestamp.fromInt(-1);\n\n/** @type {Timestamp} */\nTimestamp.MAX_VALUE = Timestamp.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Timestamp} */\nTimestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Timestamp}\n * @ignore\n */\nTimestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Timestamp;\nmodule.exports.Timestamp = Timestamp;\n"]},"metadata":{},"sourceType":"script"}