{"ast":null,"code":"'use strict';\n\nvar f = require('util').format,\n    MongoError = require('../error').MongoError; // Filters for classes\n\n\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null; // Save the process id\n\nvar pid = process.pid; // current logger\n\nvar currentLogger = null;\n/**\n * @callback Logger~loggerCallback\n * @param {string} msg message being logged\n * @param {object} state an object containing more metadata about the logging message\n */\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Logger~loggerCallback} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n */\n\nvar Logger = function (className, options) {\n  if (!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {}; // Current reference\n\n  this.className = className; // Current logger\n\n  if (options.logger) {\n    currentLogger = options.logger;\n  } else if (currentLogger == null) {\n    currentLogger = console.log;\n  } // Set level of logging, default is error\n\n\n  if (options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  } // Add all class names\n\n\n  if (filteredClasses[this.className] == null) classFilters[this.className] = true;\n};\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\n\n\nLogger.prototype.debug = function (message, object) {\n  if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n};\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\n\n\nLogger.prototype.warn = function (message, object) {\n  if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n/**\n * Log a message at the info level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.info = function (message, object) {\n  if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n    var state = {\n      type: 'info',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n/**\n * Log a message at the error level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.error = function (message, object) {\n  if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n    var state = {\n      type: 'error',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n/**\n * Is the logger set at info level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isInfo = function () {\n  return level === 'info' || level === 'debug';\n},\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isError = function () {\n  return level === 'error' || level === 'info' || level === 'debug';\n},\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isWarn = function () {\n  return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';\n},\n/**\n * Is the logger set at debug level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isDebug = function () {\n  return level === 'debug';\n};\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\n\nLogger.reset = function () {\n  level = 'error';\n  filteredClasses = {};\n};\n/**\n * Get the current logger function\n * @method\n * @return {Logger~loggerCallback}\n */\n\n\nLogger.currentLogger = function () {\n  return currentLogger;\n};\n/**\n * Set the current logger function\n * @method\n * @param {Logger~loggerCallback} logger Logger function.\n * @return {null}\n */\n\n\nLogger.setCurrentLogger = function (logger) {\n  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');\n  currentLogger = logger;\n};\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\n\n\nLogger.filter = function (type, values) {\n  if (type === 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n    values.forEach(function (x) {\n      filteredClasses[x] = true;\n    });\n  }\n};\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\n\n\nLogger.setLevel = function (_level) {\n  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {\n    throw new Error(f('%s is an illegal logging level', _level));\n  }\n\n  level = _level;\n};\n\nmodule.exports = Logger;","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/core/connection/logger.js"],"names":["f","require","format","MongoError","classFilters","filteredClasses","level","pid","process","currentLogger","Logger","className","options","logger","console","log","loggerLevel","prototype","debug","message","object","isDebug","Object","keys","length","dateTime","Date","getTime","msg","state","type","date","meta","warn","isWarn","info","isInfo","error","isError","reset","setCurrentLogger","filter","values","Array","isArray","forEach","x","setLevel","_level","Error","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar f = require('util').format,\n  MongoError = require('../error').MongoError;\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * @callback Logger~loggerCallback\n * @param {string} msg message being logged\n * @param {object} state an object containing more metadata about the logging message\n */\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Logger~loggerCallback} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n */\nvar Logger = function(className, options) {\n  if (!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if (options.logger) {\n    currentLogger = options.logger;\n  } else if (currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if (options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if (filteredClasses[this.className] == null) classFilters[this.className] = true;\n};\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if (\n    this.isDebug() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n};\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\n(Logger.prototype.warn = function(message, object) {\n  if (\n    this.isWarn() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}),\n  /**\n   * Log a message at the info level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.info = function(message, object) {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      var state = {\n        type: 'info',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Log a message at the error level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.error = function(message, object) {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      var state = {\n        type: 'error',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Is the logger set at info level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isInfo = function() {\n    return level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isError = function() {\n    return level === 'error' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isWarn = function() {\n    return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at debug level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isDebug = function() {\n    return level === 'debug';\n  });\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n};\n\n/**\n * Get the current logger function\n * @method\n * @return {Logger~loggerCallback}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n};\n\n/**\n * Set the current logger function\n * @method\n * @param {Logger~loggerCallback} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');\n  currentLogger = logger;\n};\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if (type === 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n};\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {\n    throw new Error(f('%s is an illegal logging level', _level));\n  }\n\n  level = _level;\n};\n\nmodule.exports = Logger;\n"]},"metadata":{},"sourceType":"script"}