{"ast":null,"code":"'use strict';\n\nconst MongoError = require('./core/error').MongoError;\n\nconst ExplainVerbosity = {\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n};\n/**\n * @class\n * @property {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'} verbosity The verbosity mode for the explain output.\n */\n\nclass Explain {\n  /**\n   * Constructs an Explain from the explain verbosity.\n   *\n   * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n   * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n   * ignores the verbosity parameter and executes in \"queryPlanner\".\n   *\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity] The verbosity mode for the explain output.\n   */\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? 'allPlansExecution' : 'queryPlanner';\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n  /**\n   * Construct an Explain given an options object.\n   *\n   * @param {object} [options] The options object from which to extract the explain.\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output\n   * @return {Explain}\n   */\n\n\n  static fromOptions(options) {\n    if (options == null || options.explain === undefined) {\n      return;\n    }\n\n    const explain = options.explain;\n\n    if (typeof explain === 'boolean' || explain in ExplainVerbosity) {\n      return new Explain(options.explain);\n    }\n\n    throw new MongoError(`explain must be one of ${Object.keys(ExplainVerbosity)} or a boolean`);\n  }\n\n}\n\nmodule.exports = {\n  Explain\n};","map":{"version":3,"sources":["C:/Users/StuartGO/projects/bachelorOppgave/Tiles/tiles01/node_modules/mongodb/lib/explain.js"],"names":["MongoError","require","ExplainVerbosity","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","Explain","constructor","verbosity","fromOptions","options","explain","undefined","Object","keys","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,UAA3C;;AAEA,MAAME,gBAAgB,GAAG;AACvBC,EAAAA,YAAY,EAAE,cADS;AAEvBC,EAAAA,oBAAoB,EAAE,sBAFC;AAGvBC,EAAAA,cAAc,EAAE,gBAHO;AAIvBC,EAAAA,iBAAiB,EAAE;AAJI,CAAzB;AAOA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,CAAc;AACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,QAAI,OAAOA,SAAP,KAAqB,SAAzB,EAAoC;AAClC,WAAKA,SAAL,GAAiBA,SAAS,GAAG,mBAAH,GAAyB,cAAnD;AACD,KAFD,MAEO;AACL,WAAKA,SAAL,GAAiBA,SAAjB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,WAAP,CAAmBC,OAAnB,EAA4B;AAC1B,QAAIA,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACC,OAAR,KAAoBC,SAA3C,EAAsD;AACpD;AACD;;AAED,UAAMD,OAAO,GAAGD,OAAO,CAACC,OAAxB;;AACA,QAAI,OAAOA,OAAP,KAAmB,SAAnB,IAAgCA,OAAO,IAAIV,gBAA/C,EAAiE;AAC/D,aAAO,IAAIK,OAAJ,CAAYI,OAAO,CAACC,OAApB,CAAP;AACD;;AAED,UAAM,IAAIZ,UAAJ,CAAgB,0BAAyBc,MAAM,CAACC,IAAP,CAAYb,gBAAZ,CAA8B,eAAvE,CAAN;AACD;;AApCW;;AAuCdc,MAAM,CAACC,OAAP,GAAiB;AAAEV,EAAAA;AAAF,CAAjB","sourcesContent":["'use strict';\n\nconst MongoError = require('./core/error').MongoError;\n\nconst ExplainVerbosity = {\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n};\n\n/**\n * @class\n * @property {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'} verbosity The verbosity mode for the explain output.\n */\nclass Explain {\n  /**\n   * Constructs an Explain from the explain verbosity.\n   *\n   * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n   * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n   * ignores the verbosity parameter and executes in \"queryPlanner\".\n   *\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity] The verbosity mode for the explain output.\n   */\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? 'allPlansExecution' : 'queryPlanner';\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  /**\n   * Construct an Explain given an options object.\n   *\n   * @param {object} [options] The options object from which to extract the explain.\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output\n   * @return {Explain}\n   */\n  static fromOptions(options) {\n    if (options == null || options.explain === undefined) {\n      return;\n    }\n\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || explain in ExplainVerbosity) {\n      return new Explain(options.explain);\n    }\n\n    throw new MongoError(`explain must be one of ${Object.keys(ExplainVerbosity)} or a boolean`);\n  }\n}\n\nmodule.exports = { Explain };\n"]},"metadata":{},"sourceType":"script"}